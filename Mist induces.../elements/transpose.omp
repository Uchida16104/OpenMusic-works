; OM File Header - Saved 2024/02/23 01:01:48
; (7.03 :patc (om-make-point 172 10) (om-make-point 721 286) (om-make-point 500 400) "" 183 0 "2024/02/20 21:44:56" "2024/02/20 22:22:13")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"circle.omp\"" "#P\"overtone.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "transpose" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 142 52) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 112 52) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 8" 7 (om-make-point 401 286) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 7" 6 (om-make-point 352 287) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 6" 5 (om-make-point 303 287) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 5" 4 (om-make-point 254 288) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 205 288) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 157 288) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 109 288) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 70 287) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "circle 8" (quote ("elements" "circle")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 359 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "circle 7" (quote ("elements" "circle")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 327 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "circle 6" (quote ("elements" "circle")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 297 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "circle 5" (quote ("elements" "circle")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 266 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "circle 4" (quote ("elements" "circle")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 238 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "circle 3" (quote ("elements" "circle")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 205 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "circle 2" (quote ("elements" "circle")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 173 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EIGHTH" (quote eighth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 362 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SEVENTH" (quote seventh) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 319 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SIXTH" (quote sixth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 292 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIFTH" (quote fifth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 270 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 236 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 209 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 170 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 147 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "circle" (quote ("elements" "circle")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 142 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 205 72) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "overtone" (quote ("elements" "overtone")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 136 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 2 0 nil 0) (11 0 3 0 nil 0) (12 0 4 0 nil 0) (13 0 5 0 nil 0) (14 0 6 0 nil 0) (15 0 7 0 nil 0) (16 0 8 0 nil 0) (25 0 9 0 nil 0) (17 0 10 0 nil 0) (18 0 11 0 nil 0) (19 0 12 0 nil 0) (20 0 13 0 nil 0) (21 0 14 0 nil 0) (22 0 15 0 nil 0) (23 0 16 0 nil 0) (27 0 17 0 nil 0) (27 0 18 0 nil 0) (27 0 19 0 nil 0) (27 0 20 0 nil 0) (27 0 21 0 nil 0) (27 0 22 0 nil 0) (27 0 23 0 nil 0) (27 0 24 0 nil 0) (24 0 25 0 nil 0) (1 0 27 0 nil 0) (0 0 27 1 nil 0) (26 0 27 2 nil 0))) nil 7.03))
