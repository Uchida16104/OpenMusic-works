; OM File Header - Saved 2023/05/21 18:56:40
; (7.02 :patc (om-make-point 118 10) (om-make-point 703 202) (om-make-point 500 400) "" 183 0 "2023/05/21 16:03:51" "2023/05/21 18:56:40")
; End File Header
(in-package :om)(load-lib-for (quote ("Esquisse")))(setf *om-current-persistent* (om-load-patch1 "inharm" (quote ((let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 148 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 303 64) (om-make-point 153 30) (list -1 -2 -3 -4 -5 -6 -7 -8) "(-1 -2 -3 -4 -5 -6 -7 -8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-HARM 2" (quote nth-harm) (quote ((om-load-inputfun (quote input-funbox) "Fundamental" "FUND" 3600) (om-load-inputfun (quote input-funbox) "Partial-numbers" "NTH" (list 1 2 3 4 5)) (om-load-inputfunmenu1 (quote input-funmenu) "Unit" "UNIT" 1 (list (list "Midics" 1) (list "Freqs" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "Type" "TYPE" 1 (list (list "Chord" 2) (list "ChordSeq" 1))))) (om-make-point 353 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 189 64) (om-make-point 113 30) (list 1 2 3 4 5 6 7 8) "(1 2 3 4 5 6 7 8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-HARM" (quote nth-harm) (quote ((om-load-inputfun (quote input-funbox) "Fundamental" "FUND" 3600) (om-load-inputfun (quote input-funbox) "Partial-numbers" "NTH" (list 1 2 3 4 5)) (om-load-inputfunmenu1 (quote input-funmenu) "Unit" "UNIT" 1 (list (list "Midics" 1) (list "Freqs" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "Type" "TYPE" 1 (list (list "Chord" 2) (list "ChordSeq" 1))))) (om-make-point 219 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 95 38) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 140 64) (om-make-point 48 30) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 192 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 184 305) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (6 0 0 1 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (0 0 7 0 nil 0) (4 0 7 1 nil 0) (2 0 7 2 nil 0) (7 0 8 0 nil 0))) nil 7.02))
