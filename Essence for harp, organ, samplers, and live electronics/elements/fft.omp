; OM File Header - Saved 2023/05/21 18:56:40
; (7.02 :patc (om-make-point 10 10) (om-make-point 171 25) (om-make-point 1269 794) "" 183 0 "2023/05/21 14:33:42" "2023/05/21 17:02:59")
; End File Header
(in-package :om)(load-lib-for (quote ("Repmus")))(setf *om-current-persistent* (om-load-patch1 "fft" (quote ((let ((box (om-load-boxin "input" 0 (om-make-point 48 69) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 255 418) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 249 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 6" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 426 313) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 5" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 353 313) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 4" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 280 313) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 3" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 207 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 2" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 134 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 61 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 6" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 451 199) (om-make-point 66 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7320 8218 8022 8328 7576 8136 7706 7850 7504) (8170) (7418) (7258 8048) (7718) (8250) (8130) (7430 7918) (7596) (7914) (8384) (8198) (7990) (7584) (7436) (8180) (7264) (7794 7764) (7592) (8334) (8076) (7416 7834) (8248) (7934) (7264 8390) (7526) (7712) (8122) (7558 7934 7412) (7718) (7338 8218) (8398) (8110) (7446) (7926) (7266 8310 7676) (8270) (8390 7636) (8042) (7390) (8108) (7242) (8064 7550) (7938) (8272) (8394) (7400) (8370 8116) (7444) (8160 7678) (7374 8300) (7990) (8064) (7904) (8118) (7768) (7932) (7330) (8382) (7552) (8296 8080 7898) (7938) (7904) (7422) (7804 8090) (7584) (7264 8302 7408) (7658) (7452 8196) (7926) (7400) (8386) (7436) (7770) (8188) (7946 7656) (8394 8128) (7616) (7312 8318) (8246) (8342 7936 7724) (8138 8068) (7456) (7874) (8164 7652) (7588) (7480 8184) (8058) (8316) (8196) (7934) (7798 7480 8116) (7258) (7758 7612) (8064) (8198) (7736) (7316) (8122) (8328) (7810 7754) (8086) (7618) (8336) (7958 7508) (8226) (8242 7414) (7946) (7248 8382) (8242) (7420) (7938) (8108) (7318) (8194) (7750) (8376) (8112) (7502 7754) (7266) (8016) (7378 7950) (8078) (7440) (7674) (8400 8206 8070) (7822) (7426) (8106) (7262) (8014 8306) (7814) (8030) (8102) (7380 7560) (8064) (7804) (7950) (8394 7546) (7960) (7400 8088) (7296) (7560) (8106 7748) (8340) (7472 8308) (8010) (7904) (7732) (8216 7784 8334) (8086) (7392) (7986) (7802) (7328 8112 8316) (8366) (7758 8018) (8180) (8384) (7262) (7976) (7370 8352) (8148 7812) (7306 8300) (7580) (8166) (7266) (7452) (8376) (7278 7952) (7806) (8108 7556) (8340) (8132 7974) (8090) (7882 8310) (7268) (7810) (8254) (7964) (7286) (7772 8328) (7902) (7966) (7720) (8216) (8154 7286) (7902) (8146 7806) (7552) (8328 7402) (7280) (7738 8312 7966 7896) (7564) (8188) (8386) (8370 7750 7366) (8012) (8168) (7456) (8010) (8370) (8148 7906) (8172) (8080) (8166) (8042) (8370) (8014) (8170) (8062) (7556 7896) (7566) (8318) (8242) (8122) (7506) (8110) (7982) (7966) (8320) (8162) (7470) (8382) (8094) (8304) (8150) (8056) (8320) (7966) (7272) (7556) (8176) (8386) (7810) (7574) (7988) (7508 8076) (7940) (8154 7290) (8096) (7944) (8344) (8122) (8118 7742) (7556) (8172) (8046) (7396) (7988) (8148) (7280) (7216) (8192) (7658) (7938) (7752) (8182) (8132) (7436) (8376) (7820) (8306 7558 7278) (8100) (7982) (7694) (8194) (8388) (8374) (7958 7558) (8036) (8302) (8014) (7598) (8380 7384) (8132) (8124 7884) (7330) (7210) (8370) (8008) (8134) (8114) (8198) (7384) (8370) (7246) (8184 7810) (7412) (8266) (7998 7312) (8168 7584) (7234) (8368 8302 7392) (7936) (8316) (7556) (8164) (8348) (7970) (8392 8044) (7250) (8158) (8378) (7912) (7564) (8100) (8238 8384) (8246) (8246 7548) (7298) (8044) (7758) (8150) (8166) (7992) (7864) (7974) (8162) (7840) (8202 7970) (7580) (8118) (7408) (7954) (7654) (7816) (7230) (8144) (7306) (8110) (7546) (7362) (8396 7988) (7960) (8280) (8200 8046 7756) (7320) (8278) (8048) (7656) (7934) (7976) (7298) (8270) (7816) (7562) (7726 7666) (7372) (8022) (7296) (8144) (7940 7752) (7556) (8238) (8000 7802) (8132) (8396) (8244 7852) (8396 8058) (8120 7814) (7290) (8158) (8266) (8390 7310) (7588) (8118) (8170) (8056) (7308) (7970) (8180) (8038) (7302) (7906 7594) (8106) (8368) (8122) (8008 7294) (7950) (8188 7798) (7282) (8098) (7878) (8066) (7326) (7960) (8380) (8272) (8052) (8010) (8140) (8168) (7552) (7882) (8248) (8158) (7290) (7854) (8006) (8392) (8212 7592) (8060) (7998) (7310) (7900) (8082) (8204) (8118) (8156 7972) (7320) (7582) (7804) (8164 8120) (8022) (7556) (8146) (7658) (8394) (7908) (7316) (7554) (8394 8164 8100) (7404) (7556) (7318) (7962) (8018) (7974) (7562) (8374) (8222) (8166) (8056) (7672) (8174) (7556) (8038) (8376) (7794 7548) (8024) (7960) (7314) (7552) (8198 8054) (7672) (8174) (7670) (7992) (7834) (8400) (8384) (7666 7376) (7866) (7972) (7728) (7668) (7970) (7760) (8190) (8062 7758) (7862) (7380) (7758) (8056) (8000) (8182) (7994) (8210 8050) (8232) (7682) (7852) (8170) (8056) (8006 7382) (8396) (7732) (8240) (7378) (8180) (7856) (7546) (8246) (7768) (7862 7766))) :lonset (quote (0 10 30 40 50 60 100 120 150 200 220 240 250 260 290 350 360 380 390 410 450 460 500 510 520 560 570 620 640 650 700 710 790 800 850 860 890 910 940 950 970 1010 1020 1040 1050 1060 1120 1140 1190 1210 1230 1250 1270 1290 1310 1340 1350 1360 1380 1460 1480 1500 1510 1590 1600 1640 1690 1700 1740 1760 1790 1830 1860 1880 1940 1980 1990 2000 2010 2090 2110 2150 2220 2240 2290 2300 2380 2390 2410 2440 2460 2470 2490 2530 2550 2580 2600 2610 2650 2700 2780 2790 2800 2810 2850 2880 2950 2960 2970 3050 3100 3110 3140 3200 3250 3280 3290 3300 3310 3330 3390 3420 3450 3470 3550 3560 3580 3650 3660 3710 3720 3760 3780 3790 3800 3900 3950 4040 4060 4100 4140 4200 4270 4300 4350 4360 4390 4420 4440 4450 4460 4490 4510 4620 4640 4650 4720 4740 4770 4790 4800 4810 4940 4960 4970 4990 5010 5020 5090 5100 5120 5140 5190 5210 5260 5300 5320 5390 5400 5410 5440 5450 5520 5610 5640 5670 5690 5710 5770 5800 5810 5820 5880 5920 5950 5960 6040 6060 6150 6210 6220 6260 6270 6290 6320 6380 6390 6400 6440 6450 6460 6470 6610 6620 6650 6670 6700 6750 6770 6790 6800 6810 6880 6910 6920 6960 7000 7010 7040 7050 7100 7140 7150 7210 7220 7240 7270 7310 7340 7350 7440 7520 7540 7610 7720 7800 7820 7840 7850 7960 7970 7990 8000 8020 8040 8100 8110 8140 8160 8200 8210 8220 8290 8300 8310 8350 8380 8390 8450 8460 8470 8490 8510 8560 8570 8600 8640 8650 8660 8710 8720 8750 8760 8770 8810 8840 8900 8950 8990 9060 9090 9140 9160 9200 9220 9270 9300 9320 9400 9410 9450 9470 9500 9540 9590 9610 9620 9650 9690 9700 9710 9740 9790 9800 9810 9840 9860 9880 9890 9940 9950 9960 10020 10040 10090 10100 10110 10180 10190 10250 10300 10310 10360 10380 10430 10460 10470 10570 10590 10620 10640 10650 10660 10760 10770 10790 10800 10880 10910 10950 11010 11060 11070 11090 11110 11120 11160 11210 11220 11300 11320 11360 11490 11570 11590 11600 11610 11620 11700 11750 11800 11810 11840 11910 11930 11940 12000 12010 12020 12120 12140 12180 12310 12350 12380 12410 12430 12440 12470 12510 12550 12570 12620 12640 12650 12660 12680 12700 12710 12720 12740 12760 12770 12800 12840 12850 12880 12930 12940 12980 13000 13090 13110 13120 13250 13300 13310 13350 13390 13400 13410 13470 13500 13540 13600 13640 13650 13690 13760 13790 13910 13990 14000 14010 14020 14100 14140 14180 14200 14310 14320 14350 14410 14470 14490 14520 14590 14650 14690 14740 14760 14790 14810 14880 14900 14910 15000 15050 15210 15340 15360 15380 15440 15510 15520 15540 15560 15690 15700 15710 15740 15810 15850 15860 15890 15900 15910 16000 16010 16120 16160 16190 16340 16390 16540 16980)) :ldur (quote ((2450 710 4170 450 90 1260 840 11250 16980) (50) (50) (50 70) (310) (80) (160) (130 40) (110) (200) (70) (50) (40) (100) (130) (90) (60) (170 30) (200) (2340) (40) (60 80) (140) (130) (70 100) (60) (520) (60) (160 160 50) (90) (50 2350) (80) (110) (160) (140) (50 70 10210) (150) (50 470) (50) (40) (80) (80) (120 60) (190) (70) (50) (80) (160 70) (160) (930 50) (30 30) (40) (60) (50) (90) (260) (90) (230) (70) (130) (100 80 30) (290) (70) (50) (60 320) (250) (60 50 60) (130) (70 60) (150) (70) (70) (330) (130) (40) (440 240) (60 100) (50) (2700 40) (310) (280 90 50) (90 60) (40) (60) (600 220) (140) (60 60) (80) (290) (50) (290) (110 150 110) (70) (30 70) (100) (70) (100) (140) (150) (1620) (60 440) (170) (80) (90) (140 90) (3960) (610 140) (460) (120 110) (60) (120) (90) (100) (130) (80) (50) (110) (110) (110 980) (70) (60) (110 320) (150) (170) (70) (60 60 5030) (30) (100) (60) (50) (70 180) (70) (1110) (60) (260 40) (150) (50) (710) (40 40) (60) (50 30) (240) (70) (100 90) (110) (60 50) (50) (70) (310) (100 60 150) (60) (120) (110) (70) (320 80 30) (150) (780 70) (180) (50) (30) (310) (1290 850) (960 60) (60 80) (120) (80) (40) (80) (100) (200 70) (80) (130 130) (70) (40 400) (60) (50 90) (80) (50) (160) (90) (210) (250 40) (90) (310) (200) (70) (50 50) (50) (470 80) (80) (80 50) (1270) (180 710 530 60) (70) (70) (40) (110 1680 4920) (50) (140) (60) (50) (90) (450 50) (30) (40) (30) (120) (320) (110) (40) (330) (70 100) (40) (50) (1950) (40) (40) (110) (40) (220) (110) (610) (30) (40) (200) (50) (50) (50) (450) (870) (190) (50) (60) (400) (70) (30) (50) (70 40) (130) (1450 350) (60) (70) (360) (50) (130 380) (80) (70) (100) (60) (330) (40) (250) (50) (50) (30) (50) (1740) (100) (80) (50) (150) (40) (30 50 320) (50) (160) (40) (50) (40) (90) (830 40) (2290) (170) (100) (40) (70 70) (5160) (70 60) (120) (130) (130) (50) (100) (800) (140) (70) (60) (40) (100 50) (70) (80) (30 30) (80 50) (310) (110 40 50) (140) (440) (50) (130) (70) (310) (70 40) (170) (140) (80) (170) (40) (310) (190 190) (50) (50 40) (250) (80) (360) (40) (1260) (270) (40) (60) (110) (100) (50 490) (50) (170) (100) (100) (400) (70) (170) (150) (50) (90) (80) (130) (500 80) (170) (60) (70 640 170) (130) (60) (60) (320) (70) (360) (90) (70) (50) (50) (30 2410) (3860) (800) (300) (80) (280 3830) (120) (4550) (140 80) (90) (280) (120 1520) (60 210) (80 70) (40) (120) (90) (570 60) (50) (240) (130) (110) (50) (600) (190) (110) (60) (90 80) (60) (60) (800) (80 70) (40) (80 70) (130) (350) (80) (60) (140) (80) (100) (100) (40) (60) (170) (330) (70) (170) (80) (30) (100) (2630) (40) (140) (80 50) (880) (130) (50) (60) (80) (30) (50) (380 70) (60) (90) (90) (60 120) (40) (50) (200) (970) (290) (60) (80) (70) (100 470 60) (50) (60) (60) (40) (620) (240) (30) (50) (70) (40) (130) (70) (340) (50) (380) (50) (40 70) (130) (50) (80) (80) (120 630) (90) (360) (120) (320) (30) (1100) (60) (140 550) (30) (60) (400) (110) (110) (40) (60) (80 110) (220) (280) (130) (120) (60) (40) (30) (380 120) (60) (30) (310) (100) (110) (260 70) (510) (40) (290) (50) (90) (110) (40) (70) (50) (50 70))) :lvel (quote ((86 79 67 51 49 48 48 47 47) (46) (47) (54 52) (45) (56) (51) (51 42) (45) (45) (47) (55) (65) (48) (66) (55) (63) (45 42) (47) (46) (43) (58 46) (98) (50) (57 51) (77) (45) (42) (48 47 47) (43) (77 64) (51) (42) (49) (45) (53 43 42) (50) (48 42) (48) (44) (42) (45) (48 47) (44) (43) (45) (45) (44 43) (51) (50 42) (53 43) (62) (44) (42) (42) (42) (44) (46) (46) (46) (44 44 43) (49) (47) (48) (46 44) (46) (45 43 42) (42) (51 47) (47) (44) (47) (49) (44) (45) (46 42) (45 42) (43) (52 41) (47) (43 42 42) (44 44) (51) (47) (48 43) (42) (46 45) (48) (42) (48) (46) (48 46 42) (44) (42 42) (46) (47) (43) (44) (42) (42) (47 43) (43) (41) (42) (44 44) (48) (54 47) (42) (43 42) (47) (45) (42) (42) (49) (45) (43) (43) (42) (44 42) (43) (42) (43 42) (42) (45) (42) (48 47 42) (46) (43) (40) (42) (42 41) (44) (43) (41) (43 40) (42) (42) (41) (43 42) (41) (42 40) (42) (41) (42 40) (41) (42 40) (41) (40) (41) (44 41 40) (41) (44) (41) (42) (42 41 40) (41) (42 41) (44) (43) (41) (41) (42 41) (43 42) (41 40) (40) (42) (40) (41) (41) (41 40) (41) (41 41) (40) (42 40) (41) (41 40) (40) (43) (41) (40) (41) (41 40) (41) (40) (41) (43) (42 40) (41) (43 41) (41) (40 40) (40) (41 40 40 40) (40) (42) (41) (41 41 41) (40) (43) (41) (40) (41) (43 40) (41) (40) (42) (40) (41) (40) (41) (40) (41 40) (40) (40) (43) (41) (41) (41) (40) (40) (40) (42) (41) (42) (41) (40) (42) (40) (40) (40) (40) (40) (41) (41) (41) (40) (40) (41 40) (40) (42 40) (40) (40) (40) (41) (40 40) (40) (41) (40) (40) (40) (40) (40) (40) (41) (40) (40) (41) (40) (40) (40) (40) (41) (40 40 40) (40) (40) (40) (41) (40) (41) (40 40) (40) (40) (40) (40) (41 40) (41) (41 40) (40) (40) (41) (40) (40) (41) (41) (40) (40) (40) (41 40) (40) (40) (40 40) (40 40) (40) (40 40 40) (40) (40) (40) (41) (40) (40) (40 40) (40) (42) (40) (40) (40) (40) (41 40) (41) (42 41) (40) (40) (40) (40) (41) (40) (41) (40) (40) (40) (41 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (41) (40) (40 40) (40) (40) (40 40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40 40) (40 40) (40 40) (40) (40) (40) (40 40) (40) (40) (41) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 171 50) (om-make-point 500 400) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 378 199) (om-make-point 66 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6726 6508 6156 6852 7132) (6322 7186) (7140) (6612) (6600) (6942) (7164) (7024) (6288) (6628) (6724) (6840) (6326) (6614) (6994) (6922) (6004) (6058) (6872) (6666) (6322) (6674) (6664) (6926) (6318) (6694) (6876) (6800) (7028) (6696) (7142) (6718) (6786) (6706) (6478 6962) (7056 6998) (6412) (6316) (6644) (6980) (6714) (6842) (6694) (6342) (6604) (6960) (7018) (6336) (6596) (6924) (6588) (6358) (6806) (6946) (7044) (7002) (6724) (6708) (6976) (6500) (6708 6004) (6552) (6786) (6332) (6916) (6366) (6710) (6948) (6904) (6444) (6852) (7028) (6328) (6828) (6912) (6810) (7048 6574) (6198) (6662 6528) (6800) (6698) (7048) (6574) (6328) (6736) (7008) (6554) (7064) (6780) (6992) (6578) (6300) (6118) (6682) (6468) (6786) (6536) (7190) (6564) (6394) (7042) (6562) (7140) (7102) (7062) (7150 6616) (6314) (6584) (7110) (6338) (7114) (7190) (6662) (6102) (7046) (6552) (6482) (7134) (6568) (7038) (6680) (6476) (6312) (7136) (7052) (6036) (7148) (6636) (6558) (6454) (6150) (7042) (7096) (7038) (6466) (7056) (7040 6574) (6790) (6556) (6550 6154) (7034) (7156) (6456) (7052 6684) (6160) (7034) (6456) (7168) (6160) (7174) (7166) (6152) (6986) (7180) (7164) (6302) (7028) (6748) (6314) (6454) (7128 6144) (6512) (6560) (7194 7128 6152) (6554) (6058) (6154) (7044 6550) (6150) (6564) (6228) (7052) (6356) (6456) (6282) (7154) (6452) (6776) (6142) (7092 6694) (6010) (6328) (6138) (7166) (6182) (6444) (7042) (6212) (7008) (6302) (6044) (7184) (6284) (7054) (6322) (6146) (6452) (6150) (7136) (6522) (7156 6130) (6456) (7156) (6326) (6574) (7052) (6222) (6458) (7136) (6268) (7144) (6570 6304) (6146) (6458) (7134) (6338) (7140 6134) (6906) (6542) (7032) (7148 6832) (6282) (7100) (6560) (7040) (6572) (6242) (7150) (6288) (6452 6312) (7148) (6248) (7156) (7058) (6502) (6320) (7060) (6222) (7106) (6954) (6248) (6742) (6914) (6266) (6772) (7064) (6904) (6894) (6910) (6910) (6906) (6910) (6920))) :lonset (quote (0 40 50 200 360 470 620 660 720 740 750 800 940 1060 1080 1300 1360 1540 1550 1600 1690 1700 1770 1800 1860 1940 1980 2030 2050 2080 2100 2250 2310 2380 2410 2500 2530 2560 2660 2670 2700 2790 2850 2900 2910 2920 3010 3090 3110 3170 3210 3220 3260 3280 3380 3530 3590 3640 3710 3720 3850 3960 4090 4100 4290 4340 4400 4490 4550 4610 4660 4750 4790 4820 4840 4910 4940 5010 5040 5110 5190 5220 5300 5320 5380 5410 5450 5510 5540 5560 5600 5640 5660 5670 5710 5720 5770 5860 5880 5960 6010 6070 6090 6240 6350 6400 6450 6510 6520 6590 6660 6670 6690 6700 6810 6820 6890 7070 7100 7160 7200 7250 7260 7290 7400 7410 7590 7740 7920 7970 8060 8110 8250 8290 8390 8660 8790 8850 8860 8910 8950 9050 9110 9200 9400 9430 9450 9550 9560 9700 9860 9910 9930 9990 10060 10120 10150 10240 10260 10290 10400 10410 10470 10560 10600 10710 10720 10810 10900 10940 10990 11000 11070 11110 11240 11430 11460 11520 11570 11590 11620 11740 11750 11820 11850 11940 12020 12050 12090 12150 12200 12240 12250 12310 12340 12410 12470 12570 12590 12620 12770 12800 12850 12950 12960 13000 13060 13090 13120 13250 13300 13310 13400 13450 13470 13570 13600 13620 13660 13690 13740 13790 13940 14040 14120 14140 14240 14320 14360 14510 14660 14820 14840 14850 14890 15000 15010 15110 15180 15190 15200 15260 15320 15360 15430 15570 15650 15840 16000 16160 16350 16520 16700 16740)) :ldur (quote ((2080 4140 5740 740 6340) (650 60) (560) (70) (100) (50) (40) (1420) (160) (80) (40) (780) (620) (50) (60) (60) (50) (50) (150) (50) (150) (40) (90) (90) (630) (60) (70) (360) (410) (260) (40) (50) (930) (260) (40 50) (60 450) (350) (100) (50) (70) (60) (70) (270) (150) (40) (660) (80) (100) (3200) (70) (100) (700) (200) (30) (80) (760) (30) (190) (190) (40) (220 70) (430) (1410) (210) (9660) (540) (250) (50) (250) (60) (50) (50) (500) (70) (80) (60) (180 70) (40) (70 60) (80) (160) (240) (50) (190) (5080) (60) (160) (390) (60) (50) (50) (50) (1630) (120) (60) (40) (180) (110) (180) (1900) (190) (500) (30) (410) (60) (120 60) (60) (260) (1750) (80) (130) (80) (80) (40) (240) (650) (30) (80) (70) (200) (60) (70) (3090) (60) (210) (2230) (470) (120) (1020) (220) (500) (110) (2250) (320) (130) (60) (100 50) (40) (1360) (150 440) (90) (140) (110) (40 60) (120) (80) (260) (40) (250) (120) (70) (280) (110) (190) (60) (70) (90) (5100) (750) (60) (410 120) (2590) (50) (40 1290 90) (50) (1430) (80) (150 80) (60) (100) (220) (400) (290) (100) (530) (160) (150) (50) (80) (1470 30) (720) (50) (100) (180) (90) (60) (230) (200) (100) (40) (2260) (50) (50) (250) (370) (90) (80) (110) (110) (1040) (40 70) (140) (100) (210) (150) (650) (230) (30) (140) (270) (100) (160 50) (100) (60) (90) (340) (90 60) (1620) (330) (70) (50 80) (350) (270) (60) (630) (120) (80) (40) (70) (330 180) (110) (70) (100) (80) (50) (50) (90) (50) (110) (30) (40) (130) (200) (100) (280) (70) (60) (100) (100) (90) (60) (40) (40))) :lvel (quote ((83 79 69 62 56) (60 46) (58) (66) (60) (44) (48) (49) (62) (59) (65) (76) (52) (52) (44) (45) (42) (46) (50) (56) (47) (50) (53) (45) (46) (58) (51) (74) (50) (58) (51) (56) (65) (59) (57 45) (46 46) (48) (44) (51) (42) (47) (51) (53) (48) (53) (45) (44) (42) (48) (42) (45) (44) (63) (41) (42) (42) (56) (52) (43) (50) (49 42) (47) (44) (42) (41) (42) (47) (41) (43) (41) (41) (41) (41) (41) (42) (41) (41 41) (41) (41 40) (41) (41) (41) (41) (41) (41) (40) (41) (41) (41) (40) (40) (40) (40) (40) (41) (41) (41) (41) (40) (41) (41) (41) (40) (41) (40) (41 41) (40) (40) (41) (41) (41) (40) (40) (40) (41) (40) (40) (41) (40) (40) (40) (40) (40) (40) (41) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40 40 40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40))) :loffset (quote ((0 0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1 1 1 1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 171 50) (om-make-point 500 400) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 305 199) (om-make-point 66 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5066 5768 5628) (5978) (5434) (5824) (5456) (5836) (5880) (5472) (5924) (5494) (5452) (5484) (5470) (5946) (5498) (5072) (5468) (5930) (5452) (5468) (5980) (5398) (5970) (5462) (5898) (5982) (5438) (5964) (5454) (5984) (5474) (5446) (5948) (5962) (5452) (5468) (5920) (5928) (5952) (5920 5324) (5956) (5866) (5832) (5872) (5952) (5986) (5960) (5964) (5846) (5986) (5924) (5966) (5980) (5818) (5834) (5952) (5984) (5998 5818) (5822) (5826) (5898) (5858) (5830) (5828) (5816) (5976) (5826) (5830) (5820) (5346) (5822) (5968) (5352) (5824) (5358) (5824) (5828) (5822) (5828) (5828) (5950) (5962) (5822) (5830) (5918) (5842) (5978) (5078) (5366) (5966) (5966) (5396) (5066) (5104) (5640))) :lonset (quote (0 140 290 420 440 540 860 940 1060 1120 1260 1360 1560 1620 1760 1840 2010 2140 2250 2400 2410 2650 2710 2800 2900 3120 3250 3350 3450 3530 3840 3990 4060 4240 4290 4470 4540 4840 5010 5260 5840 6010 6250 6400 6940 7300 7460 7590 8020 8410 8540 8750 8930 9060 9190 9390 9610 9820 10430 10550 10880 11020 11200 11510 11660 11910 11940 12040 12300 12430 12510 12770 12810 12890 13020 13040 13240 13360 13510 13710 14060 14100 14230 14390 14700 14860 14970 14990 15010 15150 15320 15350 15410 15560 16500 16550)) :ldur (quote ((1860 310 16450) (60) (50) (70) (160) (270) (90) (80) (250) (110) (70) (80) (100) (130) (120) (13100) (100) (190) (60) (110) (180) (150) (50) (60) (70) (140) (90) (150) (90) (220) (50) (80) (130) (260) (100) (100) (220) (130) (200) (430 90) (130) (180) (90) (540) (300) (90) (90) (450) (90) (130) (310) (60) (80) (90) (120) (470) (70) (1030 140) (40) (130) (120) (70) (270) (80) (180) (110) (60) (70) (60) (320) (180) (70) (130) (110) (50) (120) (80) (110) (170) (290) (700) (60) (90) (80) (260) (240) (120) (280) (110) (120) (130) (60) (60) (80) (50))) :lvel (quote ((100 62 57) (43) (51) (48) (58) (49) (43) (58) (44) (66) (50) (60) (54) (45) (57) (48) (56) (42) (48) (48) (43) (48) (42) (47) (42) (44) (42) (43) (43) (43) (43) (42) (41) (41) (41) (41) (41) (41) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40))) :loffset (quote ((0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 232 198) (om-make-point 66 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4416 3804) (3790) (4204) (3936) (4108) (4074) (3934) (3900) (3924) (3772))) :lonset (quote (0 1750 1900 2110 2500 2650 3280 3650 3810 12680 17000)) :ldur (quote ((17000 500) (40) (40) (100) (80) (50) (50) (90) (90) (60))) :lvel (quote ((56 49) (41) (70) (42) (49) (44) (43) (41) (41) (40))) :loffset (quote ((0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 171 50) (om-make-point 500 400) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 159 197) (om-make-point 66 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2854) (3132) (3072) (3474) (3242) (3124))) :lonset (quote (30 10240 11120 14510 14790 15190 15250)) :ldur (quote ((5610) (700) (180) (280) (280) (60))) :lvel (quote ((45) (40) (40) (40) (40) (40))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 171 50) (om-make-point 500 400) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 86 197) (om-make-point 66 114) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote nil) :lonset (quote (0)) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil) :legato 0)))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 171 50) (om-make-point 500 400) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM 6" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 7200) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8400) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 420 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM 5" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 6000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 7200) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 347 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM 4" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4800) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 274 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM 3" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 3600) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 4800) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 201 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM 2" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 2400) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 3600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 128 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 1200) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 2400) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 55 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (8 0 2 0 nil 0) (7 0 2 1 nil 0) (6 0 2 2 nil 0) (5 0 2 3 nil 0) (4 0 2 4 nil 0) (3 0 2 5 nil 0) (9 1 3 0 nil 0) (10 1 4 0 nil 0) (11 1 5 0 nil 0) (12 1 6 0 nil 0) (13 1 7 0 nil 0) (14 1 8 0 nil 0) (15 0 9 0 nil 0) (16 0 10 0 nil 0) (17 0 11 0 nil 0) (18 0 12 0 nil 0) (19 0 13 0 nil 0) (20 0 14 0 nil 0) (0 0 15 0 nil 0) (0 0 16 0 nil 0) (0 0 17 0 nil 0) (0 0 18 0 nil 0) (0 0 19 0 nil 0) (0 0 20 0 nil 0))) nil 7.02))
