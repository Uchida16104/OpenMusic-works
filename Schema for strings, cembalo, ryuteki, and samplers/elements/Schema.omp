; OM File Header - Saved 2020/11/04 17:42:16
; (6.17 :patc (om-make-point 5 9) (om-make-point -6 7) (om-make-point 1366 585) "" 183 0 "2020/10/14 18:38:27" "2020/11/04 17:42:07")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../in-files/reverse bell mix.sdif\"" "#P\"../in-files/electronic doppler mix.sdif\"") (list (quote :sound) "#P\"../in-files/reverse bell mix.wav\"" "#P\"../in-files/electronic doppler mix.wav\""))
(in-package :om)(load-lib-for (quote ("Repmus" "OM-pm2" "Chaos")))(setf *om-current-persistent* (om-load-patch1 "Schema" (quote ((let ((box (om-load-boxcall (quote genfun) "OM* 72" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 615 1047) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 10" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 725 990) nil (list 8) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 11" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 542 990) nil (list 1) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 10" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 664 990) nil (list 3) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 8" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" 2))) (om-make-point 603 990) nil (list 2) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEOMETRIC-SER" (quote geometric-ser) (quote ((om-load-inputfun (quote input-funbox) "seed" "SEED" 1) (om-load-inputfun (quote input-funbox) "factor" "FACTOR" 2) (om-load-inputfun (quote input-funbox) "limit" "LIMIT" 10))) (om-make-point 628 927) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 11" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 658 2208) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 598 2266) (om-make-point 131 112) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (117/2 (((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1)) ((6 8) (1 2 1 (1 (1 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (2 1 (1 (1 1)) 1 1)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1 1)) ((6 8) (1.0 1 (1 (1 1)) 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 1 2)) ((6 8) (1 (1 (1 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 2 (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1 1 2 1)) ((6 8) ((1 (1 1)) 1 1 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 1 2 1 (1 (1 1)))) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1)) ((6 8) (1 2 1 (1 (1 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (2 1 (1 (1 1)) 1 1)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1 1)) ((6 8) (1.0 1 (1 (1 1)) 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 1 2)) ((6 8) (1 (1 (1 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 2 (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1 1 2 1)) ((6 8) ((1 (1 1)) 1 1 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 1 2 1 (1 (1 1)))) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1)) ((6 8) (1 2 1 (1 (1 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (2 1 (1 (1 1)) 1 1)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1 1)) ((6 8) (1.0 1 (1 (1 1)) 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 1 2)) ((6 8) (1 (1 (1 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1 -4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (117/2 (((6 8) (-4 1 (1 (1 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 1 (1 (1 1)) 1)) ((6 8) (2 1 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 1 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 1 (1 (1 1)) 1 1)) ((6 8) (1.0 1 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1 1)) 1 2)) ((6 8) (1 1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) 1 2 1)) ((6 8) (1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 (1 (1 1)) 1.0 (1 (1.0 1)) 1.0 1)) ((6 8) ((1 (1 1)) 1 2 1 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 1 (1 (1 1)))) ((6 8) (1 2 1 1 (1 (1 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 2 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 1 (1 (1 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 1 (1 (1 1)) 1)) ((6 8) (2 1 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 1 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 1 (1 (1 1)) 1 1)) ((6 8) (1.0 1 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1 1)) 1 2)) ((6 8) (1 1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) 1 2 1)) ((6 8) (1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 (1 (1 1)) 1.0 (1 (1.0 1)) 1.0 1)) ((6 8) ((1 (1 1)) 1 2 1 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 1 (1 (1 1)))) ((6 8) (1 2 1 1 (1 (1 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 2 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 1 (1 (1 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 1 (1 (1 1)) 1)) ((6 8) (2 1 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 1 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 1 (1 (1 1)) 1 1)) ((6 8) (1.0 1 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1 1)) 1 2)) ((6 8) (1 1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) 1 2 1)) ((6 8) (1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (60 (((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (60 (((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (99/2 (((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0)) ((6 8) (2 2 1 1)) ((6 8) (2 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) 1.0 2 1)) ((6 8) (1.0 1 1 2 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0)) ((6 8) (2 2 1 1)) ((6 8) (2 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) 1.0 2 1)) ((6 8) (1.0 1 1 2 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0)) ((6 8) (2 2 1 1)) ((6 8) (2 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) 1.0 2 1)) ((6 8) (1.0 1 1 2 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0)) ((6 8) (2 2 1 1)) ((6 8) (2 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) 1.0 2 1)) ((6 8) (1.0 1 1 2 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0)) ((6 8) (2 2 1 1)) ((6 8) (2 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) 1.0 2 1)) ((6 8) (1.0 1 1 2 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (1360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4515)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7867)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (522)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5903)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5602)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6716)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7951)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (193)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (753)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7192)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2907)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7403)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2211)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7373)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2311)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6573)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4690)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (923)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3265)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1043)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3629)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7931)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (273)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1054)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3660)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7942)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (230)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (894)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3175)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7660)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1302)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7330)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7365)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4985)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5545)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4530)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5615)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7540)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7610)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6035)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7470)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8380)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7435)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4515)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7867)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (522)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5903)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5602)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6716)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7951)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (193)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (753)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7192)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2907)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7403)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2211)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7373)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2311)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6573)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4690)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (923)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3265)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1043)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3629)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7931)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (273)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1054)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3660)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7942)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (230)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (894)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7660)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1302)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7330)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7365)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4985)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5545)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4530)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5615)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7540)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7610)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6035)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7470)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8380)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7435)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4515)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7867)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (522)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5903)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5602)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6716)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7951)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (193)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (753)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7192)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2907)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7403)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2211)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7373)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2311)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6573)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4690)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (923)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3265)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1043)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3629)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7931)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (273)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1054)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3660)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7942)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (230)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (894)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7660)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1302)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7330)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7365)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (99/2 (((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1)) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 2 1 1 1)) ((6 8) (1.0 2 1 (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) 1.0 1 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 2)) ((6 8) (1 1 2 2)) ((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1)) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 2 1 1 1)) ((6 8) (1.0 2 1 (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) 1.0 1 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 2)) ((6 8) (1 1 2 2)) ((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1)) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 2 1 1 1)) ((6 8) (1.0 2 1 (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) 1.0 1 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 2)) ((6 8) (1 1 2 2)) ((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1)) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 2 1 1 1)) ((6 8) (1.0 2 1 (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) 1.0 1 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 2)) ((6 8) (1 1 2 2)) ((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1)) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 2 1 1 1)) ((6 8) (1.0 2 1 (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) 1.0 1 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 2)) ((6 8) (1 1 2 2)) ((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7435)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8380)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7470)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6035)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7610)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7540)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5615)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4530)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5545)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4985)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7365)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7330)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1302)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7660)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (894)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (230)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7942)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3660)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1054)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (273)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7931)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3629)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1043)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3265)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (923)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4690)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6573)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2311)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7373)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2211)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7403)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2907)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7192)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (753)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (193)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7951)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6716)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5602)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5903)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (522)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7867)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4515)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7435)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8380)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7470)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6035)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7610)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7540)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5615)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4530)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5545)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4985)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7365)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7330)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1302)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7660)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (894)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (230)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7942)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3660)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1054)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (273)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7931)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3629)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1043)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3265)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (923)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4690)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6573)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2311)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7373)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2211)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7403)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2907)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7192)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (753)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (193)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7951)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6716)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5602)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5903)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (522)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7867)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4515)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7435)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8380)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7470)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6035)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7610)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7540)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5615)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4530)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5545)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4985)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((3) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote gf) (quote gf) (quote gf) (quote gf) (quote gf) (quote gf)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1059 2095) (om-make-point 146 109) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (99/2 (((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1)) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 2 1 1 1)) ((6 8) (1.0 2 1 (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) 1.0 1 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 2)) ((6 8) (1 1 2 2)) ((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1)) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 2 1 1 1)) ((6 8) (1.0 2 1 (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) 1.0 1 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 2)) ((6 8) (1 1 2 2)) ((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1)) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 2 1 1 1)) ((6 8) (1.0 2 1 (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) 1.0 1 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 2)) ((6 8) (1 1 2 2)) ((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1)) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 2 1 1 1)) ((6 8) (1.0 2 1 (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) 1.0 1 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 2)) ((6 8) (1 1 2 2)) ((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1)) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 2 1 1 1)) ((6 8) (1.0 2 1 (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) 1.0 1 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 2)) ((6 8) (1 1 2 2)) ((6 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7435)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8380)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7470)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6035)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7610)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7540)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5615)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4530)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5545)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4985)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7365)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7330)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1302)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7660)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (894)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (230)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7942)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3660)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1054)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (273)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7931)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3629)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1043)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3265)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (923)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4690)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6573)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2311)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7373)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2211)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7403)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2907)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7192)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (753)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (193)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7951)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6716)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5602)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5903)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (522)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7867)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4515)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7435)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8380)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7470)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6035)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7610)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7540)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5615)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4530)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5545)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4985)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7365)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7330)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1302)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7660)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (894)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (230)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7942)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3660)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1054)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (273)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7931)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3629)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1043)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3265)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (923)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4690)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6573)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2311)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7373)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2211)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7403)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2907)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7192)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (753)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (193)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7951)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6716)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5602)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5903)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (522)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7867)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4515)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7435)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8380)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7470)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6035)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7610)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7540)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5615)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4530)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5545)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4985)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -117 231) (om-make-point 1366 545) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 764 2096) (om-make-point 146 109) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (60 (((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1 1)) 1.0 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1 1 (1 (1.0 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -3 455) (om-make-point 1366 685) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 296 2096) (om-make-point 146 109) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (117/2 (((6 8) (-4 1 (1 (1 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 1 (1 (1 1)) 1)) ((6 8) (2 1 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 1 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 1 (1 (1 1)) 1 1)) ((6 8) (1.0 1 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1 1)) 1 2)) ((6 8) (1 1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) 1 2 1)) ((6 8) (1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 (1 (1 1)) 1.0 (1 (1.0 1)) 1.0 1)) ((6 8) ((1 (1 1)) 1 2 1 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 1 (1 (1 1)))) ((6 8) (1 2 1 1 (1 (1 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 2 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 1 (1 (1 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 1 (1 (1 1)) 1)) ((6 8) (2 1 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 1 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 1 (1 (1 1)) 1 1)) ((6 8) (1.0 1 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1 1)) 1 2)) ((6 8) (1 1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) 1 2 1)) ((6 8) (1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 (1 (1 1)) 1.0 (1 (1.0 1)) 1.0 1)) ((6 8) ((1 (1 1)) 1 2 1 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 2 1)) ((6 8) ((1 (1 1)) 1.0 (1 (1.0 1)) 1.0 1 (1 (1 1)))) ((6 8) (1 2 1 1 (1 (1 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 2 1)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 1 (1 (1 1)))) ((6 8) (1.0 (1 (1.0 1)) 1.0 1 (1 (1 1)) 1)) ((6 8) (2 1 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 2 1 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 1 (1 (1 1)) 1 1)) ((6 8) (1.0 1 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1 1)) 1.0 (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1 1)) 1 2)) ((6 8) (1 1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (2 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1 1)) 1.0 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) 1 2 1)) ((6 8) (1 (1 (1 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) 1)) ((6 8) (1.0 1 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -17 126) (om-make-point 1366 605) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE 3" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 807 1945) nil (list (list 1872 2160 2556 3132 4032 5688 9720 2072 2360 2756 3332 4232 5888 9920 1872 2160 2556 3132 4032 5688 9720 2072 2360 2756 3332 4232 5888 9920 1872 2160 2556 3132 4032 5688 9720 2072 2360 2756 3332 4232 5888 9920 1872 2160 2556 3132 4032 5688 9720 2072 2360 2756 3332 4232 5888 9920 1872 2160 2556 3132 4032 5688 9720 2072 2360 2756 3332 4232 5888 9920 1872 2160 2556 3132 4032 5688 9720 2072 2360 2756 3332 4232 5888 9920 1872 2160 2556 3132 4032 5688 9720 2072 2360 2756 3332 4232 5888 9920 1872 2160 2556 3132 4032 5688 9720 2072 2360 2756 3332 4232 5888 9920 7904 7696 7456 7172 6824 6376 5744 4664 2072 2360 2756 3332 4232 5888 9920 7904 7696 7456 7172 6824 6376 5744 4664 2072 2360 2756 3332 4232 5888 9920 7904 7696 7456 7172 6824 6376 5744 4664 2072 2360 2756 3332 4232 5888 9920 7904 7696 7456 7172 6824 6376 5744 4664 2072 2360 2756 3332 4232 5888 9920 7904 7696 7456 7172 6824 6376 5744 4664 2072 2360 2756 3332 4232 5888 9920 7904 7696 7456 7172 6824 6376 5744 4664 2072 2360 2756 3332 4232 5888 9920 7904 7696 7456 7172 6824 6376 5744 4664 2072 2360 2756 3332 4232 5888 9920 7904 7696 7456 7172 6824 6376 5744 4664 2072 2360 2756 3332 4232 5888 9920 2272 2560 2956 3532 4432 6088 10120 2072 2360 2756 3332 4232 5888 9920 2272 2560 2956 3532 4432 6088 10120 2072 2360 2756 3332 4232 5888 9920 2272 2560 2956 3532 4432 6088 10120 2072 2360 2756 3332 4232 5888 9920 2272 2560 2956 3532 4432 6088 10120 2072 2360 2756 3332 4232 5888 9920 2272 2560 2956 3532 4432 6088 10120 2072 2360 2756 3332 4232 5888 9920 2272 2560 2956 3532 4432 6088 10120 2072 2360 2756 3332 4232 5888 9920 2272 2560 2956 3532 4432 6088 10120 2072 2360 2756 3332 4232 5888 9920 2272 2560 2956 3532 4432 6088 10120 2072 2360 2756 3332 4232 5888 9920 7804 7596 7356 7072 6724 6276 5644 4564 2072 2360 2756 3332 4232 5888 9920 7804 7596 7356 7072 6724 6276 5644 4564 2072 2360 2756 3332 4232 5888 9920 7804 7596 7356 7072 6724 6276 5644 4564 2072 2360 2756 3332 4232 5888 9920 7804 7596 7356 7072 6724 6276 5644 4564 2072 2360 2756 3332 4232 5888 9920 7804 7596 7356 7072 6724 6276 5644 4564 2072 2360 2756 3332 4232 5888 9920 7804 7596 7356 7072 6724 6276 5644 4564 2072 2360 2756 3332 4232 5888 9920 7804 7596 7356 7072 6724 6276 5644 4564 2072 2360 2756 3332 4232 5888 9920 7804 7596 7356 7072 6724 6276 5644 4564 2072 2360 2756 3332 4232 5888 9920)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 339 1945) nil (list (list 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444 7976 7736 7452 7104 6656 6024 4944 8476 8236 7952 7604 7156 6524 5444)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 1229 1527) nil (list (list 6070 6175 6350 6735 7435 8380 7470 4600 5125 6035 6140 6105 6070 6070 6070 6070 6070 6105 6175 6280 6420 6700 7120 7610 7540 6420 5895 5825 5860 5860 5825 5790 5720 5615 5440 5160 4810 4530 4810 5545 5895 5965 6000 6000 5965 5965 5965 5930 5860 5790 5650 5405 4985 4390 4180 5405 6280 6280 6210 6175 6175 6210 6245 6350 6490 6735 7050 7365 7330 6735 6280 6105 6070 1302 7660 3175 894 230 7942 3660 1054 273 7931 3629 1043 7730 3265 923 7762 4690 6573 2311 7373 5120 6400 2211 7403 2907 7192 2728 753 193 7951 4312 6716 5602 6190 5903 1952 522 7867 4515 1360 6070 6175 6350 6735 7435 8380 7470 4600 5125 6035 6140 6105 6070 6070 6070 6070 6070 6105 6175 6280 6420 6700 7120 7610 7540 6420 5895 5825 5860 5860 5825 5790 5720 5615 5440 5160 4810 4530 4810 5545 5895 5965 6000 6000 5965 5965 5965 5930 5860 5790 5650 5405 4985 4390 4180 5405 6280 6280 6210 6175 6175 6210 6245 6350 6490 6735 7050 7365 7330 6735 6280 6105 6070 1302 7660 3175 894 230 7942 3660 1054 273 7931 3629 1043 7730 3265 923 7762 4690 6573 2311 7373 5120 6400 2211 7403 2907 7192 2728 753 193 7951 4312 6716 5602 6190 5903 1952 522 7867 4515 1360 6070 6175 6350 6735 7435 8380 7470 4600 5125 6035 6140 6105 6070 6070 6070 6070 6070 6105 6175 6280 6420 6700 7120 7610 7540 6420 5895 5825 5860 5860 5825 5790 5720 5615 5440 5160 4810 4530 4810 5545 5895 5965 6000 6000 5965 5965 5965 5930 5860 5790 5650 5405 4985 4390 4180 5405 6280 6280 6210 6175 6175 6210 6245 6350 6490 6735 7050 7365 7330 6735 6280 6105 6070 1302 7660 3175 894 230 7942 3660 1054 273 7931 3629 1043 7730 3265 923 7762 4690 6573 2311 7373 5120 6400 2211 7403 2907 7192 2728 753 193 7951 4312 6716 5602 6190 5903 1952 522 7867 4515 1360)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVERSETREE" (quote reversetree) (quote ((om-load-inputfun (quote input-funbox) "a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 985 1543) nil (list (list 99/2 (list (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0 1)) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 2 1 1 1)) (list (list 6 8) (list 1.0 2 1 (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 1 2 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 2)) (list (list 6 8) (list 1 1 2 2)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0 1)) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 2 1 1 1)) (list (list 6 8) (list 1.0 2 1 (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 1 2 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 2)) (list (list 6 8) (list 1 1 2 2)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0 1)) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 2 1 1 1)) (list (list 6 8) (list 1.0 2 1 (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 1 2 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 2)) (list (list 6 8) (list 1 1 2 2)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0 1)) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 2 1 1 1)) (list (list 6 8) (list 1.0 2 1 (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 1 2 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 2)) (list (list 6 8) (list 1 1 2 2)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0 1)) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 2 1 1 1)) (list (list 6 8) (list 1.0 2 1 (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 1 2 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 2)) (list (list 6 8) (list 1 1 2 2)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0 1))))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVERSETREE" (quote reversetree) (quote ((om-load-inputfun (quote input-funbox) "a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 515 1543) nil (list (list 60 (list (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1 1 (list 1 (list 1.0 1)) 1.0))))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVERSETREE" (quote reversetree) (quote ((om-load-inputfun (quote input-funbox) "a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 46 1543) nil (list (list 117/2 (list (list (list 6 8) (list -4 1 (list 1 (list 1 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) 1)) (list (list 6 8) (list 2 1 1 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) 1 1)) (list (list 6 8) (list 1.0 1 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 1 (list 1 (list 1 1)) 1 2)) (list (list 6 8) (list 1 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 2 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1 2 1)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1 2 1 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)))) (list (list 6 8) (list 1 2 1 1 (list 1 (list 1 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 1 (list 1 (list 1 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) 1)) (list (list 6 8) (list 2 1 1 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) 1 1)) (list (list 6 8) (list 1.0 1 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 1 (list 1 (list 1 1)) 1 2)) (list (list 6 8) (list 1 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 2 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1 2 1)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1 2 1 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)))) (list (list 6 8) (list 1 2 1 1 (list 1 (list 1 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 1 (list 1 (list 1 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) 1)) (list (list 6 8) (list 2 1 1 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) 1 1)) (list (list 6 8) (list 1.0 1 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 1 (list 1 (list 1 1)) 1 2)) (list (list 6 8) (list 1 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 2 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1 2 1)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1.0 1 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2))))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1061 1987) (om-make-point 146 109) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (99/2 (((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0)) ((6 8) (2 2 1 1)) ((6 8) (2 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) 1.0 2 1)) ((6 8) (1.0 1 1 2 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0)) ((6 8) (2 2 1 1)) ((6 8) (2 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) 1.0 2 1)) ((6 8) (1.0 1 1 2 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0)) ((6 8) (2 2 1 1)) ((6 8) (2 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) 1.0 2 1)) ((6 8) (1.0 1 1 2 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0)) ((6 8) (2 2 1 1)) ((6 8) (2 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) 1.0 2 1)) ((6 8) (1.0 1 1 2 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0)) ((6 8) (2 2 1 1)) ((6 8) (2 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) 1.0 2 1)) ((6 8) (1.0 1 1 2 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1 1)) 1.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (1360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4515)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7867)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (522)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5903)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5602)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6716)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7951)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (193)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (753)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7192)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2907)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7403)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2211)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7373)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2311)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6573)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4690)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (923)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3265)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1043)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3629)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7931)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (273)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1054)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3660)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7942)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (230)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (894)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3175)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7660)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1302)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7330)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7365)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4985)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5545)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4530)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5615)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7540)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7610)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6035)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7470)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8380)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7435)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4515)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7867)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (522)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5903)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5602)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6716)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7951)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (193)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (753)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7192)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2907)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7403)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2211)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7373)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2311)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6573)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4690)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (923)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3265)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1043)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3629)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7931)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (273)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1054)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3660)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7942)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (230)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (894)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7660)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1302)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7330)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7365)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4985)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5650)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5930)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5965)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5545)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4530)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4810)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5160)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5615)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5790)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5860)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5825)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5895)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7540)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7610)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7120)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6420)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6140)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6035)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5125)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7470)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8380)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7435)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4515)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7867)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (522)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5903)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5602)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6716)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7951)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (193)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (753)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2728)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7192)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2907)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7403)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2211)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7373)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2311)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6573)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4690)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (923)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3265)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7730)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1043)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3629)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7931)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (273)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1054)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3660)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7942)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (230)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (894)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3175)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7660)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1302)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6070)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6105)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7330)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7365)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7050)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6735)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6490)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6350)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6245)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6175)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6210)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6280)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5405)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4180)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 1240 1485) nil (list (list 1360 4515 7867 522 1952 5903 6190 5602 6716 4312 7951 193 753 2728 7192 2907 7403 2211 6400 5120 7373 2311 6573 4690 7762 923 3265 7730 1043 3629 7931 273 1054 3660 7942 230 894 3175 7660 1302 6070 6105 6280 6735 7330 7365 7050 6735 6490 6350 6245 6210 6175 6175 6210 6280 6280 5405 4180 4390 4985 5405 5650 5790 5860 5930 5965 5965 5965 6000 6000 5965 5895 5545 4810 4530 4810 5160 5440 5615 5720 5790 5825 5860 5860 5825 5895 6420 7540 7610 7120 6700 6420 6280 6175 6105 6070 6070 6070 6070 6070 6105 6140 6035 5125 4600 7470 8380 7435 6735 6350 6175 6070 1360 4515 7867 522 1952 5903 6190 5602 6716 4312 7951 193 753 2728 7192 2907 7403 2211 6400 5120 7373 2311 6573 4690 7762 923 3265 7730 1043 3629 7931 273 1054 3660 7942 230 894 3175 7660 1302 6070 6105 6280 6735 7330 7365 7050 6735 6490 6350 6245 6210 6175 6175 6210 6280 6280 5405 4180 4390 4985 5405 5650 5790 5860 5930 5965 5965 5965 6000 6000 5965 5895 5545 4810 4530 4810 5160 5440 5615 5720 5790 5825 5860 5860 5825 5895 6420 7540 7610 7120 6700 6420 6280 6175 6105 6070 6070 6070 6070 6070 6105 6140 6035 5125 4600 7470 8380 7435 6735 6350 6175 6070 1360 4515 7867 522 1952 5903 6190 5602 6716 4312 7951 193 753 2728 7192 2907 7403 2211 6400 5120 7373 2311 6573 4690 7762 923 3265 7730 1043 3629 7931 273 1054 3660 7942 230 894 3175 7660 1302 6070 6105 6280 6735 7330 7365 7050 6735 6490 6350 6245 6210 6175 6175 6210 6280 6280 5405 4180 4390 4985 5405 5650 5790 5860 5930 5965 5965 5965 6000 6000 5965 5895 5545 4810 4530 4810 5160 5440 5615 5720 5790 5825 5860 5860 5825 5895 6420 7540 7610 7120 6700 6420 6280 6175 6105 6070 6070 6070 6070 6070 6105 6140 6035 5125 4600 7470 8380 7435 6735 6350 6175 6070)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 127" (quote list) (quote nil) (om-make-point 1252 1399) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 6" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 1229 1427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 121" (quote list) (quote nil) (om-make-point 1134 1105) (om-make-point 32 28) 66 "66" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 115" (quote list) (quote nil) (om-make-point 1034 1080) (om-make-point 32 28) 14 "14" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 116" (quote list) (quote nil) (om-make-point 1034 1138) (om-make-point 32 28) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 113" (quote list) (quote nil) (om-make-point 951 951) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 114" (quote list) (quote nil) (om-make-point 978 951) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 16" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 948 979) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 939 1098) nil (list (list 1/8 1/16 1/8 1/8 1/4 1/4 1/4 1/4 1/16 1/8 1/4 1/16 1/16 1/4)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 117" (quote list) (quote nil) (om-make-point 995 1035) (om-make-point 32 28) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 939 1156) nil (list (list 1/4 1/8 3/16 1/4 3/16 1/4 3/16 1/8 1/8 3/16 1/8 1/8 1/16 3/16 1/4)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 986 1156) nil (list (list 1/16 1/4 1/16 3/16 3/16 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/16 1/16 1/4)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 986 1098) nil (list (list 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 972 1063) (om-make-point 21 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 5" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 1086 1133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 993 1214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 993 1272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 946 1270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 946 1214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 122" (quote list) (quote nil) (om-make-point 1037 1186) (om-make-point 32 28) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 10" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 1023 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 11" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 983 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 12" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 943 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 8" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 1063 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 124" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 996 1385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 7" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 980 1427) nil (list (list 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4 1/8 3/16 3/16 1/16 3/16 1/4 1/4 1/8 1/8 1/4 1/4 1/16 1/8 1/4)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 997 1485) nil (list (list (quote ?) (list (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list 2 2 1 1)) (list (list 6 8) (list 2 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) 1.0 2 1)) (list (list 6 8) (list 1.0 1 1 2 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list 2 2 1 1)) (list (list 6 8) (list 2 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) 1.0 2 1)) (list (list 6 8) (list 1.0 1 1 2 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list 2 2 1 1)) (list (list 6 8) (list 2 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) 1.0 2 1)) (list (list 6 8) (list 1.0 1 1 2 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list 2 2 1 1)) (list (list 6 8) (list 2 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) 1.0 2 1)) (list (list 6 8) (list 1.0 1 1 2 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0)) (list (list 6 8) (list 2 2 1 1)) (list (list 6 8) (list 2 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) 1.0 2 1)) (list (list 6 8) (list 1.0 1 1 2 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) 1.0))))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 121" (quote list) (quote nil) (om-make-point 664 1105) (om-make-point 32 28) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 121" (quote list) (quote nil) (om-make-point 195 1105) (om-make-point 32 28) 78 "78" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME-SER" (quote prime-ser) (quote ((om-load-inputfun (quote input-funbox) "max prime" "MAX" 100))) (om-make-point 570 927) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 92" (quote list) (quote nil) (om-make-point 682 899) (om-make-point 32 28) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 113" (quote list) (quote nil) (om-make-point 481 951) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 114" (quote list) (quote nil) (om-make-point 508 951) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 16" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 478 979) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 469 1098) nil (list (list 1/16 1/16 1/8 1/8 1/8 3/16 1/8 1/8 3/16 1/16 1/16 1/16 1/8 1/8)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 90" (quote list) (quote nil) (om-make-point 584 899) (om-make-point 32 28) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 2" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 607 1075) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 117" (quote list) (quote nil) (om-make-point 525 1035) (om-make-point 32 28) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 704 1447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 5" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 757 1447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 6" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 810 1447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 7" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 863 1447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 20" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 703 1489) (om-make-point 52 108) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9920) (5888) (4232) (3332) (2756) (2360) (2072) (4664) (5744) (6376) (6824) (7172) (7456) (7696) (7904))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 20" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 756 1489) (om-make-point 52 108) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9920) (5888) (4232) (3332) (2756) (2360) (2072) (4564) (5644) (6276) (6724) (7072) (7356) (7596) (7804))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 20" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 809 1489) (om-make-point 52 108) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9920) (5888) (4232) (3332) (2756) (2360) (2072) (10120) (6088) (4432) (3532) (2956) (2560) (2272))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 20" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 862 1489) (om-make-point 52 108) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9920) (5888) (4232) (3332) (2756) (2360) (2072) (9720) (5688) (4032) (3132) (2556) (2160) (1872))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 469 1156) nil (list (list 1/4 1/16 1/8 1/4 3/16 1/4 3/16 3/16 1/16 1/8 1/16 1/4 1/4 3/16 1/8)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 516 1156) nil (list (list 1/16 3/16 3/16 1/4 1/4 1/16 1/4 1/8 3/16 1/8 3/16 1/16 1/16 3/16 1/8)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 115" (quote list) (quote nil) (om-make-point 564 1080) (om-make-point 32 28) 14 "14" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 116" (quote list) (quote nil) (om-make-point 564 1138) (om-make-point 32 28) 15 "15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 516 1098) nil (list (list 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 502 1063) (om-make-point 21 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 5" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 616 1133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 523 1214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 523 1272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 476 1272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 476 1214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 122" (quote list) (quote nil) (om-make-point 567 1186) (om-make-point 32 28) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 649 1645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 120" (quote list) (quote nil) (om-make-point 672 1617) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 9" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 660 1703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 10" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 553 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 11" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 513 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 12" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 473 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 752 1645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 9" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 763 1703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 120" (quote list) (quote nil) (om-make-point 775 1617) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 855 1645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 9" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 866 1703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 120" (quote list) (quote nil) (om-make-point 878 1617) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 958 1645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 9" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 969 1703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 120" (quote list) (quote nil) (om-make-point 981 1617) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 8" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 593 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 124" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 526 1385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 7" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 510 1427) nil (list (list 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16 3/16 3/16 1/8 1/16 1/8 3/16 1/16 1/8 1/8 1/16 1/4 1/8 3/16 1/16)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 527 1485) nil (list (list (quote ?) (list (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 2)) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 1 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 2 1 1 (list 1 (list 1.0 1))))))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 123" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 808 1745) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 9" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 792 1787) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 10" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 807 1845) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 130" (quote list) (quote nil) (om-make-point 843 1797) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 13" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 818 1903) nil (list (list 9920 5888 4232 3332 2756 2360 2072 4564 5644 6276 6724 7072 7356 7596 7804 9920 5888 4232 3332 2756 2360 2072 4564 5644 6276 6724 7072 7356 7596 7804 9920 5888 4232 3332 2756 2360 2072 4564 5644 6276 6724 7072 7356 7596 7804 9920 5888 4232 3332 2756 2360 2072 4564 5644 6276 6724 7072 7356 7596 7804 9920 5888 4232 3332 2756 2360 2072 4564 5644 6276 6724 7072 7356 7596 7804 9920 5888 4232 3332 2756 2360 2072 4564 5644 6276 6724 7072 7356 7596 7804 9920 5888 4232 3332 2756 2360 2072 4564 5644 6276 6724 7072 7356 7596 7804 9920 5888 4232 3332 2756 2360 2072 4564 5644 6276 6724 7072 7356 7596 7804 9920 5888 4232 3332 2756 2360 2072 10120 6088 4432 3532 2956 2560 2272 9920 5888 4232 3332 2756 2360 2072 10120 6088 4432 3532 2956 2560 2272 9920 5888 4232 3332 2756 2360 2072 10120 6088 4432 3532 2956 2560 2272 9920 5888 4232 3332 2756 2360 2072 10120 6088 4432 3532 2956 2560 2272 9920 5888 4232 3332 2756 2360 2072 10120 6088 4432 3532 2956 2560 2272 9920 5888 4232 3332 2756 2360 2072 10120 6088 4432 3532 2956 2560 2272 9920 5888 4232 3332 2756 2360 2072 10120 6088 4432 3532 2956 2560 2272 9920 5888 4232 3332 2756 2360 2072 10120 6088 4432 3532 2956 2560 2272 9920 5888 4232 3332 2756 2360 2072 4664 5744 6376 6824 7172 7456 7696 7904 9920 5888 4232 3332 2756 2360 2072 4664 5744 6376 6824 7172 7456 7696 7904 9920 5888 4232 3332 2756 2360 2072 4664 5744 6376 6824 7172 7456 7696 7904 9920 5888 4232 3332 2756 2360 2072 4664 5744 6376 6824 7172 7456 7696 7904 9920 5888 4232 3332 2756 2360 2072 4664 5744 6376 6824 7172 7456 7696 7904 9920 5888 4232 3332 2756 2360 2072 4664 5744 6376 6824 7172 7456 7696 7904 9920 5888 4232 3332 2756 2360 2072 4664 5744 6376 6824 7172 7456 7696 7904 9920 5888 4232 3332 2756 2360 2072 4664 5744 6376 6824 7172 7456 7696 7904 9920 5888 4232 3332 2756 2360 2072 9720 5688 4032 3132 2556 2160 1872 9920 5888 4232 3332 2756 2360 2072 9720 5688 4032 3132 2556 2160 1872 9920 5888 4232 3332 2756 2360 2072 9720 5688 4032 3132 2556 2160 1872 9920 5888 4232 3332 2756 2360 2072 9720 5688 4032 3132 2556 2160 1872 9920 5888 4232 3332 2756 2360 2072 9720 5688 4032 3132 2556 2160 1872 9920 5888 4232 3332 2756 2360 2072 9720 5688 4032 3132 2556 2160 1872 9920 5888 4232 3332 2756 2360 2072 9720 5688 4032 3132 2556 2160 1872 9920 5888 4232 3332 2756 2360 2072 9720 5688 4032 3132 2556 2160 1872)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 766 1987) (om-make-point 146 109) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (60 (((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1)))) ((6 8) (1 (1 (1.0 1)) 1.0 1 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 2)) ((6 8) (1 1 (1 (1.0 1)) 1 (1 (1.0 1)) 1.0)) ((6 8) (1 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 2 1 1 (1 (1.0 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4564)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5644)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6276)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6724)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7356)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (10120)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6088)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3532)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2956)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2560)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2272)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4664)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5744)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6376)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6824)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7172)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7456)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7696)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2160)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (1872)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9920)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5888)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4232)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3332)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2756)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2360)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2072)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5688)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4032)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3132)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2556)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 298 1987) (om-make-point 146 109) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (117/2 (((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1)) ((6 8) (1 2 1 (1 (1 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (2 1 (1 (1 1)) 1 1)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1 1)) ((6 8) (1.0 1 (1 (1 1)) 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 1 2)) ((6 8) (1 (1 (1 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 2 (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1 1 2 1)) ((6 8) ((1 (1 1)) 1 1 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 1 2 1 (1 (1 1)))) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1)) ((6 8) (1 2 1 (1 (1 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (2 1 (1 (1 1)) 1 1)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1 1)) ((6 8) (1.0 1 (1 (1 1)) 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 1 2)) ((6 8) (1 (1 (1 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 2 (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1 1 2 1)) ((6 8) ((1 (1 1)) 1 1 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) (1 1 2 1 (1 (1 1)))) ((6 8) (1 1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1)) ((6 8) (2 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1)) ((6 8) (1 2 1 (1 (1 1)) 1)) ((6 8) (1 (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (1.0 (1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((6 8) ((1 (1.0 1)) (1 (1 1)) (1 (1.0 1)) 1.0 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1)) ((6 8) (2 1 (1 (1 1)) 1 1)) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 2)) ((6 8) ((1 (1 1)) (1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)))) ((6 8) ((1 (1 1)) (1 (1.0 1)) 1.0 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1 1 1)) ((6 8) (1.0 1 (1 (1 1)) 1 1 (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 2 (1 (1 1)))) ((6 8) ((1 (1.0 1)) (1 (1.0 1)) 1.0 (1 (1.0 1)) (1 (1.0 1)) (1 (1 1)))) ((6 8) ((1 (1.0 1)) 1.0 2 (1 (1 1)) (1 (1.0 1)))) ((6 8) (1.0 (1 (1.0 1)) 1 1 2)) ((6 8) (1 (1 (1 1)) 1 1 (1 (1.0 1)) 1.0)) ((6 8) ((1 (1.0 1)) 1 -4))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7104)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7452)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7976)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5444)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6524)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7156)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7604)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7952)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8236)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8476)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6024)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6656)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 13" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 350 1903) nil (list (list 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 130" (quote list) (quote nil) (om-make-point 375 1797) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 10" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 339 1845) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 9" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 324 1787) nil (list (list 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976 5444 6524 7156 7604 7952 8236 8476 4944 6024 6656 7104 7452 7736 7976)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 123" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 340 1745) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 58 1485) nil (list (list (quote ?) (list (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 2 1 (list 1 (list 1 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 2)) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 1)) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 2)) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 1 1)) (list (list 6 8) (list 1.0 1 (list 1 (list 1 1)) 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1 1 2)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1 1 2 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 1 2 1 (list 1 (list 1 1)))) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 2 1 (list 1 (list 1 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 2)) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 1)) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 2)) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 1 1)) (list (list 6 8) (list 1.0 1 (list 1 (list 1 1)) 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1 1 2)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1 1 2 1)) (list (list 6 8) (list (list 1 (list 1 1)) 1 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1 1 2 1 (list 1 (list 1 1)))) (list (list 6 8) (list 1 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1)) (list (list 6 8) (list 1 2 1 (list 1 (list 1 1)) 1)) (list (list 6 8) (list 1 (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 1)) (list (list 6 8) (list 1.0 (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 2)) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 1)) (list (list 6 8) (list 2 1 (list 1 (list 1 1)) 1 1)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 2)) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list (list 1 (list 1 1)) (list 1 (list 1.0 1)) 1.0 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) 1 1 1)) (list (list 6 8) (list 1.0 1 (list 1 (list 1 1)) 1 1 (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1 2 (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) 1.0 (list 1 (list 1.0 1)) (list 1 (list 1.0 1)) (list 1 (list 1 1)))) (list (list 6 8) (list (list 1 (list 1.0 1)) 1.0 2 (list 1 (list 1 1)) (list 1 (list 1.0 1)))) (list (list 6 8) (list 1.0 (list 1 (list 1.0 1)) 1 1 2)) (list (list 6 8) (list 1 (list 1 (list 1 1)) 1 1 (list 1 (list 1.0 1)) 1.0)) (list (list 6 8) (list (list 1 (list 1.0 1)) 1 -4))))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 7" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 41 1427) nil (list (list 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 124" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 57 1385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 8" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 124 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 120" (quote list) (quote nil) (om-make-point 513 1617) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 9" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 501 1703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 490 1645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 120" (quote list) (quote nil) (om-make-point 410 1617) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 9" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 398 1703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 387 1645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 120" (quote list) (quote nil) (om-make-point 307 1617) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 9" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 295 1703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 284 1645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 12" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 4 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 11" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 44 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 10" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 84 1343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 9" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 192 1703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 120" (quote list) (quote nil) (om-make-point 204 1617) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 181 1645) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 122" (quote list) (quote nil) (om-make-point 98 1186) (om-make-point 32 28) 32 "32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 7 1214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 7 1272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 54 1272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 54 1214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 5" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 147 1133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 33 1063) (om-make-point 21 36) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 47 1098) nil (list (list 1/4 1/16 1/8 1/8 1/4 1/8 1/16 1/16 1/8 3/16 1/4 1/16 1/8)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 116" (quote list) (quote nil) (om-make-point 95 1138) (om-make-point 32 28) 14 "14" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 115" (quote list) (quote nil) (om-make-point 95 1080) (om-make-point 32 28) 13 "13" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 47 1156) nil (list (list 1/16 1/4 1/16 1/8 1/4 1/8 1/16 1/16 1/16 1/4 1/8 1/8 1/16 1/8)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 0 1156) nil (list (list 1/4 1/4 1/4 3/16 1/16 1/4 3/16 1/8 3/16 3/16 1/8 1/16 1/8 3/16)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 20" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 394 1489) (om-make-point 52 108) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5444) (6524) (7156) (7604) (7952) (8236) (8476) (8940) (5356) (3884) (3084) (2572) (2220))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 20" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 341 1489) (om-make-point 52 108) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5444) (6524) (7156) (7604) (7952) (8236) (8476) (9740) (6156) (4684) (3884) (3372) (3020))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 20" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 288 1489) (om-make-point 52 108) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5444) (6524) (7156) (7604) (7952) (8236) (8476) (5644) (6724) (7356) (7804) (8152) (8436) (8676))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 20" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 235 1489) (om-make-point 52 108) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5444) (6524) (7156) (7604) (7952) (8236) (8476) (4944) (6024) (6656) (7104) (7452) (7736) (7976))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 7" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 395 1447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 6" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 342 1447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 5" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 289 1447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 236 1447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 10" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 850 1389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 9" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 797 1389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 8" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 744 1389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 7" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 691 1389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 6" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 382 1389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 5" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 329 1389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 4" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 276 1389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 3" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 223 1389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 19" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 799 1279) (om-make-point 130 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9720) (5688) (4032) (3132) (2556) (2160) (1872))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 18" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 668 1279) (om-make-point 130 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4564) (5644) (6276) (6724) (7072) (7356) (7596) (7804))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 17" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 799 1169) (om-make-point 130 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((10120) (6088) (4432) (3532) (2956) (2560) (2272))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 16" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 668 1169) (om-make-point 130 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4664) (5744) (6376) (6824) (7172) (7456) (7696) (7904))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 15" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 200 1279) (om-make-point 130 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5644) (6724) (7356) (7804) (8152) (8436) (8676))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 14" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 331 1279) (om-make-point 130 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8940) (5356) (3884) (3084) (2572) (2220))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 13" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 331 1169) (om-make-point 130 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9740) (6156) (4684) (3884) (3372) (3020))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 12" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 200 1169) (om-make-point 130 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4944) (6024) (6656) (7104) (7452) (7736) (7976))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 11" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 754 1059) (om-make-point 130 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9920) (5888) (4232) (3332) (2756) (2360) (2072))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 18" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 424 1111) nil (list 148) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 119" (quote list) (quote nil) (om-make-point 456 1083) (om-make-point 28 28) 150 "150" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 118" (quote list) (quote nil) (om-make-point 417 1083) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 117" (quote list) (quote nil) (om-make-point 56 1035) (om-make-point 32 28) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 10" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 286 1062) (om-make-point 130 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5444) (6524) (7156) (7604) (7952) (8236) (8476))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 0 1098) nil (list (list 1/8 3/16 1/8 1/4 1/16 1/4 1/4 1/4 3/16 3/16 1/8 1/8 1/16)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 16" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 9 979) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 114" (quote list) (quote nil) (om-make-point 39 951) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 113" (quote list) (quote nil) (om-make-point 12 951) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 9" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1228 386) (om-make-point 87 105) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((1360) (4515) (7867) (522) (1952) (5903) (6190) (5602) (6716) (4312) (7951) (193) (753) (2728) (7192) (2907) (7403) (2211) (6400) (5120) (7373) (2311) (6573) (4690) (7762) (923) (3265) (7730) (1043) (3629) (7931) (273) (1054) (3660) (7942) (230) (894) (3175) (7660) (1302) (6070) (6105) (6280) (6735) (7330) (7365) (7050) (6735) (6490) (6350) (6245) (6210) (6175) (6175) (6210) (6280) (6280) (5405) (4180) (4390) (4985) (5405) (5650) (5790) (5860) (5930) (5965) (5965) (5965) (6000) (6000) (5965) (5895) (5545) (4810) (4530) (4810) (5160) (5440) (5615) (5720) (5790) (5825) (5860) (5860) (5825) (5895) (6420) (7540) (7610) (7120) (6700) (6420) (6280) (6175) (6105) (6070) (6070) (6070) (6070) (6070) (6105) (6140) (6035) (5125) (4600) (7470) (8380) (7435) (6735) (6350) (6175) (6070))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000 112000 113000)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 1222 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1112 214) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900)) (quote (1360 4515 7867 522 1952 5903 6190 5602 6716 4312 7951 193 753 2728 7192 2907 7403 2211 6400 5120 7373 2311 6573 4690 7762 923 3265 7730 1043 3629 7931 273 1054 3660 7942 230 894 3175 7660 1302)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 112" (quote list) (quote nil) (om-make-point 1398 275) (om-make-point 34 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 67" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 1379 303) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 111" (quote list) (quote nil) (om-make-point 1396 240) (om-make-point 32 28) 35 "35" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 71" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1378 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0))) (om-make-point 1357 179) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (13 14 16 18 18 19 18 17 15 14 12 10 8 7 5 3 0 -2 -5 -9 -13 -17 -20 -22 -21 -19 -14 -9 -3 4 12 21 30 34 32 26 20 15 10 7 5 4 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) (quote (2 3 8 21 38 39 30 21 14 10 7 6 5 5 6 8 8 -17 -52 -46 -29 -17 -10 -6 -4 -2 -1 -1 -1 0 0 -1 -3 -13 -34 -42 -34 -24 -16 -11 -8 -6 -5 -4 -4 -5 -3 12 44 46 32 20 12 8 5 3 2 2 2 2 2 3 4 1 -25 -40 42 68 41 21 10 5 2)) (quote (144 150 134 127 48 13 4 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 144 150 134 127 48 13 4 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) newobj) "x" nil (pairlis (quote (winsize winpos mode show-axes show-room room-size line-width bg-color picture)) (list (om-make-point 800 729) (om-make-point 299 2) 0 1 1 2 1.0 nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 110" (quote list) (quote nil) (om-make-point 1481 0) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 109" (quote list) (quote nil) (om-make-point 1454 0) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 15" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 1443 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 108" (quote list) (quote nil) (om-make-point 1416 41) (om-make-point 42 28) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 107" (quote list) (quote nil) (om-make-point 1409 0) (om-make-point 44 28) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 102" (quote list) (quote nil) (om-make-point 1382 0) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 14" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 1371 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 70" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1395 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 106" (quote list) (quote nil) (om-make-point 1343 0) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 105" (quote list) (quote nil) (om-make-point 1316 0) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 104" (quote list) (quote nil) (om-make-point 1250 0) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 103" (quote list) (quote nil) (om-make-point 1277 0) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 13" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 1239 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 12" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 1305 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LORENTZ" (quote alea::lorentz) (quote ((om-load-inputfun (quote input-funbox) "first x value" "XINIT" 1.0) (om-load-inputfun (quote input-funbox) "first y value" "YINIT" 1.0) (om-load-inputfun (quote input-funbox) "first z value" "ZINIT" 1.0) (om-load-inputfun (quote input-funbox) "Prandtl number" "A" 10) (om-load-inputfun (quote input-funbox) "Reynolds number" "R" 28) (om-load-inputfun (quote input-funbox) "parameter" "C" 2.67) (om-load-inputfun (quote input-funbox) "delta time to the numerical integration" "DT" 0.02) (om-load-inputfun (quote input-funbox) "number of iterations steps" "PAS" 100))) (om-make-point 1341 121) nil nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 101" (quote list) (quote nil) (om-make-point 1155 151) (om-make-point 44 28) 8000 "8000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 69" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1128 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 100" (quote list) (quote nil) (om-make-point 1184 0) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 99" (quote list) (quote nil) (om-make-point 1211 0) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 9" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 1173 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "KAOSN" (quote alea::kaosn) (quote ((om-load-inputfun (quote input-funbox) "first value" "SEED" 0.1) (om-load-inputfun (quote input-funbox) "chaotic factor (between 0 and 4.0)" "LAMBDA" 3.99) (om-load-inputfun (quote input-funbox) "length of the sequence" "LONG" 20) (om-load-inputfun (quote input-funbox) "index of the conjugate function" "FN?" 1))) (om-make-point 1117 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 98" (quote list) (quote nil) (om-make-point 1146 41) (om-make-point 42 28) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 97" (quote list) (quote nil) (om-make-point 1080 41) (om-make-point 42 28) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 96" (quote list) (quote nil) (om-make-point 1112 0) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 95" (quote list) (quote nil) (om-make-point 1139 0) (om-make-point 44 28) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 11" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 1101 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 68" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1125 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 94" (quote list) (quote nil) (om-make-point 1046 0) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 93" (quote list) (quote nil) (om-make-point 1073 0) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 10" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 1035 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 67" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1059 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 771 1017) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 4" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 752 959) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 45" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 646 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 91" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 668 917) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "STRUCT" "STRUCT" nil))) (om-make-point 303 1017) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 3" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 284 959) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 66" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 925 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 65" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 892 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 64" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 868 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 64" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 862 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 63" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 835 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 62" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 808 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 61" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 781 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 60" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 754 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 59" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 727 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 58" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 700 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 57" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 673 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 56" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 646 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 66" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 931 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 65" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 898 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 63" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 841 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 62" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 814 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 61" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 787 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 60" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 760 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 59" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 733 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 58" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 706 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 57" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 679 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 55" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 925 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 54" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 892 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 53" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 862 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 52" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 835 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 51" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 808 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 50" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 781 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 49" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 754 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 49" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 733 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 48" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 727 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 47" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 700 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 46" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 673 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 52" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 814 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 56" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 931 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 55" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 898 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 54" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 868 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 53" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 841 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 51" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 787 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 50" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 760 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 48" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 706 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 47" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 679 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 89" (quote list) (quote nil) (om-make-point 931 799) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 88" (quote list) (quote nil) (om-make-point 898 799) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 87" (quote list) (quote nil) (om-make-point 871 799) (om-make-point 26 28) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 86" (quote list) (quote nil) (om-make-point 844 799) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 85" (quote list) (quote nil) (om-make-point 817 799) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 84" (quote list) (quote nil) (om-make-point 790 799) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 83" (quote list) (quote nil) (om-make-point 763 799) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 82" (quote list) (quote nil) (om-make-point 736 799) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 81" (quote list) (quote nil) (om-make-point 709 799) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 80" (quote list) (quote nil) (om-make-point 682 799) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 79" (quote list) (quote nil) (om-make-point 643 799) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 78" (quote list) (quote nil) (om-make-point 931 693) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 77" (quote list) (quote nil) (om-make-point 898 693) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 76" (quote list) (quote nil) (om-make-point 871 693) (om-make-point 26 28) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 75" (quote list) (quote nil) (om-make-point 844 693) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 74" (quote list) (quote nil) (om-make-point 817 693) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 73" (quote list) (quote nil) (om-make-point 790 693) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 72" (quote list) (quote nil) (om-make-point 763 693) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 71" (quote list) (quote nil) (om-make-point 736 693) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 70" (quote list) (quote nil) (om-make-point 709 693) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 69" (quote list) (quote nil) (om-make-point 682 693) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 68" (quote list) (quote nil) (om-make-point 643 693) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 8" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 907 586) (om-make-point 87 105) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9720) (5688) (4032) (3132) (2556) (2160) (1872))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 972 481) (om-make-point 87 105) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4164) (5244) (5876) (6324) (6672) (6956) (7196) (7404))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "reverse bell mix.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 695 0) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "reverse bell mix" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "reverse bell mix.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARTIAL-TRACKING 2" (quote partial-tracking) (quote ((om-load-inputfun (quote input-funbox) "" "SOUND" nil) (om-load-inputkeyword (quote input-keyword) "" "begin-t" (quote :begin-t) nil nil) (om-load-inputkeyword (quote input-keyword) "" "end-t" (quote :end-t) nil nil) (om-load-inputkeyword (quote input-keyword) "" "max-partials" (quote :max-partials) 12 nil) (om-load-inputkeyword (quote input-keyword) "" "amp-treshold" (quote :amp-treshold) -40 nil) (om-load-inputkeyword (quote input-keyword) "" "analysis-type" (quote :analysis-type) "inharmonic" (list (list "Harmonic" "harmonic") (list "Inharmonic" "inharmonic"))) (om-load-inputkeyword (quote input-keyword) "" "analysis-params" (quote :analysis-params) (list 20 0.0 50 1 3 0.017 50 0.009) nil) (om-load-inputkeyword (quote input-keyword) "" "windowsize" (quote :windowsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "fftsize" (quote :fftsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "step" (quote :step) 256 nil) (om-load-inputkeyword (quote input-keyword) "" "windowtype" (quote :windowtype) "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputkeyword (quote input-keyword) "" "smoothing-enveloppe" (quote :smoothing-enveloppe) (list 0.0 0.0) nil) (om-load-inputkeyword (quote input-keyword) "" "out" (quote :out) "partials.sdif" nil))) (om-make-point 702 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "reverse bell mix.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 730 116) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "reverse bell mix" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (player)) (list (quote :spat-sdif-player))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM 2" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 754 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 782 232) (om-make-point 87 111) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5926 4946 8230 7568 8300 7782 7018 7438 6808) (7670 7314 8578 8474 7966 7874 7310 6636 5522) (8422 8032 6342 6148) (8018) (8376) (8158) (7988) (8058) (8138) (6552) (8358) (7014) (6168) (8364 8104) (6344) (6190) (6120) (6114) (6144) (7194) (8092) (7960) (8436 6552) (6752) (8164 4472) (8364) (4418) (8558) (8132) (8472) (8100 8520) (7892) (7990) (6102 7828) (7644) (8128) (8048) (7776) (7602) (5592 7466) (8450) (7840) (8436 8058) (7832 8234) (7570) (7286) (7566) (8280) (7834) (7502) (7570) (6316) (8440) (8158) (4400) (7856) (6102) (7296) (7910 8240) (7498 8490) (7876 4102 8096) (6464) (8350) (8498) (8466) (5656) (6742) (7562) (7892) (7450) (7846 7464) (6102) (6452) (7890) (5506 8418) (6116) (7702) (6924) (7492 8246 8212) (7866) (6454) (4658) (7288) (8562) (7668) (7834 7456 8076) (8194) (6790) (8436) (7868) (6974) (8436) (6470) (7450) (6118) (8466) (7288) (7428) (6440) (8130) (8240) (6118) (8548 7932) (6440) (7492) (6456) (8130) (8494 8444) (4280) (8050) (6132 8200 4226) (7290) (4656) (6452) (6110) (7492) (6978) (6450) (4602) (8536 8218) (8046) (8596) (7296) (6126) (6446) (7298) (8538) (8218 6766) (7304) (6868) (6140 4404) (7996) (8380) (8396) (8536) (6896 6138) (8372) (8536) (8534 8370) (7038) (8518) (5628) (8540) (8384 6128) (8568) (6114 5616) (8382) (6142) (4512 8486) (8500 6138) (8542 6114) (8548) (8578) (8376 6184) (5130) (8530) (8378 6160) (4866) (8578) (8532) (6194) (8504) (4890 6188) (8498) (5144) (6246) (6218) (8590) (8492) (6220) (8538) (8478) (8484) (6356) (5112) (8444) (6124) (7280) (8390) (8482) (8450) (7192) (7964) (8442) (8104 8230) (8560) (6296) (8562 7048) (4142) (8352) (8216) (8112 7436) (8566 6784) (8516) (8184) (7138) (8378) (7056) (8378) (7302) (6368) (8528 6156) (7966) (8244 8492) (8404 6116) (8450) (8594) (6130) (8386) (7262) (8566) (6254 6130) (5228) (8452) (8210) (6138) (8422) (6456) (7060) (6924) (8452) (7070) (7162) (6148) (8446) (7052) (8242) (7942) (6138) (6156) (8240) (6190) (6158) (6222) (6206) (8220) (6200) (8374) (8236) (8232) (6960) (8230) (6170) (8372) (6112) (8202) (6118) (8234) (8234) (8378) (8198) (6194) (7098) (6188) (8580) (8238) (6184 8202) (5096 6946 7668) (7836) (6112) (7718 8370) (7312) (8360) (7670) (7508) (7730) (7844) (7458) (7784) (7744) (7832) (8360) (7760) (8358) (7760) (7760) (7410) (7458) (7524) (7842) (8354) (7338) (7584 7472) (7748) (7746) (7840) (7746) (7796) (7380) (7740) (7334) (7694) (8356 7754) (7476) (7746 8250) (7778) (8356) (7494) (7318) (7700) (7670) (7782) (8354) (7668) (8352) (7718) (7686) (7614) (7670 7364) (7776) (8354) (7670 7448) (7562 7702) (7674) (8258) (7666) (7672) (7476) (8350) (7510) (7500) (8308) (8304) (8266) (8300) (8434) (7632) (8576) (7252) (7240) (8546) (7320) (8352) (8262) (8490) (7936) (8484) (8590) (8566 5918) (8514) (8390) (8408) (8352) (8342) (8392) (8362) (8388) (8374) (8392) (8356) (8168) (8354) (8396) (8388) (8100) (8358) (8390) (8350) (7984) (8162) (8526) (8416) (8350) (8158) (7268) (7962 6032) (8532) (5890) (8352) (8386) (5820) (7978) (8390) (8448) (4204) (8534) (7356) (8468) (6088) (7432 7206) (8132 7404 7770) (7922) (8394) (7420) (8350) (7348 6394) (7704) (8440) (6134) (7720 5900 7530) (6326) (8408 8522) (8354 8210) (8452 8408) (7392 7194 6376) (7080 7948) (6514 6094) (5786) (7784) (8386) (7344 6262) (8404) (5836) (8404 8500) (7766) (7372) (8202) (8486) (4678 7438) (6338) (5930 6384) (4168) (8114 8360) (8404) (7176) (4894) (8502 8160) (7266) (8186) (5718) (7494 6404 4140) (8524 7426) (8408) (8398) (8344) (7684) (4842 8208) (5712 8432) (8538 8458) (8444) (8492) (4074) (8176 7430) (8352) (4322) (7346) (7272) (4752) (8446) (8244) (7420) (5696 8346 6974) (7186 6454) (8200) (7262) (7772) (8150) (8376) (7026 6444) (8478) (7198 7090) (7942) (5700) (8268) (8348) (7432) (8192 6588) (8454) (6440) (7768) (7008) (8148) (7254) (4810) (7962) (7432) (6904) (8146) (7944) (8570) (7084 8222 4658) (6996 6968) (7054 6902) (4880) (5504) (6990 6574) (4854) (8142) (4708) (7956) (8584) (5500 6440) (4554) (8238) (6646) (8576 6922) (7074) (7952) (6968) (8572) (4444) (7078) (6998 5496) (7058) (5496 8260 4726) (4630) (7082) (7080) (7002) (8238 5490) (8034) (7074) (5494) (4732) (5490) (6996) (8578 7076) (7000 8580) (7084) (6994) (4516 8572) (7080) (6996) (7076) (6990) (7082) (7076) (6994) (7076 8578) (6998) (7072) (6978) (6984) (6996) (7072) (6994) (8574) (6998) (7000) (6992) (7078) (7000) (6990) (6998) (7076) (7000) (7012) (7082) (7086) (7086) (7088) (7088) (8580 7088) (7088) (7090) (7092) (7092) (7092) (7094) (7092) (7090) (7094) (7158) (7096) (7098) (8394) (7096) (7098) (8312) (7098) (7768) (6290) (8144) (7120) (7170) (8236) (8052) (6450) (8244) (6732) (8228 6094) (7986) (6534) (7864) (8120) (8156 7424) (5578 8454) (8070) (7412) (8444) (8280) (8000) (8230 8244 7420) (8486) (8126) (8342) (8260 8048) (6440 7114) (7704) (7390 5910) (7816) (8042) (7154) (8266) (7696) (8346 6462) (6592 7806) (8266 7710) (6458) (8056) (8182) (8316 6454) (7776) (8220 7154) (6460) (7710) (7148) (8328) (8200) (7486) (8052) (7116) (8308) (6452) (7172) (6178) (8320) (7772) (6470) (8146) (8056) (7146) (7762) (6838) (7928) (8000 6462 6706) (8314 8232 7096) (8260) (8204) (7458) (6542) (8074) (8056) (7148 6126) (6454) (8288) (8300) (7788) (8056) (7146) (6472) (6174) (8080) (8170) (6472) (7114) (7784) (7090) (8236) (8188) (7090) (7790) (6446) (7090) (8254) (7092) (8326) (7090 7512) (6104) (6528) (8228) (6610) (7092) (8580) (8286) (5998 8350) (8568) (8238 7788 8456) (8346) (7986) (6434) (8546) (8350) (6450 8570) (8350) (8572) (6820) (6530) (8460) (6116) (8584) (6418) (8580) (8466) (8458) (8578) (8458) (7480) (6570 6126) (8582) (6490) (7096) (6654) (7878) (6628) (8456) (6408 7092) (6130) (8584 8456) (6268) (6864) (8582) (8302 7974) (8576) (8458) (7790) (6406) (7096) (6932) (8458) (8584) (8306) (8456) (8582) (8308) (8414) (6916 8150) (6278) (8308) (8408 6552) (8458) (8584) (8408) (8458) (8458) (6282 8582) (6536) (8456) (8582) (6540) (8584) (5330) (7686) (8458) (6280) (6654) (8584) (5332 8456) (6292) (6546) (8454) (6270) (8582) (6568) (8436) (8584) (6268) (8436) (6250) (8414) (8584) (8456) (6246) (8458) (8438) (8584) (6994) (8584) (8416) (8420) (4726) (8584) (4934) (8584 8414) (6244) (8420) (8582) (7428) (8584) (6236) (8584) (8548) (8584) (6222) (8584) (8430) (8434) (8576) (8572) (7582) (8424) (7680) (6170) (7440) (7580) (8156) (8196) (7884) (8114 7386) (8148 7454) (6032) (8582) (7622) (7322) (6004 7790) (7442) (7194) (7248) (6016) (8554) (7624) (6004) (7676) (6238) (5992) (8570) (7562) (8112) (7834) (7568) (6248) (8130) (7674) (8116) (7560) (6004) (7298) (6034) (8186) (7804) (6144) (7054) (8100 7666) (7552) (6056) (7658 8164) (7826) (7828) (5996 7260) (8196) (7300) (7758) (6034) (8114 8216) (7178) (7250) (8556) (8066 7176) (5994 8080 7774) (7884) (8584) (7784) (7226) (6246) (8584 8130) (8152) (8562 7300) (6224) (5980) (8580 7264) (8078) (8152) (7760) (7174) (8066) (8120 6236) (8556 8436) (8148) (7300) (5980) (7306) (8584 7176) (8142 7874) (6226) (8082) (7290) (8144) (8288) (8576) (5976) (7178) (8452) (8306) (8560) (7870) (8308 7224) (8552) (7846) (7184) (8142) (8584) (8302) (5978) (8586) (8302) (7184) (8582 8432) (7824) (5980) (7866) (7276) (8300) (7862) (8586) (8310) (6228) (8310 8432) (8390) (8456) (8584 8296) (8296) (5978) (8320 8456) (8540) (7284) (8546 8456) (8316) (8352 5976) (7166) (8456) (7236) (8456) (8526) (8350) (8524 8348) (8526) (8458) (8524) (7220) (8348) (8460) (5976) (4108) (8458) (8348) (8528 8000) (8528) (5978) (8346) (8526 8344) (8524) (8480) (8346) (8492) (8458) (7926) (8516) (8230) (7080) (7922) (5984) (8496) (5896) (8460 8528) (4848) (7116) (8530) (5986) (7918) (8526) (6160 7978) (7226) (6806) (8496) (7204) (8234) (7570 5536) (8522) (8166) (7826 6728) (8304 7324) (7928) (8524) (7170) (8454) (8242) (8166) (7740) (7928) (8526 8324) (8454 7152) (8336) (6634) (8026) (8176) (8270) (7784) (8454) (7720) (7822) (8452) (7476) (7782) (8324) (5282) (7646) (6606 8448) (8442) (7594) (6522) (7812) (8594) (7648) (8424) (7194) (8152 6240) (6594 7058) (5640) (7758) (6690) (7646 5622) (8434) (8584) (4882 7300) (7758) (7654) (8362) (7770) (8198) (7418) (7680) (8484) (8176) (7744) (7424 7892 8354) (8296) (7764 5604) (6892) (7724 8356) (7782 8320) (7666 7484) (6638) (5226) (7668) (8434) (7492) (8344) (7766 5660) (8438) (7288) (6826) (4804) (6632) (6224) (7682 7058) (5562 8196) (7450) (8432 8306) (7656) (6208 8304) (5464) (8438) (5796) (6834) (7586 8304) (7292) (8420) (6540) (7422 6208) (7054) (7654 5330) (6886) (6854) (8390) (7588) (6208) (7054) (7418 8440 5674) (5168) (7814) (7418) (7930) (7776 8390) (7284) (5406 6620) (6548) (7422 8422 6214) (5178) (8144 7062) (7290 8574) (6856) (8428) (7750) (7710) (7488) (8548) (7568) (7714) (7652) (7482 5402) (7724) (6756) (7424) (6618) (7656) (7886) (5414 7784) (7660) (6680) (7656) (7440) (7424) (7662) (7654) (5382) (8266) (7764 6228) (7730) (7592) (5680) (6182) (7504) (6630) (7826) (7484 6198) (7654) (5380) (7478) (6776) (7466) (5514) (7428) (7424) (7592) (6642 6226) (7600) (7594) (7418 5678) (7656) (7734 7418) (7486) (7670) (7832 5476) (7468) (7612) (7452) (7484) (7480) (7696) (7420) (7424) (7586) (6198) (6178) (6200) (6188) (6170) (6190) (6188) (6198) (6194) (6180) (6144) (6172) (6190) (6156) (6186) (6132) (6190) (6192) (6142) (6170) (6112) (7408) (6184) (6152) (5966) (6190) (6188) (6194) (6654 6102) (8548) (5026) (5022 6648) (5026) (5020) (5022) (5022) (5026) (5020) (8458) (8050) (7572) (7998) (7192) (8116) (7772 8552 8434) (7520 7674) (6822) (8324) (7104 5752 5734) (8186) (7678) (7324) (6842) (5022) (6662) (8192 8088 7788) (8322 7502) (8062) (7298) (8514 7548) (6088) (7108 8340) (8448) (6594) (7796) (8112 8508) (7812) (8344) (5348 6214) (8480 7988) (6582 5980) (5760) (7604 5354) (8180) (8034 7740) (7816) (6110) (8042) (6842) (8288 8428) (7696) (8158 8104 5560) (8486) (7788 7298) (7852 4284) (8534 6832) (6834) (5968) (7820) (7728) (7106) (6868 8186 5838) (7674) (7998) (7792 8112) (6822) (7676) (7498) (5706 8094) (8200) (6840) (7112 5884) (7800) (8368) (7994) (6016) (8544) (4784) (7316) (8448 8144) (8488) (7994) (5496) (7746) (7818) (7910 4684 8484) (5420) (7686) (6206) (8466) (8198) (7228 7992 7700) (4220) (8550 7112) (8484 8344 6856) (8090) (8548 6690) (7996) (4762) (8146) (6214) (6572) (8118 8006) (7734) (5772) (6788) (8172) (6598) (5416) (8098) (8310 7302) (7698) (8514 8170 4014) (5754) (7852) (6866) (8202) (7112) (8062) (6206) (7878) (8108 7986) (7860) (7722 7120) (6834) (8404) (7874) (6796) (8220) (8110) (6798 8110) (7694 7296 6206 5774) (7116) (8342) (7876) (8036) (8108 7762 5768) (7868) (8304 4642) (8438) (7500 7190) (7782) (5836 7790) (7142) (7124) (7872) (4386) (7872) (8192 7986) (8344) (8338 6188) (7822) (8272) (7840) (8554) (8508) (7682) (7508 7698) (6060) (8462) (6146) (7660) (6168) (4356) (8440) (8218) (6168 8394) (6252) (7118 7838) (7958 8242) (5876) (7506) (8404 6160) (6420) (7336) (8464) (7968 8392) (8186) (8238) (7390) (8106) (7956 6408 8394) (7666) (7844) (7902) (6052) (7666) (8476) (8558) (8402) (7550) (7594) (8404 8282) (7510) (7654 5796) (7114 6340) (8400) (5842) (6792) (7844 8504) (6616 7504 6400) (7836) (6044 8180) (8406 5994) (8550) (8114) (8406) (7502) (8406) (5834 8548) (7968 6370) (8184) (6414) (7386 8442) (4050) (6138) (6008 8560) (8450) (7300) (6436 8196) (6190) (5820 7674) (8438) (7388) (7658) (7926 7842) (8410) (7950) (6242) (8254) (7298) (8438) (8110) (6338) (8404) (8108) (6002) (7296) (6492) (7880) (8424) (7876) (6324) (7392) (7960) (8104) (7894) (7962) (7772) (7934) (7682) (7968 7892) (7962) (5822) (7502) (7118) (7872) (6818) (8392) (7674) (7936) (5800) (7948) (7576) (7970) (5776) (7944) (7514) (7950) (7574) (8032) (6770) (8016) (8556) (8218 8376) (8568) (7988) (8038) (8600) (8494) (7942) (7958) (8054) (8346) (8446 8282) (5402) (7746 8452 8374) (8136) (8350 4036) (7282) (8488 8388 7620) (8348 5746 8282 7722) (7084 8518) (7982 6958) (4568) (8350) (7928 7030 7502) (6412 8490) (7728) (8498) (8046) (8400 7572 6786) (5686) (8292) (6912) (7276) (7924) (8498) (5472) (8024) (8402) (7716) (7100) (7804) (7682) (8170 7026) (5748) (8564) (6470) (7802) (8250 4378) (7730) (7064 7506) (6468) (8230) (5776) (8478 8138) (7046) (8366) (7988) (7220) (7278) (6964) (8168 6990) (7644) (6470) (7736) (7988) (6820) (8014) (6772) (7278) (8036) (8346) (6924) (6764 7684) (7886) (7884) (6758) (6610) (6776) (8074) (8416) (8132) (8596) (7226) (8018) (7104 8428) (7288) (6216) (8420) (8180) (7108) (7196) (8524) (6878) (8430) (7102) (6282) (8134) (7124) (6886) (8546) (6884) (7116) (6788) (8104) (6886) (7970) (6886) (6622) (7492) (7122) (7266) (8412) (6894) (6618) (7506) (6898) (7298) (6624) (8542) (7118) (6676 7976) (6740) (6994) (8312) (7284) (7678) (6672) (7114) (5114) (7488) (6630) (8432) (8482) (6634) (5118 6634) (6658) (7006) (7008) (7068) (7054) (7066) (7068) (8540) (8362) (8064) (7588) (5768) (7104) (8444) (8094) (7700 7274) (7964) (8266 7246) (7478) (8548) (5182 8050) (5480 4396) (7896) (7506 8248) (8086) (8426) (8314) (7068) (7714) (8402) (8098) (8356) (7780) (8346 5446) (7274 7936) (8464 7078) (8096) (8546 7180) (7082) (6776) (8240 7970) (7968) (8382) (7168) (8018) (7500 8236) (7172) (7798) (7320) (7226) (8090) (7210) (7848) (6694) (8394) (7988) (7094) (7128) (7506) (8358 7648) (8054) (7794) (8402) (8104) (7390 5786) (7960) (7710) (8044) (7312) (8104) (8222) (7966) (8038) (7204) (7556) (8234) (7390) (7054) (8090) (7978) (8362) (8234) (7082) (8486) (7336) (7658) (7920) (6954 5764) (5206 8206) (6100) (5486) (6092) (6130) (7738) (7536) (7780) (7880) (7784) (7470 6372) (4480) (6152) (7384) (4656 8034) (8266) (4680) (7554 6370) (6276 7990) (8156 7412) (4576) (7648) (8154) (6270 7558) (6108) (8348) (7182) (4768) (8598 8450) (8348 6894 6810) (8024) (7510) (6074) (7196 8154) (8036) (8450) (7578 8546) (8348) (7884 8142) (7188) (8276 8576 8310) (4230) (8320 8148) (4730) (6102) (7194) (4566 6014) (6852) (8450 7576) (8038) (7192) (6818) (7444) (5514 8452) (7668) (6916) (7398) (8474) (6824 7192) (4994) (8100 4158) (8470) (5526 8042) (4458) (4098) (8254) (8352) (7590 5492) (8022 7196) (8490) (7812) (7686) (7408) (8036) (8452) (7558) (5986) (8040) (7426) (8452) (7792) (5478) (7944) (7784) (7360) (6094) (7738) (7782) (8048) (7786) (5478) (7792) (7360) (7786) (4966) (5494) (7568) (7716) (5406) (7360) (7592) (6096) (7726) (7030) (7356) (7732) (5960) (5434) (5462 6060) (7288) (7732) (5986) (6816) (7282) (7244) (5216) (5406) (8328) (8274) (7266) (5446) (5880) (8486) (8182) (6824) (8188) (6786) (8246) (7946) (8494) (6890) (7604) (7516) (6026) (6744) (6986) (7464) (8498) (8246) (8408) (6680) (7622) (8170 7252) (5570) (6822) (8156) (5800) (7938) (8276 7012) (5502) (8480) (7224) (8478) (7520 4564) (6672) (8242) (6086) (8426) (6710) (5184) (8384) (8486) (8040) (8484) (8018) (8070) (8030) (6764) (7220) (8484) (6270) (6748) (8270) (6674) (5400) (6548 8350 7796 7108 6074) (8088) (6880) (7196) (5394 7508 7048) (6566) (6126) (7036) (5378) (8090) (7738) (5360) (6996 6036) (6894) (5644) (5348) (6056) (6620) (7820) (5482) (7920) (6932) (6576) (7228) (5614) (7450) (6582) (6074) (4516) (6898) (7516) (6576 7200 6210) (7448 5594) (5382) (6092) (6382) (7354 7244) (8028) (6958) (7680 7446) (5424) (6134) (6258) (6586) (6928) (7700) (6902) (6346) (7224 5514) (7380) (6558 7840) (6348) (7508) (7004) (6544) (8172) (7438) (6352) (6890 6666) (8144) (8542) (8116) (7516 7068) (6372 6990) (7700) (7242 6926 6190) (8484) (7016) (6358) (6598) (6436) (7276) (8476) (5382) (5524) (5482) (8530) (7224) (6468) (7840) (6542) (6516) (6780) (6536) (8502) (7308) (8494) (7292) (8122) (6524) (8484) (7498) (8566) (6544) (7370) (7840) (8490) (5398) (7492) (8490) (5478) (7834) (8488) (6588) (7456) (6156) (7826 7516) (5494) (8568) (7518) (8118) (8490) (7692) (7702) (7740) (8112) (7692) (7794) (7718 7980) (8498) (7532) (7786) (8490) (8570) (8222) (8074) (6936) (8558) (8302) (8102) (8038) (8256) (8022) (8126) (7970) (8322) (8252) (7798) (8124) (8250) (8120) (8346) (7802) (8246) (6580) (8352) (7818) (7810) (8412) (8284) (8324) (5440) (8364) (8366 5550) (6890) (8066) (6772) (7710) (8370) (6930) (7784) (6776) (7980) (8022) (8114) (7702) (7360) (8306) (6556) (4374) (8110) (8022) (8584) (7352) (8112 6870) (8060) (6698) (7978) (8116 7536) (8588) (7962) (7982) (8528) (7720) (8376) (6852 7968) (4486) (7340) (8108) (8536) (8328) (6606) (8102) (6790) (8576 8376) (8120 4618) (7686) (8368) (8540) (4454) (8090) (6668) (4610 8592) (5624) (7716) (8344) (8126) (8264 6174 8354) (7336) (6540) (7832) (7520) (7042) (6056) (7788) (8382) (8484) (8122) (8492) (8582) (8354) (7918 7818 8254 7336) (6866) (8454 8586 6028) (8492 8034) (8316) (4904) (8092 7332) (7840) (7806) (8354 6580) (6204) (6962) (8132) (7338) (7050) (8342) (8250) (6816) (8366) (7336) (8484 6554) (6204) (8582) (8300) (6502) (7338 4114) (8588 8312) (6868) (7098) (8348) (8044) (7096) (8582) (8264 7520) (8372) (8276) (8116) (7088 8576 8360) (8030) (6564) (7080 8278) (7982) (6548) (7830) (8578) (8576 8292) (8226) (4622) (8046) (7824) (6520) (7322) (8572 7960 7916) (7088) (4364) (8358) (7108) (7962) (7992) (6544) (8588) (7076) (8476) (7094) (6534) (8476) (7086) (8574) (8474) (7960) (7082) (8574 7320) (8478 4390) (6552) (7958 8574) (7300) (8574) (7084) (6512) (6512) (6556) (8218) (7084) (8476) (6502) (8580 6372) (7086) (7302) (6478) (7084) (8474) (8574) (7086) (8478) (6378 8576) (7298) (6506) (8474) (6512) (6500) (8186) (8476) (7086) (8590) (8474) (8474) (8574) (8276) (8588) (7084) (8476) (8574) (7954) (8574) (7084) (8186) (8574) (8574) (7090) (8476) (8574) (7086) (7914) (6684) (7936) (8192) (8574 7910) (7302) (8474) (8474) (7312) (8580) (8208) (8578 7918) (7324) (8476) (7958) (8576) (8474 8208) (8044) (7908) (7952 8586) (8574) (8582) (8350) (8474) (8220) (8476) (7916) (7910) (8574) (8354 8230) (8222) (8574) (8474) (8586) (8224) (8288) (7960 8576) (7914) (7912) (8584) (8352) (8182) (8574) (8574) (8180) (8572) (8126) (8588) (8248) (8474) (8126 8574) (8354) (8052) (8270) (8238) (8356) (8180) (8574) (8574) (8030) (8186 8272) (8582) (8364) (8174) (8590) (8260) (8120) (8298) (8576 8296) (8598) (8056) (8174) (8278) (8228) (8580) (7906) (8574) (8180) (8226) (8286) (8188) (8472 8588 8292) (8178) (8574) (4660) (8228) (8396) (8326) (8596) (8230) (8174) (8094) (8232) (8308) (8592) (8128) (4594) (8248) (8180) (7904) (8588) (8068) (8234) (8598) (7904) (8146) (8598) (8156) (8124 7904) (4808) (4854) (7902 8058) (7902) (8572) (8120) (7902) (8068) (8578) (4658) (7902) (8580) (8122) (8574) (8114) (4640) (8428) (8584) (7824) (8108) (8186) (8132) (8574 8078) (8180) (8094) (8578) (7898) (4658) (8580) (7898) (8100) (8574) (8190 4678) (8066 7898) (8184 8574 7898) (7898 8582) (8576) (4786) (8184) (8574) (8052) (8580) (8126) (8578) (8188) (7458) (8102) (8576) (7098) (7886) (8048) (8536) (7878 4076) (7500) (8192) (8056) (8126) (8564) (7448) (7792) (8584) (8538) (6954) (7940) (8306) (8522) (6708) (7436 4526) (8098) (5888) (7012) (7464) (7984) (7346) (8524) (8068) (7338 6958) (8158) (8400) (6210) (8534) (8536) (8044 7252) (6438) (6958 5848) (8098) (8534) (7818) (6200) (7404 6964) (8154) (8338) (5706) (7030) (8536 6688) (8180) (4858) (6986 8030) (6354) (8152) (8164) (7206) (8566 4816) (6954) (6364) (7420) (8538) (5470) (6154) (6074) (4942) (6956) (8178) (5516) (8304) (8576 8026) (6982) (8528) (6024) (8184) (6728) (5548) (8034) (8180) (8528) (8182) (5440) (6402 7408) (8466) (8180) (8534) (8180) (7398) (8102) (8180) (6046) (6710) (8264) (8430) (8206 7828) (5424) (8434 8264) (8028 6974) (6154) (6722) (8532) (8096) (5422) (8478) (8434) (8332) (8098) (8040) (6684) (8534) (7812) (8432) (8208) (6702) (5412) (8566) (6154 6048) (8430) (8192) (7194) (6956) (8202) (8080 8434) (8188) (8436) (8100) (8340) (8430) (8200) (8038) (8186) (6188) (5088 8428) (4968 6712 5944) (5386) (8430 7968 7844) (8178) (4972) (7942) (8100) (8432 8184) (5398 4966) (4964) (8436 7814) (8182) (5004) (4404) (4986) (8098) (8434) (4992) (8178) (7094) (8436) (8184) (5188) (4982) (8098 8436) (6714) (8434) (7752) (8192) (8100) (8436) (8186) (6604 8428) (7764) (8434) (8434) (8434) (8436) (7762) (7036) (7764) (8434) (8098) (6448) (8436) (6458) (6050) (7844) (8430) (6466) (8182) (7788) (8098) (8198) (8434) (7770) (8192) (7782) (7570) (8396) (7644) (8190) (8438) (7774 7822) (7596) (8096 8432) (7824) (8434) (7558) (7776) (6278 7836 7632) (7656) (8430) (7962) (7682) (8434 7420) (7508) (8186) (8098) (8462) (7918) (7736) (8436) (8190) (7426) (8434) (7674) (8474) (8438) (8194) (8098) (8202) (8474) (8436) (7422) (8434 8176) (8096) (7470) (8382) (8398) (8194) (7446) (8402) (8096 8210) (8098 7430) (8444) (8096) (8398) (8098) (8374) (7428) (8400) (7780) (8098) (7412) (7816) (8382) (8400) (8390) (8096) (7410) (7906 7420) (8422) (8374) (8480) (8376) (7626) (8096 8344) (7406) (7914) (8098) (8390) (8452) (8346) (7412) (8096) (8196) (8594) (8098) (8338) (8446) (8096) (8098) (7952) (8392) (7984) (7414) (7412) (8096) (8098) (7970) (8012) (8096) (8098) (7408) (8096) (8098) (7938) (7418) (8096) (8098 7404 7978) (7406) (8012) (8096) (8596) (5998) (8582) (8538) (8014) (7406) (8312) (8542) (7938) (7418) (8306) (4478) (7402) (4164) (7602) (7976) (8006 8560) (7942) (8132) (6222) (8464) (8098) (7272) (8014) (8410) (8444 7288) (8096) (8132) (8098) (8132) (6224) (7408) (6226) (7274) (8096) (7402) (7932) (8096) (8036) (7380) (8098) (7378) (8470) (8096) (8098 7316) (8576) (7374) (8096) (8098) (8572) (7360) (8096) (7416) (8098) (7430) (8568) (7216 6882) (8096 7428) (8096) (8098) (7208 6992) (7380) (8096) (8096) (8098) (7380) (8096) (7370) (8098 7288) (7332) (8150) (7188) (8150) (7376) (7380) (7272) (7296) (6608) (7038) (7302) (5006) (7038) (7380) (7378) (7294) (7100) (7268) (7378) (7292) (7300) (7304) (7100) (7294) (7374) (7308) (5196) (7322) (7268) (7294) (7288) (7296) (7376) (7270) (8006) (7272) (7294) (7304) (7290) (7270) (7294) (8148) (7304) (8028) (7132) (8034) (8036) (7306) (7300) (8040) (7312) (7296) (7286) (8030) (7290) (7318 8038 5406) (8034) (7308) (7306) (7316) (7294) (8036) (7296) (8024) (8022) (5372) (7306) (8232) (7284) (8214) (7288) (8010) (8266) (8258) (7304) (8340 5928) (5312) (7596) (8244) (7384) (8128) (8356) (8370) (8256) (7250 8414) (8258 8032) (8366) (8110) (7142) (8212 5936) (8322) (8264) (8308 8022) (8126) (5658) (8366) (8184 8324) (7314) (8322) (8136) (7184) (8202 7994) (8130 8410) (8554) (7084) (8120) (8144) (8166) (8126) (8114) (8198) (7164) (8156) (8002) (8134) (8168) (7148) (8002) (8076) (8146) (8058) (8202 7186) (8150) (7992) (8100) (8152) (8078) (8080) (8150) (8158) (8022) (8152) (8032) (8136) (8184) (7568) (8178) (8202) (8022) (8104) (8068) (7590) (8176) (8174) (7904) (7782) (7520 7308) (8046) (4676) (8166 7252) (7126) (6772) (8002 7758) (6906) (8190) (6500) (8496 7834) (8496) (8400) (6824 5094) (7904 6398) (8498 8394 7306) (8044) (8226) (5050) (7392) (8492) (8068 7310) (7824) (7140) (8192) (8006 6762) (7392 5330) (7674) (7354) (8186) (8412) (6912 7980) (7440) (7512) (7826) (7474 7180) (8052 8490) (6732 7122) (8488) (5344) (6866 7834) (8176 8394 6812) (8488 5048) (6934) (4572) (8038) (7124) (6974) (5470) (8498) (7596 7142) (7640) (7070) (4634) (8180) (8108 8276) (8462) (5334) (8064 7318) (8596) (8496 6922) (7910 6740) (7122) (8392 7626) (7252) (8576 8044) (7984 7910) (8172 7346 4492) (8274 6916) (7834 4900) (8486 7128) (6840) (6796) (8494) (5308) (8008 7012) (8174) (5532) (8064 7348) (8480 6396) (7992) (7400) (6972) (8002) (7136) (8174) (8042) (8298) (4004) (5128) (8176 6976) (7334) (8506) (8316 8392 6826) (8020) (7410) (8010 7118) (5138) (8390) (7236) (7366) (8490) (8388 7174) (7402) (5686) (4410) (7980) (6802) (7048) (8490) (7986 4580) (7332) (8068) (6948) (8250 8120 7352) (7644) (7240) (7258) (8042) (8496) (8122) (8248 7332) (8340) (7270) (8048) (8246) (8382) (5436) (7014 8050) (5688) (4502) (8242 5540) (8368) (8068) (8236) (7006) (8242) (7700) (8060) (6112) (5672) (5674) (8366) (8038 5566) (8406) (6096) (6394) (7922 7848) (6092) (5488) (7852) (8362) (7840) (7938) (7834) (8354) (7940) (7832) (8264) (7940) (7828) (7940) (8290) (7830 8302) (5804) (4268) (7312) (5736) (7944 6496) (7192) (5772) (7948) (6804) (6374) (7832 8276 8424) (8502) (7944) (5696 6450) (7172) (8562) (5844) (7956) (7968) (7964) (7882) (8562) (5840) (7960) (5734) (7834) (6452) (7926) (5806 8400) (7670 8474) (7772 7174) (6900) (4784 8514) (8254 5140) (7948 7098) (7808) (6612) (5880) (8564) (7938) (5664) (7912) (6318) (7834) (7888 5022) (8564) (7894) (4410) (5720) (7948) (8564) (7892) (5822) (7848) (7938) (8570) (8564) (7850 5684) (7960) (7874) (6284) (7942) (8544) (7862) (7936) (7850) (4266) (7946) (7894) (5652) (7928) (5674) (7962) (4268) (7940) (7936) (7948) (7954 5590) (7930) (7932) (6094) (6128) (6100) (8468) (6122) (6310) (8392) (8236) (8358) (6826) (8068) (6378) (6114 8170 4576) (8108) (7052 6612) (8180 7444 5158) (7928) (7102) (7904) (8186) (8524 6300) (6104) (7448) (8218 8370) (8482) (8058) (6106 8204 5522) (6398) (8532 8166) (8386 7946 6804) (7880) (8544) (8170 7910) (6226) (8524) (8162) (7976) (8562) (6994) (6814) (7070) (8528 6196) (8390) (8568) (8222 7022) (8562) (7310) (6476 6230) (8556) (8578) (5554) (8224) (7370) (7366 6184 5572) (8544) (7350) (8392) (7340) (8220 5544) (7366) (8544) (6400) (5562) (6356 8228) (8544) (8352 8234) (5504) (8580 8224) (7326) (6158) (7370) (7312) (8408) (7368) (8222) (5414) (8384 6158) (8362 6144) (7356) (8360) (5604) (8372 6146) (7306) (5664) (8366) (5668) (7302) (8374) (7222 7370) (5662) (6150) (7296) (5616) (6144) (8364) (7294 5568) (8366) (5642 7096) (6188) (5644) (5262) (7290) (6188) (6168) (7300) (8362 8222 6202) (8582) (7302) (8358) (7292) (5664) (7304) (7438) (6150) (7102) (6142) (7300) (6144) (6132) (6128) (7304) (8362 6192) (8598) (8364) (8592) (5572) (7302) (8590) (8586 6148) (8430 7304) (8172) (6102) (6778 7528 8382) (6578 6364) (7850) (6198) (7486) (7856) (7796) (8474) (8216) (8590) (8360) (7894) (8194 6156) (7930 8372) (7846) (8128) (7076) (8596) (7836 7762 7494 8428) (8588 8108) (6172 8216) (8498) (7554) (8190) (8412) (7732) (8222) (8106) (8584) (5778) (8514 8016) (7498 7784) (8112) (7930) (8358) (7512) (8594 8242) (7784) (7296) (7730 7508) (7974) (6482) (5664 8456) (6152 7990) (8150) (8526) (7496) (8048 7686) (6210) (8382 7910) (7886 8104 7964) (6992) (8346) (7788) (6364) (8096 8438) (7912) (8340) (7506) (5774) (7572 7926) (7018 7296 4928) (7736 7066) (8514 8486) (8344 8282 8032) (5990) (8534) (8378 6556) (8202) (8032 4184) (7304 8354 4814) (5790 7570 7072) (7682 8258) (6360) (8546) (5982) (8344 7566 4252) (8152) (6472) (8274 8032 5592) (6934) (6428 8382) (8150) (5564 8494) (6040 6422 8360) (8152 7292) (6578 8026) (5988) (8486) (7570 4668) (6210) (7680) (5592) (8082 7280) (5546) (8430 8244) (7688) (4968 4472) (8382) (7574) (5548) (5952 8030) (7732) (7632) (8320) (8244) (8428) (7570 6360) (8344) (8034) (6036 7570) (7286) (8030) (4974) (8376) (5568) (8484) (6008 8346) (6372) (7912) (7734) (7310 8474) (7926) (7570) (8064) (8336 8206) (6004) (8102) (6882 4950) (7320 8090) (5550) (8098 4936) (5976) (8414) (7254) (4954) (8016) (8280) (7976) (4918) (6196) (8340) (4512) (8030) (7926 4888) (6230) (6894) (8326 7688) (6022) (8250) (6452) (8298) (7722) (7572) (8004) (6002) (8314) (6372) (8298) (7256) (7826) (4816) (8292 6926) (7254) (4956) (8302) (6026) (8152) (6948) (8234) (8042) (8012) (8096) (6060) (8348 8240) (7254) (6084) (6462) (8462) (7634) (8230) (6076) (8330) (6434) (6042) (8444 6472) (8434) (6128) (8324 6444) (6928) (8586) (8526) (7618) (8584) (6086) (6260) (6428) (6068) (7290) (8448) (8516) (7360) (8316) (8322) (7404) (7558) (8312) (8346) (7304) (8002) (8326) (7470) (6382) (8090) (8218) (7558 5440) (6122) (6248) (8454) (6384) (6526) (8304) (6158) (8218) (6940) (7690) (6248) (8394 7564 4826) (8270) (7766) (8030) (7710 7608) (6454) (8520) (8272 8050 4984) (7282) (8468 6614) (7622) (8346) (6320) (8152 7296 5572) (8350 7984) (4094 8412) (6214) (8370 7804 6950 8488) (8226 6498) (8078) (7658) (6784) (8326) (8454) (8084 8238) (7312) (7566 6400) (8352) (7746 6940) (6554) (8008) (5400) (8312 6666) (8424) (8260) (6428) (8480) (8344) (8014) (8302) (6478 7180 4268) (8342 8518 5236) (6732) (6894) (5572) (8308) (7574 7188) (5596 6322) (7314 6682) (4936) (4818) (8452) (8206) (8026 5320) (6926) (7622) (8548) (6388) (7184 5524) (6842 8082) (8528) (8002 7662 5006) (7856) (7338) (8342) (8192) (8446) (6012) (8034) (7578) (7302) (6932 6648) (6316) (7652 6452) (8518) (8364) (6902) (4440) (5508) (6414) (8014 7860) (8352 7654 7570) (7424) (6844) (8006) (7724) (8014) (8206 7308) (7990) (8344 7782 6940) (6832) (7998) (7788) (7412 5362) (7306 6148) (6188) (7676) (7308) (8340) (6102) (8062) (6884) (7098) (6870) (6828) (7620) (7308) (6930) (7580 7304) (7618) (7246) (7294) (7086) (7688) (7574) (7620 7286) (7594) (7646) (7568) (7570) (7262) (7384) (7582) (7700) (7588) (7382) (7286) (7588) (7726) (7256 5590) (7720) (7566) (7612) (7316) (7216 5430) (6104) (7386) (7568) (7370) (7702) (7818) (5546) (7724) (7270) (7262) (7636) (7266) (5452) (7646) (7640) (7822) (6074) (7668) (7822 7262) (7726) (7804) (7674) (7724) (7288) (6068) (8450) (7660) (7574) (7658) (6080) (7570) (6938) (7718) (6090) (5904) (7724 6932) (7928) (7084) (6040) (7698) (7366) (7086) (7796) (7394) (5642) (7086) (7792) (7722) (5648) (7572) (5880) (7170) (7578) (5906) (7022) (8246) (7314) (8448) (8070 8312) (8584) (6872) (7580) (6664) (8384) (7628) (7604) (7568) (8310) (8304) (8156) (7962) (7466 8510) (5004 6002) (7876) (6232) (6484) (7684) (8488) (6464) (6598) (8576) (7414) (6700) (7408) (7702 5246 4932 8440) (8150 7024) (6532 8558) (7420) (7458) (6914 7922) (8278) (7422) (8598) (6448) (8586) (6610) (8546) (8522) (7874 8152 6710) (8380) (7706 4738) (7494) (8524 5090) (8302) (6858) (8516) (6234) (7704) (8100) (8576) (8054) (6840 6628) (8102) (4962) (6548) (7418) (7868) (8096) (7628) (5308) (8572) (6496 7708) (8150) (8036) (8582) (6736) (4742) (8096) (7652) (8300) (7670) (8148) (7868 6628) (8594) (7670 4696) (7420) (6470) (8238) (7670) (6604) (7674 6224) (8150) (8002 5004) (7680) (7312) (7462) (6602) (8096) (8514) (6724) (7690 7112 4886) (7684) (8060 6514) (7416) (6604) (8058) (6428) (7422) (7680) (6462) (7458 6602) (4460) (8090) (6886) (7130) (6608) (8152 7866) (5030) (4586) (7412) (6082) (8274 7944) (8508 8442 8122 7696))) :lonset (quote (0 10 20 40 70 120 190 320 350 460 490 560 660 690 1020 1240 1660 2390 2810 8350 8850 8910 8930 9110 9200 9230 9310 9320 9400 9460 9650 9680 9920 9930 9950 10010 10080 10100 10110 10160 10180 10280 10400 10410 10420 10470 10560 10580 10620 10650 10680 10700 10730 10750 10760 10770 10810 10820 10850 10870 10910 10920 10950 10960 11020 11040 11060 11110 11130 11160 11260 11320 11360 11410 11420 11460 11470 11480 11510 11520 11530 11540 11570 11580 11610 11670 11680 11710 11740 11770 11810 11820 11960 12120 12240 12290 12310 12360 12390 12410 12420 12470 12510 12660 12930 13020 13110 13120 13160 13170 13230 13270 13360 13370 13510 13520 13570 13760 13790 13810 13820 13830 13920 13940 13970 14040 14080 14090 14170 14210 14220 14330 14390 14530 14640 14660 14670 14780 15090 15160 15190 15230 15260 15380 15510 15520 15530 15670 15790 15960 16090 16220 16230 16240 16290 16370 16380 16410 16420 16630 16800 16820 16950 17040 17080 17090 17240 17320 17350 17530 17590 17850 18000 18090 18230 18490 18530 18890 18940 19080 19120 19240 19270 19290 19370 19430 19440 19470 19480 19500 19520 19530 19550 19600 19630 19640 19680 19720 19740 19770 19790 19800 19900 19920 19940 19950 19980 20090 20170 20200 20220 20240 20250 20330 20370 20380 20390 20420 20500 20590 20650 20670 20770 20820 20940 20970 21090 21100 21670 21820 21940 21950 22090 22240 22380 22660 22810 22950 23230 23380 23650 23800 24090 24240 24380 24510 25090 25380 25510 25660 25800 25810 25860 26090 26190 26230 26380 26650 26690 26710 26760 26940 27010 27060 27180 27210 27260 27330 27340 27360 27460 27510 27560 27600 27610 27650 27700 27750 27770 27790 27810 27840 27910 27920 27990 28010 28120 28200 28250 28260 28320 28400 28470 28570 28620 28670 28770 28790 28840 28900 28970 29020 29060 29090 29140 29170 29270 29310 29370 29420 29440 29560 29750 29820 29840 29940 30110 30210 30240 30340 30700 30790 31640 31870 32340 32510 32790 33130 33310 33760 33910 34050 34120 34220 34230 34280 34430 34900 34970 35010 35230 35310 35450 35610 35700 35820 36010 36150 36400 36560 36670 36800 37230 37350 37450 37470 37530 37600 37610 37650 37810 37850 37930 37980 38000 38100 38110 38170 38200 38370 38420 38430 38450 38520 38530 38570 38580 38620 38630 38670 38720 38730 38740 38770 38790 38820 38880 38890 38940 38970 38990 39010 39060 39070 39090 39120 39130 39170 39190 39220 39240 39270 39330 39390 39420 39440 39470 39490 39560 39580 39590 39610 39620 39660 39670 39680 39710 39730 39760 39810 39830 39840 39870 39920 39960 39970 40080 40120 40130 40220 40230 40240 40310 40320 40390 40440 40480 40490 40510 40530 40540 40560 40610 40630 40680 40690 40710 40720 40730 40790 40810 40870 40880 40910 40920 40980 40990 41030 41080 41140 41170 41180 41270 41360 41390 41460 41480 41490 41530 41580 41620 41720 41790 41810 41940 41970 41990 42010 42110 42120 42220 42260 42270 42360 42380 42470 42520 42570 42680 42830 42870 42880 42970 43120 43130 43290 43370 43510 43630 43720 43730 43830 43840 43860 43970 43990 44220 44350 44400 44530 44720 44750 44850 44930 44990 45080 45240 45330 45380 45430 45520 45580 46250 46400 46680 46730 46780 47030 47450 47670 47800 47930 47990 48240 48380 48470 48820 49290 49730 50060 50350 50590 50930 51260 51500 51600 51890 52180 52310 52460 53040 53140 54190 54340 54630 54710 54910 55010 55140 55340 55400 55440 55820 55870 56060 56110 56160 56210 56220 56360 56410 56450 56460 56500 56640 56690 56700 56760 56770 56790 56820 56840 56870 56890 56970 57040 57060 57070 57100 57150 57190 57200 57210 57240 57270 57300 57390 57410 57500 57520 57540 57640 57760 57790 57800 57890 57940 57950 58000 58020 58060 58090 58100 58140 58270 58290 58310 58340 58360 58390 58450 58460 58470 58490 58500 58520 58610 58660 58700 58710 58760 58800 58890 58900 58960 59000 59010 59150 59170 59200 59350 59370 59400 59640 59720 59750 59760 59890 59920 59990 60040 60110 60120 60240 60260 60340 60390 60440 60490 60590 60700 60720 60730 60760 60850 60860 60950 60980 61000 61050 61080 61110 61120 61170 61270 61310 61400 61410 61500 61510 61520 61600 61610 61660 61760 61800 61910 61920 62000 62070 62100 62120 62130 62260 62280 62320 62420 62430 62470 62480 62520 62630 62730 62770 62780 62800 62820 62860 62870 62930 62960 62970 63030 63050 63170 63230 63270 63310 63430 63450 63500 63510 63560 63650 63750 63800 63850 63910 63920 64020 64080 64160 64180 64210 64230 64260 64330 64360 64380 64430 64470 64530 64620 64660 64720 64750 64770 64870 64900 65030 65050 65220 65310 65330 65430 65480 65550 65620 65760 66060 66310 66320 66610 66770 66910 67330 67360 67380 67470 67640 67770 67940 68020 68120 68180 68290 68440 68470 68590 68690 68770 69060 69190 69270 69290 69460 69560 69570 69630 69670 69680 69710 69730 69740 69760 69790 69810 69830 69860 69870 69920 69940 70010 70040 70070 70120 70130 70210 70230 70240 70270 70310 70330 70390 70410 70430 70540 70560 70610 70620 70660 70680 70730 70760 70790 70820 70830 70910 70920 70960 70980 71030 71090 71110 71130 71210 71270 71330 71410 71440 71480 71530 71540 71560 71570 71620 71650 71740 71770 71780 71820 71900 71920 71990 72000 72050 72080 72090 72120 72190 72200 72230 72280 72290 72300 72530 72580 72590 72600 72620 72640 72650 72670 72690 72720 72730 72890 72950 72970 72980 73020 73030 73040 73180 73270 73290 73320 73370 73400 73420 73430 73480 73490 73520 73530 73580 73590 73730 73780 73800 73880 73890 73930 73970 74030 74070 74150 74250 74280 74320 74330 74470 74530 74540 74670 74770 74900 74990 75120 75150 75250 75470 75480 75590 75640 75690 75830 75890 76130 76220 76330 76450 76700 76720 76950 77140 77280 77300 77430 77450 77460 77500 77590 77640 77660 77690 77760 77780 77830 77860 77880 77890 77940 77960 78010 78030 78050 78100 78110 78200 78210 78230 78240 78250 78280 78300 78340 78360 78380 78480 78610 78630 78640 78750 78780 78790 78890 78900 78930 79000 79050 79100 79240 79290 79300 79450 79480 79590 79600 79610 79630 79660 79680 79690 79700 79710 79760 79780 79790 79830 79850 79860 79880 79890 79900 79950 79990 80000 80030 80090 80100 80150 80160 80190 80240 80290 80310 80360 80380 80400 80450 80500 80510 80550 80560 80580 80610 80690 80700 80710 80740 80750 80780 80790 80800 80810 80840 80880 80950 80990 81010 81050 81060 81100 81110 81150 81180 81200 81210 81240 81260 81290 81300 81310 81350 81380 81410 81430 81490 81500 81530 81560 81600 81610 81630 81680 81690 81700 81750 81760 81780 81790 81810 81860 81890 81930 81950 81960 82030 82060 82090 82110 82160 82190 82200 82250 82290 82390 82510 82540 82600 82760 82790 82900 82910 83010 83140 83170 83310 83320 83390 83400 83420 83470 83520 83560 83620 83720 83750 83790 83800 83820 83890 83940 83990 84000 84060 84150 84190 84260 84350 84360 84400 84410 84520 84620 84850 85110 85120 85260 85420 85520 85560 85990 86140 86420 86850 87140 87270 87420 88140 88270 89420 89560 89850 89980 90270 90560 91420 91710 92270 92420 92710 92720 92850 93130 93270 93420 93560 93990 94180 94210 94730 95040 95730 95860 96040 96610 96730 97040 97370 97530 97560 97580 97610 97620 97660 97670 97680 97690 97760 97780 97790 97830 97840 97860 97870 97890 97920 97930 97940 97990 98030 98060 98070 98080 98110 98140 98160 98230 98270 98280 98310 98330 98370 98390 98430 98490 98520 98530 98570 98610 98630 98660 98670 98710 98730 98740 98810 98820 98830 98870 98880 98890 98920 98960 98970 98990 99070 99090 99110 99120 99130 99170 99180 99190 99220 99240 99250 99280 99320 99330 99350 99370 99430 99470 99480 99520 99540 99550 99570 99690 99730 99750 99780 99790 99830 99870 99880 99890 99940 99980 99990 100000 100080 100090 100150 100170 100180 100200 100240 100270 100330 100350 100380 100400 100420 100430 100470 100480 100490 100500 100520 100550 100620 100650 100670 100680 100720 100730 100740 100820 100830 100840 100880 100950 100980 101020 101030 101080 101090 101120 101140 101170 101200 101230 101300 101330 101420 101430 101440 101470 101490 101680 101820 101840 102250 102430 102450 102550 102590 102600 102620 102690 102740 102800 102830 102870 102890 103050 103070 103080 103120 103200 103230 103280 103290 103300 103370 103380 103420 103470 103520 103540 103630 103680 103940 104130 104140 104150 104190 104240 104280 104320 104420 104490 104530 104590 104600 104690 104710 104750 104790 104840 104850 104900 104930 105010 105040 105140 105160 105200 105230 105250 105260 105280 105290 105310 105330 105350 105430 105440 105460 105500 105530 105610 105630 105660 105730 105760 105780 105790 105800 105830 105890 105900 105960 106050 106060 106080 106150 106280 106290 106350 106400 106410 106840 106950 107130 107280 107360 107390 107490 107800 107930 107960 108100 108110 108180 108190 108200 108210 108300 108310 108400 108590 108850 108910 108950 108980 109540 109690 109960 110320 110590 112590 112620 112850 113160 113400 113770 114510 115850 116110 116870 117010 117050 117080 117170 117210 117260 117270 117320 117330 117350 117400 117410 117450 117460 117500 117550 117570 117580 117630 117700 117710 117720 117760 117780 117810 117830 117850 117860 117900 117930 117950 117960 117980 118010 118020 118030 118050 118080 118100 118110 118200 118210 118220 118230 118350 118380 118410 118420 118480 118510 118520 118530 118550 118560 118680 118700 118830 118870 118950 118980 119000 119230 119560 121480 121560 122010 123060 123140 125430 125710 125990 126020 126110 126190 126220 126260 126320 126340 126390 126410 126540 126560 126640 126680 126790 126890 127050 127130 127180 127220 127350 127450 127570 127870 127920 128020 128170 128200 128250 128280 128300 128330 128340 128380 128420 128800 128920 128950 128980 129100 129220 129480 129750 129770 129820 130050 130090 130140 130150 130220 130230 130320 130380 130540 130670 130800 131800 132780 132900 133110 133450 133850 136300 136430 136560 136590 136650 136660 136680 136710 136730 136750 136760 136790 136860 136890 136900 136910 136930 136950 137000 137010 137030 137050 137150 137190 137210 137230 137280 137290 137300 137330 137340 137390 137400 137410 137490 137560 137580 137590 137610 137630 137640 137650 137680 137820 137850 137870 137890 137900 137970 138070 138090 138100 138110 138190 138210 138240 138270 138290 138300 138450 138490 138500 138560 138640 138660 138700 138710 138750 138810 138820 138840 138850 138990 139190 139240 139410 140520 147210 147700 147860 148010 148060 148080 148230 148250 148330 148450 148470 148620 148630 148750 148810 148820 148870 148920 148930 148960 148990 149010 149060 149080 149110 149160 149190 149210 149260 149270 149280 149290 149320 149330 149340 149360 149380 149420 149440 149460 149480 149530 149540 149580 149590 149630 149660 149670 149680 149690 149720 149740 149760 149770 149790 149830 149920 149930 149970 149990 150010 150040 150080 150110 150120 150140 150170 150180 150220 150230 150260 150290 150310 150360 150530 150540 150560 150610 150660 150740 150770 150830 150870 150920 150940 150980 151060 151080 151130 151140 151180 151340 151430 151440 151480 151560 151690 151710 151730 151760 151830 151860 151910 151960 151970 151980 152030 152110 152170 152180 152210 152230 152360 152420 152430 152690 152780 152890 153060 153180 153220 153360 153620 153810 153910 154290 154650 155230 155240 155330 155450 155540 155700 155720 155770 155780 155800 155820 155830 155840 155970 155980 156050 156070 156080 156100 156130 156140 156150 156170 156200 156220 156250 156270 156290 156300 156340 156370 156390 156400 156430 156530 156550 156580 156590 156670 156800 156930 156950 157090 157250 157270 157330 157930 160690 161550 161610 161680 161860 161880 161940 161950 161960 162060 162080 162100 162140 162180 162210 162250 162280 162300 162400 162410 162430 162440 162530 162630 162650 162660 162680 162750 162760 162860 162890 162900 162930 162960 163000 163010 163040 163050 163060 163080 163200 163230 163240 163300 163410 163490 163500 163540 163550 163580 163640 163690 163700 163710 163810 163840 163930 163940 163950 164140 164160 164180 164210 164250 164280 164300 164380 164440 164460 164480 164550 164660 164680 164690 164840 164910 164950 165000 165010 165140 165360 165460 165470 165670 165690 165740 165850 165940 166010 166110 166390 166410 166620 166740 166770 166850 166890 166970 167000 167110 167360 167410 167470 167610 167720 167790 167810 167820 168040 168160 168260 168290 168370 168600 168620 168690 168700 168760 169020 169140 169220 169310 169440 169590 169600 169610 169750 169770 169790 170040 170120 170160 170170 170240 170410 170440 170520 171080 171430 171480 171820 172080 172210 172220 172360 172420 172430 172450 172620 172710 172750 172810 173080 173130 173270 173530 173560 173650 173780 173860 173970 174020 174060 174080 174230 174280 174400 174410 174560 174960 174980 175000 175010 175060 175070 175080 175130 175160 175170 175210 175260 175270 175310 175360 175410 175430 175530 175560 175570 175600 175630 175660 175670 175710 175720 175730 175750 175780 175800 175810 175820 175850 175860 175900 175920 175960 175970 176010 176020 176050 176060 176080 176110 176120 176150 176200 176210 176250 176260 176270 176280 176320 176330 176380 176390 176410 176490 176560 176570 176590 176610 176630 176640 176680 176710 176760 176790 176810 176840 176880 176940 176960 177020 177030 177120 177130 177170 177190 177210 177260 177320 177340 177390 177430 177460 177490 177520 177540 177590 177610 177620 177640 177720 177730 177780 177810 177870 177890 177930 178040 178060 178170 178240 178440 178520 178540 178610 178740 178760 178870 178880 178890 179010 179020 179040 179080 179130 179140 179210 179260 179280 179370 179390 179430 179530 179610 179680 180020 180060 180140 180160 180580 180590 180630 180660 180760 180870 180890 180920 180940 181080 181170 181210 181370 181430 181490 181510 181760 181780 181790 181850 181890 181970 182070 182080 182180 182190 182230 182300 182330 182350 182520 182570 182590 182700 182830 182920 183020 183040 183240 183440 183490 183590 183730 183740 183800 183870 183930 184120 184140 184170 184200 184300 184440 184490 184650 184750 184790 184870 184890 185070 185340 185440 185470 185500 185630 185750 185840 186050 186140 186180 186230 186280 186390 186520 186620 186730 186740 186820 186870 186920 187000 187040 187070 187200 187400 187500 187540 187710 187800 187890 188030 188130 188160 188240 188260 188460 188490 188560 188590 188710 188740 188830 188890 188940 189040 189140 189200 189260 189280 189340 189390 189460 189480 189560 189590 189630 189660 189740 189750 189800 189880 189900 189910 190000 190030 190040 190130 190140 190200 190290 190300 190340 190360 190440 190480 190490 190560 190650 190780 190800 190860 190880 190890 190900 190930 190960 191030 191060 191100 191110 191160 191180 191210 191250 191300 191330 191340 191460 191480 191630 191690 191700 191780 191800 191840 191900 191930 191980 192130 192180 192310 192340 192380 192460 192530 192610 192630 192790 192900 193010 193110 193140 193170 193190 193290 193320 193350 193420 193460 193470 193570 193720 193860 193900 193940 194060 194160 194250 194290 194440 194610 194720 194890 194910 194920 195040 195060 195100 195190 195270 195360 195370 195460 195500 195550 195560 195670 195770 195790 195800 195910 195960 196000 196020 196050 196060 196070 196110 196140 196150 196220 196240 196270 196310 196350 196360 196390 196510 196550 196560 196600 196610 196620 196640 196750 196770 196790 196810 196820 196860 196910 196950 196960 196970 197000 197040 197110 197190 197200 197250 197260 197300 197350 197370 197420 197440 197460 197470 197510 197520 197550 197590 197610 197660 197710 197740 197750 197840 197850 197860 197950 197960 197970 198000 198040 198060 198100 198150 198170 198200 198240 198250 198270 198360 198400 198430 198460 198560 198570 198580 198610 198620 198650 198710 198720 198750 198760 198770 198780 198810 198820 198860 198870 198900 198910 198960 198980 199000 199010 199030 199100 199150 199170 199260 199310 199400 199470 199480 199550 199580 199600 199630 199680 199750 199860 199880 199900 199920 199970 199980 200050 200060 200130 200250 200410 200470 200480 200520 200600 200620 200730 200800 200810 200850 200920 200950 201030 201130 201260 201350 201420 201450 201650 201900 201930 202020 202100 202170 202270 202450 202570 202780 202850 202960 203030 203070 203110 203210 203250 203350 203380 203410 203460 203470 203560 203600 203680 203750 203760 203800 203880 203910 203940 203970 204020 204070 204140 204160 204210 204260 204320 204360 204370 204440 204480 204620 204640 204680 204810 204830 204840 204910 204970 204980 204990 205020 205120 205140 205210 205230 205240 205420 205510 205520 205530 205740 205780 205910 205920 206020 206110 206220 206240 206420 206460 206570 206660 206680 206820 207180 207260 207290 207380 207480 207560 207620 207890 207960 208060 208080 208260 208410 208510 208530 208560 208680 208740 208780 208830 208870 208920 209110 209180 209220 209240 209330 209340 209370 209600 209680 209700 209740 209800 210080 210200 210250 210380 210390 210680 210780 210820 210900 210950 211080 211130 211220 211530 211650 211800 212100 212230 212520 212530 212680 212800 213100 213200 213250 213770 213890 213940 214340 214450 214520 214570 214670 214720 214780 214800 214880 214890 214910 214930 214980 215060 215130 215230 215250 215260 215290 215360 215480 215540 215550 215680 215800 215860 215930 215950 216180 216200 216230 216250 216310 216360 216380 216430 216450 216500 216610 216790 216950 217080 217300 217510 217530 217650 217880 217940 218100 218200 218230 218540 218650 218660 218680 218800 218930 218980 219090 219250 219380 219500 219690 219950 219960 220080 220300 220440 220520 220700 220740 220810 220920 221290 221590 221660 221790 221850 221910 221950 222090 222120 222390 222650 222810 222990 223170 223320 223450 223500 223600 223700 224020 224070 224260 224360 224440 224570 224740 224790 224890 224920 225120 225440 225520 225650 225790 225970 226000 226170 226280 226320 226580 226650 226670 226730 226800 226830 226930 227010 227070 227310 227430 227510 227560 227660 227700 227720 227930 228020 228280 228460 228560 228600 228700 228780 228970 229010 229170 229210 229260 229330 229350 229380 229400 229470 229500 229510 229550 229620 229630 229670 229700 229710 229720 229810 229820 229850 229870 229900 229910 229950 230120 230200 230210 230230 230300 230320 230350 230400 230520 230600 230670 230720 230800 230910 230920 231030 231130 231180 231230 231320 231330 231430 231520 231580 231690 231740 231930 231940 232080 232190 232290 232340 232420 232620 232730 232910 233060 233170 233320 233530 233620 233870 233890 233960 234030 234090 234120 234210 234240 234320 234330 234340 234360 234370 234390 234440 234460 234510 234560 234570 234580 234670 234680 234740 234760 234770 234780 234860 234870 234880 234940 234960 234980 235010 235020 235030 235040 235080 235120 235170 235210 235220 235230 235240 235280 235310 235330 235340 235360 235370 235410 235420 235490 235520 235530 235540 235570 235590 235620 235640 235680 235690 235730 235740 235760 235780 235790 235820 235840 235870 235880 235890 235940 235970 235980 235990 236010 236080 236090 236140 236160 236190 236240 236260 236310 236320 236340 236360 236380 236390 236440 236480 236530 236570 236610 236630 236660 236670 236720 236730 236740 236760 236770 236820 236830 236890 236920 237030 237070 237080 237090 237120 237130 237170 237200 237240 237270 237280 237290 237350 237370 237380 237480 237520 237530 237550 237690 237700 237720 237740 237780 237790 237820 237940 238030 238140 238150 238200 238230 238240 238250 238350 238440 238500 238540 238570 238670 238700 238840 238920 238940 239090 239250 239380 239540 239690 239790 239870 239930 239970 240090 240120 240190 240200 240380 240550 240730 240790 240800 240870 240980 241000 241050 241170 241200 241240 241280 241300 241330 241340 241380 241470 241490 241500 241540 241640 241680 241690 241700 241720 241730 241770 241900 242020 242120 242150 242270 242280 242350 242380 242390 242460 242500 242540 242550 242560 242580 242590 242610 242710 242750 242760 242850 242910 242950 243190 243280 243290 243310 243340 243360 243380 243390 243500 243530 243590 243740 243780 243850 243880 243960 243980 244030 244100 244110 244150 244190 244250 244380 244600 244610 244660 245260 245390 245480 245830 245860 245900 246040 246110 246260 246410 246740 246930 248070 249770 249960 250360 250400 251410 253860 253870 253970 254000 254010 254070 254080 254100 254110 254120 254130 254160 254210 254220 254250 254270 254300 254310 254420 254520 254550 254600 254650 254660 254670 254770 254800 254850 254870 254980 255000 255010 255110 255230 255250 255260 255280 255380 255550 255560 255650 255700 255730 255820 255830 255970 255980 256120 256170 256210 256260 256350 256410 256470 256530 256550 256560 256700 256810 256830 256850 256970 257060 257120 257150 257280 257410 257500 257550 257560 257700 257830 257930 257980 258100 258120 258130 258250 258270 258380 258410 258850 258910 258960 258980 258990 259110 259120 259130 259240 259270 259390 259410 259530 259680 259790 260120 260560 260570 260690 260810 260840 260980 261110 261120 261240 261390 261560 261590 261690 261820 261830 261980 262120 262270 262410 262440 262560 262590 262630 262710 262740 262830 262840 262960 262970 263090 263130 263170 263180 263210 263270 263280 263330 263380 263390 263460 263520 263530 263540 263580 263610 263620 263640 263710 263720 263730 263770 263810 263820 263830 263920 263940 263970 264040 264070 264130 264170 264180 264190 264220 264280 264370 264380 264420 264430 264450 264470 264480 264490 264500 264540 264570 264580 264590 264620 264650 264670 264680 264690 264720 264740 264800 264850 264870 264890 264920 264930 264940 264970 264990 265000 265020 265040 265070 265090 265100 265120 265130 265140 265180 265220 265240 265250 265300 265340 265370 265390 265420 265430 265440 265490 265520 265530 265550 265580 265620 265640 265650 265730 265740 265780 265820 265830 265900 265920 265930 265950 265970 266040 266050 266070 266080 266100 266120 266180 266250 266270 266290 266300 266330 266350 266370 266380 266390 266520 266550 266570 266590 266630 266670 266720 266740 266770 266790 266820 266830 266880 266890 266950 266970 267020 267040 267050 267090 267100 267170 267220 267230 267240 267270 267280 267290 267340 267380 267390 267500 267530 267540 267590 267600 267680 267690 267750 267790 267900 267970 268040 268050 268070 268120 268250 268320 268340 268370 268430 268480 268520 268570 268580 268650 268690 268730 268840 268870 268920 268930 269020 269050 269070 269090 269220 269430 269450 269500 269590 269620 269650 269670 269750 269790 269870 269880 269940 270090 270160 270230 270690 270940 271560 271760 271780 272200 272760 272900 272960 273050 273160 273200 273240 273330 273350 273390 273400 273410 273480 273540 273560 273590 273600 273610 273630 273650 273660 273680 273690 273730 273750 273760 273780 273790 273800 273810 273840 273850 273890 273900 273940 273950 273960 273980 274010 274030 274060 274090 274100 274110 274130 274140 274160 274190 274200 274230 274240 274260 274290 274300 274310 274330 274360 274380 274400 274440 274450 274480 274490 274510 274530 274540 274560 274600 274610 274630 274650 274680 274700 274710 274740 274750 274760 274790 274810 274840 274880 274890 274900 274910 274950 274980 274990 275000 275030 275050 275080 275090 275100 275130 275150 275210 275230 275280 275300 275330 275340 275350 275360 275390 275410 275450 275480 275500 275510 275520 275600 275620 275640 275690 275740 275790 275800 275820 275850 275860 275900 275920 276050 276240 276500 276560 276650 277110 277210 277320 277350 277450 277770 278140 278900 279020 279140 279250 279490 279640 279960 281030 281200 281350 281400 281450 281500 281580 281670 281710 281800 281900 281910 281930 282050 282070 282110 282170 282210 282220 282310 282320 282330 282350 282480 282520 282560 282580 282610 282620 282670 282680 282730 282800 282830 282880 282950 283000 283010 283030 283110 283160 283230 283260 283310 283360 283410 283450 283460 283580 283600 283650 283860 283950 284000 284030 284050 284130 284220 284230 284260 284280 284300 284450 284520 284620 284720 284770 284860 285160 285170 285200 285270 285420 285450 285460 285660 285710 285730 286060 286170 286270 286580 287010 287040 287260 287490 287540 287570 287580 287610 287640 287730 287770 287780 287790 287840 287910 288010 288020 288030 288060 288080 288130 288160 288260 288280 288490 288520 288590 288660 288670 288680 288710 288720 288730 288740 288770 288810 289180 289190 289210 289220 289240 289280 289310 289320 289360 289370 289420 289440 289480 289740 289810 289830 289870 289890 289910 289940 289960 289980 289990 290020 290060 290220 290310 290510 290530 290540 290560 290590 290660 290710 290980 291060 291070 291140 291220 291230 291670 291740 291760 291770 291780 291790 291810 292400 292420 292430 292930 292940 293020 293030 293070 293080 293570 293590 293620 293830 294200 294230 294250 294270 294870 294880 294970 294980 294990 294990)) :ldur (quote ((38220 41960 10810 11610 10570 10860 26550 10200 11760) (10090 19580 9610 530 60 10270 350 80 10190) (200 230 720 270) (61160) (9760) (90) (330) (130) (1170) (56930) (100) (560) (210) (350 100) (17200) (8680) (50) (30) (50) (9520) (960) (640) (3980 40) (50) (70 60) (200) (1490) (6640) (200) (1860) (260 50) (40) (80) (820 130) (50) (1210) (40) (16950) (73980) (1110 220) (220) (70) (250 60) (160 50) (60) (50) (60) (28530) (140) (30) (120) (100) (80) (70) (4870) (490) (470) (60) (50 180) (220 100) (110 90 2100) (90) (80) (100) (170) (180) (100) (30) (60) (110) (170 260) (100) (130) (22670) (29450 7200) (730) (50) (50) (110 80 1880) (110) (130) (50) (120) (40) (15140) (90 360 100) (110) (34510) (50) (160) (30) (90) (100) (190) (150) (140) (50) (7570) (80) (50) (200) (690) (60 80) (30) (60) (120) (6830) (2700 490) (50) (100) (190 530 100) (70) (70) (120) (360) (60) (40) (80) (190) (230 250) (90) (80) (70) (190) (170) (80) (340) (5260 50) (40) (60) (400 210) (40) (170) (260) (50) (70 450) (60) (110) (90 200) (30) (40) (60) (100) (80 50) (800) (40 90) (680) (190) (280 40) (610 50) (80 70) (3530) (40) (230 90) (80) (770) (1420 450) (70) (70) (90) (100) (70) (40 80) (260) (70) (130) (230) (2180) (90) (110) (160) (50) (50) (20790) (90) (410) (60) (80) (590) (210) (1270) (90) (250) (430) (110 100) (40) (290) (70 180) (9880) (80) (870) (20140 8180) (620 50) (180) (70) (590) (240) (50) (110) (7210) (140) (100 70) (900) (50 270) (350 50) (40) (50) (80) (270) (400) (13560) (100 60) (220) (460) (6080) (40) (6310) (50) (70) (80) (14670) (110) (720) (170) (360) (270) (60) (5580) (50) (60) (40) (90) (100) (40) (210) (80) (2940) (1210) (70) (60) (990) (80) (60) (1370) (30) (80) (160) (30) (40) (1050) (110) (180) (13260) (260) (60) (30) (8400 7270) (110500 15320 50) (490) (80) (1830 270) (590) (370) (450) (80) (50) (70) (70) (90) (80) (430) (60) (50) (120) (100) (90) (590) (90) (50) (28760) (230) (120) (100 130) (80) (200) (40) (50) (190) (10520) (110) (320) (910) (230 70) (90) (320 80) (100) (250) (100) (460) (50) (100) (80) (40) (60) (200) (27890) (40) (40) (50 80) (50) (730) (50 150) (40 40) (70) (50) (50) (50) (360) (2010) (80) (2830) (30) (80) (80) (70) (1690) (30) (40) (500) (4250) (40) (37240) (1030) (22430) (180) (4790) (670) (30) (40 2960) (4670) (2530) (90) (70) (50) (70) (140) (90) (70) (70) (50) (50) (70) (3050) (30) (30) (40) (40) (220) (100) (80) (270) (80) (80) (40) (1660) (70 940) (390) (490) (60) (40) (80) (70) (60) (410) (1010) (400) (50) (40) (1060) (70 120) (40 250 100) (80) (40) (40) (170) (270 120) (50) (190) (70) (90 210 50) (120) (30 50) (70 450) (240 50) (740 100 450) (1650 1700) (40 150) (400) (50) (400) (100 540) (100) (90) (70 50) (40) (80) (690) (80) (110 70) (63000) (21260 150) (50) (5370 260) (130) (1810) (90) (150 70) (40) (60) (270) (18110 1140 4660) (250 430) (50) (200) (130) (40) (340 560) (370 100) (21020 16760) (240) (200) (80) (80 130) (170) (100) (40) (90) (570) (180) (50) (240) (38690 70 70) (30 30) (1030) (80) (130) (30) (340) (110 60) (70) (16390 50) (450) (1050) (30) (210) (90) (80 40) (190) (880) (70) (60) (40) (160) (260) (90) (130) (140) (70) (550) (40) (70 570 120) (60 40) (1440 90) (50) (250) (540 270) (40) (100) (120) (190) (40) (620 30) (40) (580) (13810) (70 60) (90) (390) (180) (60) (2150) (80) (110 110) (6130) (450 40 110) (50) (60) (130) (40) (40 50) (40) (90) (90) (110) (220) (210) (30 120) (40 40) (40) (210) (24640 60) (80) (70) (40) (60) (40) (80) (40) (40 40) (70) (30) (160) (420) (50) (40) (160) (60) (410) (80) (110) (120) (40) (110) (130) (70) (310) (21600) (400) (200) (200) (150) (250) (30 200) (150) (60) (100) (100) (100) (70) (200) (60) (100) (60) (100) (100) (8590) (70) (100) (1910) (60) (2460) (30) (650) (150) (50) (60) (850) (160) (70) (5160) (430 90) (140) (40) (310) (50) (300 50) (40 40) (90) (70) (70) (2290) (4010) (750 40 130) (19950) (1600) (60) (140 180) (130 100) (140) (26670 40) (70) (160) (80) (60) (100) (90 50) (1110 60) (100 280) (100) (130) (480) (310 110) (1430) (80 60) (290) (430) (50) (110) (390) (670) (140) (100) (170) (110) (220) (50) (60) (110) (130) (1020) (60) (40) (12400) (2240) (90) (150 400 70) (50 1260 100) (180) (140) (10500) (40) (50) (250) (100 70) (150) (1720) (100) (500) (180) (60) (390) (100) (11430) (160) (400) (110) (290) (60) (370) (120) (110) (810) (430) (60) (60) (60) (19360) (110 60) (30) (720) (130) (310) (70) (110) (110) (8810 100) (70) (10230 1190 180) (70) (1600) (50) (8580) (80) (160 60) (1460) (110) (1460) (720) (70) (90) (50) (110) (110) (60) (60) (210) (370) (80) (80 80) (280) (380) (60) (40) (5510) (250) (110) (40 200) (40) (130 280) (330) (790) (50) (180 15370) (50) (70) (1370) (480) (50) (54860) (70) (60) (190) (130) (380) (240) (1270) (14770 6240) (440) (9160) (60 180) (50) (250) (50) (60) (70) (350 80) (70) (100) (90) (80) (220) (40) (4490) (60) (70) (90) (220) (40 70) (80) (80) (210) (190) (60) (13980) (510) (260) (100) (50) (400) (120) (370) (80) (1600) (70) (2830) (100) (30) (660) (100) (100) (450) (390) (50) (500 70) (700) (60) (80) (50) (260) (440) (140) (40) (120) (1070) (250) (120) (350) (100) (1480) (300) (5000) (210) (670) (490) (800) (170) (60) (190) (40 40) (1070 70) (23770) (130) (40) (750) (50 100) (130) (30) (60) (50) (1400) (50) (90) (280) (50) (200) (1950) (50) (60) (40) (190) (160) (30) (40) (70) (300) (90) (370) (80) (100) (120) (50) (530) (23560 40) (9400) (70) (90 90) (1170) (60) (140 150) (7050) (50) (140) (220) (50 170) (40) (1690) (120) (40 150) (70 150 70) (80) (60) (7280) (50) (130) (60 230) (30) (100 50) (60) (130) (470 240) (150) (90) (1060) (50) (40) (190 70) (900 60) (40) (30) (140) (70) (220 290) (70 70) (80) (90) (50) (300) (80) (120) (70) (50) (70) (50) (190) (50) (290 470) (9040) (590) (530) (50) (130) (220) (80) (100) (200) (940) (120 70) (30) (140) (30) (590) (50) (4700) (170) (60) (60) (210 100) (6620) (60) (70 40) (50) (80) (240 60) (60) (4100) (50 210) (90) (220 80) (4100) (110) (110) (400) (40) (90) (60 230) (100) (270) (330) (30) (190) (300) (70) (17050) (800) (100) (60 1300) (60) (80) (60) (110 100) (150) (3700) (70) (220) (310) (110) (350) (1200) (70) (290) (90) (60) (190) (310 60) (2200) (40) (50) (70) (500) (120) (30 30) (110) (550) (130) (4340) (80) (80 60) (130) (180) (700 100) (50 80) (80) (40) (60) (300) (80) (260) (1080) (29920) (60 60) (120 40) (620) (1140) (18890) (60) (1590) (50) (100) (60) (4190) (100) (90) (70) (670) (260) (80) (120 110) (100) (40) (50) (70) (70) (120) (210) (200) (280 230) (900 440) (30) (70) (230) (60 400) (150) (130) (90 740) (40) (140) (110) (60) (18330) (60) (310) (18330) (240) (100) (190 40 17190) (40) (50 380) (70) (1460 50) (50 310) (60 80) (530) (40) (50) (130) (110) (670) (40 670) (110) (320) (70) (700) (520) (70) (50 400) (40 1300) (350) (130 60) (130) (110 60) (180) (60) (50) (160) (140 220) (330) (15890) (350) (130 90) (120) (80 2000) (4000) (80) (90) (580) (110) (290) (60 30 1640) (100) (60) (70) (40) (100 80) (90) (60 50) (230) (170 60 170) (110) (60 250) (700 70) (50) (160) (150) (80) (70) (12290) (240) (50) (60) (90 120) (1050) (250) (420) (390) (130) (60) (110 50) (140) (1290) (120) (120) (400) (80) (400) (860) (20220) (1310 150) (320) (240) (340) (70) (70) (430) (790) (170 80) (360) (940) (70) (14060) (950) (210) (40) (230) (50) (260 60) (1250) (100) (70 200) (130) (510 60) (40) (150) (12260 8920) (190) (48840) (3080) (70) (80) (2080) (40) (250) (690) (50) (30) (60) (80) (50) (30) (50) (40) (60) (60) (60) (70) (30) (230) (60) (1690) (50) (90) (90) (260) (440) (45840) (80) (80) (4910) (40) (50) (80) (750 460) (2500) (90) (90 1750) (90) (80) (90) (80) (90) (90) (2050) (500) (320) (190) (2410) (210) (20320 1280 70) (90 90) (60) (120) (80 30 1730) (100) (290) (60) (670) (80) (2080) (320 70 220) (100 1120) (710) (490) (70 100) (560) (100 200) (50) (100) (50) (290 70) (200) (950) (760 40) (140 60) (170 30) (40) (200 70) (230) (60 80) (120) (4720) (2620) (190) (30 50) (130) (1560 200 70) (60) (150 480) (50 40) (1090 120) (50) (190) (40) (160) (50) (80 150 40) (40) (120) (210 650) (170) (280) (1900) (30 50) (50) (710) (160 400) (250) (610) (80) (100) (18070) (40) (100) (250 60) (4670) (120) (18450) (30) (120) (30 60 60) (610) (230) (280) (860) (290) (26440 70 540) (200) (100 110) (60 60 320) (30) (1170 390) (100) (80) (60) (140) (70) (100 170) (60) (120) (520) (240) (22970) (180) (150) (110 100) (270) (100 890 160) (400) (80) (200) (50) (110) (40) (200) (60) (190 50) (60) (130 40) (210) (450) (60) (70) (90) (110) (3880 160) (310 100 510 140) (300) (520) (60) (8510) (2490 70 120) (50) (60 60) (6340) (640 50) (30) (2030 740) (70) (2850) (50) (350) (150) (200 60) (30) (7300 60) (60) (1280) (1200) (170) (2420) (90) (570 170) (500) (50) (30) (910) (110) (15320) (40) (60) (140 130) (90) (60 470) (90 2200) (4770) (900) (40 1320) (60) (40) (80) (70 130) (1000) (100) (30) (1320) (50 550 50) (550) (590) (40) (390) (160) (80) (560) (60) (220) (80) (30 3730) (210) (950 60) (1590 710) (150) (150) (5610) (80 1500) (40 310 250) (770) (340 150) (40 60) (50) (880) (70) (2800) (80) (110 100) (30 80) (2750) (600) (30 30) (70) (120) (160 650) (80) (250) (50 40) (170) (500 110) (30) (40) (1800) (70 480) (60) (40) (300) (40) (80) (100) (160) (12710) (90) (710) (43620) (160) (110) (30) (1200) (140) (90) (40) (200) (2980) (120) (30) (220) (360) (750) (60 110) (230) (320) (540) (50) (13260) (40) (41390) (370) (60) (520) (460) (1110) (160) (8150) (610) (60) (3860) (7620) (3190) (7080) (120) (2000) (6000 40) (60) (4100) (2710) (40) (100) (160) (1700) (710) (60) (100 160) (90) (40 40 19130) (860) (40 12610) (460) (90 90 630) (40 420 390 50) (70 60) (30 1830) (100) (210) (60 120 410) (130 30) (70) (50) (1290) (220 40 1090) (330) (120) (60) (650) (15080) (260) (15850) (80) (470) (130) (130) (20700) (750) (90 70) (210) (90) (90) (30) (40 1490) (110) (170 340) (70) (40) (11650) (70 300) (120) (290) (60) (40) (380) (50) (350 140) (70) (47120) (50) (120) (250) (120) (710) (220) (7590) (50) (29640) (2360 10190) (80) (6420) (1030) (5110) (4360) (40) (300) (130) (120) (520) (11210) (140 90) (580) (190) (100) (24030) (80) (10260) (80) (250) (100) (90) (22190) (3430) (110) (140) (1570) (180) (120) (1400) (120) (130) (1130) (130) (70) (100) (260) (50) (150) (390) (540) (180) (920) (80) (230) (7600) (120) (220 3170) (8290) (2020) (7140) (430) (2250) (80) (240) (40) (50) (90) (30) (70) (40) (30 80) (400) (940) (80) (240) (330) (980) (160) (500) (30) (330) (290) (110) (650) (800) (70) (800 700) (140) (250 140) (800) (500) (92430 370) (11110 310) (220) (120 320) (80) (40) (100) (220) (14470) (80) (60) (70) (200) (130 980) (240 40) (28340 80) (130) (11920 110) (430) (50) (130 480) (8140) (490) (30) (120) (410 990) (1130) (480) (40) (70) (40) (170) (100) (14870) (340) (220) (130) (39420) (100) (40 90) (220) (80) (18130) (120) (400 9140) (210) (1420) (370) (40) (130) (60) (350) (690) (510) (11520) (180) (70) (100) (40) (70) (80) (1500) (90) (70) (16120) (1540) (36440) (2120 8410) (90 7210) (50) (330) (50) (100) (70) (50) (90) (990) (70) (180 60) (1470) (40) (120) (50 140) (60) (90) (200 60) (11500 220) (80 790) (60) (200) (50) (30 50) (60) (40) (90) (100) (160 90) (150 40 260) (70) (1260) (100) (90 100) (100) (220) (160 14850) (400) (7230 420) (40) (70 70 50) (50) (12190 70) (50) (60) (50) (160 1090) (80) (110 220) (400) (50) (100) (120) (90 150) (320) (3590) (420) (90) (50 180) (100) (1310 50) (200) (90 100) (790) (250) (140) (60) (53680 240) (120 130) (130) (260) (11960) (220) (70) (30) (150) (1440) (110) (250) (90) (100) (90) (50) (90) (480) (340) (140) (90) (19220) (10350) (240) (110) (180) (70) (80) (110) (110) (50) (310) (170) (120) (50) (60) (50) (240) (160) (430) (100) (860 160) (340) (280) (300) (22740) (130) (250) (80) (690) (30) (60) (70) (350) (42680) (80) (25550) (130) (170) (100) (460) (480) (70) (150) (40) (270) (330) (790) (310) (330) (90) (150) (60) (60) (120) (40 140) (50) (130) (170) (50) (100) (100 50) (60) (210) (200) (60) (30 350) (60) (140) (100) (35720) (40) (40) (90) (30) (70) (70) (240) (40) (420) (310) (490) (90) (2310) (240) (10170) (30) (50) (30 10880 330 70 50) (1550) (80) (790) (70 990 40) (70) (140) (100) (60) (50) (7350) (60) (1000 60) (60) (140) (70) (110) (180) (1160) (260) (40) (60) (40) (280) (150) (100) (40) (60) (12210) (50) (940) (60 150 470) (110 600) (170) (60) (190) (420 1330) (40) (2610) (90 320) (70) (12630) (60) (80) (50) (40) (50) (130) (90 1270) (820) (70 1850) (120) (260) (110) (60) (40) (2470) (170) (50 110) (50) (310) (260) (2470 40) (190 40) (30) (1920 40 80) (290) (80) (120) (40) (38650) (50) (90) (130) (230) (2060) (30100) (80) (80) (1430) (120) (120) (4210) (730) (90) (400) (210) (39600) (620) (190) (140) (260) (50) (790) (5390) (400) (40) (170) (650) (50) (560) (460) (70) (5710) (27340) (40) (750 150) (3740) (40) (70) (450) (50) (40) (80) (30) (950) (60) (220) (5390 610) (50) (50) (2380) (390) (130) (60) (250) (3810) (6160) (60) (1010) (5170) (50) (40) (320) (930) (3910) (230) (170) (180) (60) (1300) (40) (250) (100) (40) (510) (150) (770) (70) (4190) (40) (170) (70) (70 2130) (460) (40) (230) (220) (40) (2590) (1880) (760) (860) (90) (100) (590) (60) (90) (50) (930) (40) (80) (70) (460) (50 50) (2320) (890) (140) (170 60) (70) (70) (2360) (90) (360) (60) (100 40) (160) (400) (70) (40) (300) (180) (50) (30) (50 50) (90 110) (130) (100) (30) (600) (60) (8300) (40 350) (66280) (29230) (120) (220) (310 680 90) (140) (160) (30) (60) (59530) (80) (220) (60) (190) (230) (210) (150) (180) (70 150 390 120) (70) (60 250 60) (570 90) (100) (100) (1650 190) (100) (870) (160 70) (19610) (110) (50) (130) (120) (180) (170) (340) (240) (180) (2000 120) (70) (100) (1110) (50) (500 80) (170 40) (41270) (30) (140) (200) (220) (150) (120 70) (40) (80) (670) (100 210 130) (40) (50) (960 240) (1050) (110) (200) (30) (500 1650) (51590) (480) (200) (1300) (60) (130) (330 60 30) (100) (1660) (7290) (100) (240) (1080) (110) (140) (80) (120) (50) (130) (120) (250) (290) (490) (60) (910) (100 410) (850 15340) (100) (2870 100) (60) (390) (250) (60) (60) (70) (1450) (250) (530) (50) (550 50) (250) (50) (40) (250) (250) (50) (440) (240) (40 380) (50) (70) (120) (60) (60) (210) (90) (440) (200) (130) (360) (100) (6000) (190) (250) (850) (180) (1060) (100) (160) (90) (100) (100) (100) (650) (200) (200) (30) (12200) (2350) (490) (250 580) (100) (130) (650) (240) (60) (530) (340 530) (460) (130) (310) (330) (690 230) (1760) (120) (1560 130) (50) (550) (110) (120) (450) (490) (80) (560) (100) (870 90) (120) (100) (1530) (50) (40) (3280) (8600 300) (100) (2330) (190) (750) (50) (100) (100) (50) (70) (40) (250) (550) (1660) (40 290) (190) (290) (50) (900) (360) (100) (60) (100) (130) (130 70) (160) (70) (70) (70) (170) (40) (6310) (50 110) (240) (910) (60) (140) (110) (60) (1080) (100) (110) (60) (50) (120) (8580 60 300) (400) (100) (350) (70) (18370) (70) (250) (90) (230) (70) (80) (250) (160) (190) (1630) (60) (240) (110) (100) (330) (190) (100) (110) (40) (300) (760) (360 110) (70) (50) (60 220) (60) (110) (44180) (60) (330) (100) (240) (60) (110) (160) (250) (300) (610) (100) (150) (5790) (70) (30) (200) (150 510) (40) (60) (110) (70) (160) (110) (70) (90) (120) (60 360) (500 70) (130 100 70) (70 100) (110) (70) (100) (150) (860) (150) (110) (500) (140) (1020) (50) (180) (90) (110) (340) (360) (150 19770) (120) (60) (870) (80) (1850) (760) (130) (70) (150) (30) (8430) (1640) (180) (290) (120 4480) (70) (260) (50) (40) (70) (100) (70) (250) (33990 80) (40) (40) (450) (60) (80) (1040 670) (90) (140 50) (90) (270) (100) (51320) (50 40) (50) (40) (40) (60) (240 800) (50) (80) (100 140) (140) (30) (40) (1910) (1930 110) (70) (140) (40) (110) (120) (440) (60) (80) (90) (50) (100) (650) (110 260) (80) (160) (640) (50) (270) (100) (610) (60) (60) (50) (450) (40 140) (30) (50) (430) (50) (40) (40) (160) (710) (300) (40) (100) (420 440) (210) (100 40) (140 100) (190) (120) (60) (80) (60) (10040) (70) (740) (160) (400) (60) (110) (750) (80) (80) (700) (860) (1890) (120 4460) (100) (100) (19530) (30) (150) (50 70) (200) (50) (40) (9180) (130) (50) (360) (250) (80) (120 80) (70 1310 70) (250) (70 70 360) (100) (80) (40) (30) (70 340) (240 80) (70) (60 2960) (300) (21170) (1650) (120) (160) (80) (30) (100) (30) (60) (660) (80) (80) (100 120) (600) (80) (50) (350) (30) (70) (1500) (49020 30) (60) (80) (60) (60) (80) (70) (40) (70) (80) (100) (40) (60) (80) (1110) (90) (40) (18240) (150) (160) (100) (140) (50) (90) (190) (250) (230) (40) (90) (840) (50) (120 260) (220) (80 30) (38220) (30) (440) (430) (80 60 40) (70) (40) (8490) (210) (80 60) (30420) (200) (90) (90) (40) (27970) (60) (340) (70) (80) (3690) (50) (70) (240) (100) (990) (60) (70) (90) (70 60) (80) (1010) (130) (140) (130) (150) (160) (90 3010) (90 40) (140) (80) (100) (100) (90) (350) (540) (40) (100) (220) (40) (120) (60) (230) (90) (60) (40 100) (6700) (560) (32890) (120) (20480) (80 220) (100) (50) (90) (720) (40) (720) (90) (90) (18880) (150) (100) (19620) (70) (90) (100) (130) (40) (120) (50) (80) (90) (40) (40) (1310) (90) (100) (190) (90) (100) (2510) (40) (90) (170 190 70) (100) (1200) (80) (80) (1240) (1090) (100) (320) (180) (60) (60) (20420) (60) (70) (30) (240) (4720) (60) (60) (50 2330) (180) (30) (290) (40) (40) (70) (60) (13910) (80 90) (80) (40) (40) (30) (110) (70) (1330) (60) (90) (90) (40) (80) (80) (40) (100) (100) (40) (90) (160 60) (530) (50) (80) (160) (810) (250) (90) (140) (220) (100) (3510) (290 13460) (80 30) (90) (160) (1590 80) (40) (90) (80) (160) (90) (90) (40) (160 60) (210) (50) (9090) (60) (30) (40) (80) (200) (70) (40) (60) (1850) (40) (40) (30) (170) (30) (60) (40) (150) (150) (100) (40) (60) (40) (70) (10460) (190) (50) (60) (80) (50) (30) (60) (3490) (120) (250) (50) (40) (60) (110) (60) (420) (50) (50) (40) (80) (50) (90) (90) (30) (70) (70) (60) (200) (40 40 70) (250) (50) (60) (40) (200) (80) (550) (40) (690) (40) (60) (180) (180) (370) (290) (910) (40) (160) (60) (990 440) (920) (5810) (180) (50) (30) (110) (30) (50) (90 270) (140 90) (100) (170) (510) (24350 60) (90) (220) (60 460) (30) (24700) (70) (190 50) (4240) (45690) (70) (700) (330 790) (210 4290) (12380) (80) (70) (50) (180) (30) (120) (160) (270) (220) (190) (70) (210) (230) (230) (90) (200) (190) (50 840) (100) (2280) (100) (130) (50) (50) (150) (240) (50) (210) (80) (460) (50) (610) (170) (100) (80) (230) (80) (320) (50) (50) (240) (40) (2560 40) (70) (1670) (40 3410) (530) (200) (210 70) (70) (380) (160) (60 90) (50) (90) (600 2120) (8520 1580) (190 460 90) (60) (30) (50) (40) (370) (60 170) (80) (110) (120) (780 180) (80 40) (6660) (960) (240) (260) (50 70) (80) (50) (50) (360 30) (50 40) (120 150) (60) (110) (180 70) (350 510 60) (100 40) (3010) (40) (40) (60) (700) (90) (100) (39700 140) (70) (180) (70) (370) (11020 110) (80) (340) (70 50) (50) (190 40) (120 230) (100) (840 70) (40) (90 90) (30 500) (250 190 960) (100 70) (100 90) (60 250) (70) (220) (100) (200) (90 660) (350) (50) (40 480) (230 2130) (170) (140) (60) (730) (310) (80) (60) (60) (60) (460) (710 70) (290) (350) (70 220 460) (60) (45180) (150 160) (590) (60) (40) (80) (220) (920 190) (50) (970) (960) (2650) (160) (360) (330) (80 30) (90) (50) (2180) (220 40 150) (40) (100) (670) (30) (340) (40) (230 90) (60) (250) (90) (180) (240) (170) (26440 50) (40) (440) (120 720) (710) (80) (90) (70) (100) (40) (40) (70) (110) (210) (250) (15330 410) (2680) (60) (2330) (150 220) (60) (1300) (100) (180) (140) (440) (370) (1170) (100) (150) (80) (100) (100) (100) (90) (100 30) (530) (3490) (15800) (70) (100 70) (17540) (90) (110) (5190) (150) (150 80 50) (450) (50) (50 60) (40) (80) (600) (110) (80) (80) (70) (390) (230) (40) (100) (80) (350) (140) (340 2450) (20750 310) (21480 60) (50) (160 1730) (190 90) (130 120) (80) (11370) (990) (340) (270) (230) (290) (60) (70) (40 5850) (100) (2050) (250) (110) (180) (220) (40) (51250) (30) (50) (50) (250) (130 200) (60) (40) (80) (80) (650) (190) (30) (40) (6390) (120) (8820) (40) (100) (50) (80) (60) (100) (150) (90) (200 90) (150) (16610) (1670) (150) (210) (9010) (960) (4360) (770) (130) (110) (650) (160) (110) (130 50 11560) (50) (890 1990) (380 40 230) (80) (70) (390) (60) (100 30) (100) (100) (100 50) (40) (8840) (30 260 1200) (210) (120 50) (700 50 200) (240) (160) (630 200) (300) (100) (7860) (9220) (270) (190) (390) (250) (200 360) (1050) (350) (160 400) (220) (70) (1530 310) (1020) (310) (230) (340) (70) (60 340 50) (350) (70) (1220) (70) (160 110) (340) (8150) (1560) (210) (8730 110) (70) (40 90) (650) (3840 240) (970) (60) (70) (70) (5550) (160) (3180) (3200) (50 60) (70 70) (1050) (50) (110) (110 60) (190) (50) (50) (70) (400) (170) (18450 2470) (60) (50) (220) (80) (70) (50) (500 70) (50) (70 400) (460) (60) (16140) (300) (370) (50) (200) (70 2290 1780) (1000) (80) (60) (50) (70) (120) (1790) (100) (1950) (70) (160) (60) (40) (40) (150) (60 600) (70) (70) (40) (660) (60) (430) (80 80) (2580 70) (2060) (50) (11500 40 100) (1860 60) (150) (250) (430) (860) (60) (1190) (60) (140) (30) (60) (100 110) (240 70) (110) (60) (600) (80) (4290 260 80 200) (60 210) (770 130) (60) (380) (70) (60) (500) (340) (160) (120) (90) (90 390) (20780 40) (260) (220) (100) (100) (880 360) (70) (320) (510 70) (3220) (60) (250 170) (100 130) (9450) (290) (120) (240 40) (90) (410 30) (120 40 170) (510) (70) (100) (2800) (500 950) (80) (50) (30) (90) (160 1580) (18430 100 140) (1030 110) (30 80) (130 100 60) (100) (9340) (330 8840) (1700) (60 90) (350 70 180) (80 110 280) (60 40) (80) (50) (210) (110 300 280) (150) (40) (60 140 40) (2700) (110 710) (50) (170 100) (60 80 40) (440 200) (110 100) (50) (830) (300 1210) (1560) (60) (40) (1020 60) (60) (140 120) (60) (90 2190) (80) (110) (150) (40 190) (580) (40) (2600) (150) (150) (120 70) (200) (70) (80 240) (110) (160) (90) (50) (90) (210) (260 320) (80) (80) (1020) (150 3630) (410) (90) (70) (330 1220) (50) (30) (60 50) (60 1650) (110) (60 70) (160) (40) (30) (30) (210) (130) (140) (140) (2750) (30) (6180) (110) (16330 170) (100) (50) (180 50) (300) (50) (1230) (120) (2130) (60) (820) (600) (80) (80) (130) (40) (5780) (80) (170 1220) (30) (330) (180) (170) (60) (50) (540) (5510) (620) (60) (50) (100 13560) (40) (70) (180) (220) (30) (120) (30) (420) (170) (40) (110 110) (70) (170) (1400 280) (4360) (50) (70) (4090) (12280) (60) (3590) (510) (320) (40) (3380) (80) (70) (590) (590) (40) (100) (1190) (80) (60) (680) (90) (80) (40) (50) (70) (60 1100) (200) (130) (570) (8030) (50) (70) (60) (60) (90) (30) (1390) (190 70 120) (100) (40) (70) (230 110) (40) (30) (470 2310 450) (60) (80 140) (1050) (40) (200) (8570 100 60) (70 60) (140 50) (2850) (180 200 70 70) (270 40) (50) (90) (120) (50) (900) (200 100) (70) (50 70) (50) (1470 260) (120) (160) (520) (40 100) (50) (100) (450) (40) (70) (250) (60) (40 40 50) (110 210 30) (40) (1340) (30) (760) (50 40) (50 80) (70 380) (100) (6410) (8350) (90) (120 380) (70) (600) (50) (60) (40 440) (240 70) (50) (320 40 260) (160) (70) (60) (50) (150) (640) (30) (80) (120) (70 40) (40) (80 110) (5970) (80) (50) (50) (140) (330) (70 110) (140 960 450) (70) (70) (70) (1060) (120) (50 50) (50) (100 90 50) (50) (120) (6260) (30 1450) (50 60) (110) (1770) (140) (5100) (2430) (7300) (420) (40) (280) (1200) (1080) (70) (100) (80 60) (1140) (2650) (60) (5990) (2760) (70) (230 80) (60) (2110) (70) (1480) (960) (370) (80) (2070) (80) (30) (110) (220) (40) (240 110) (100) (60) (290) (530) (210 30) (540) (100) (410) (1790) (90) (320) (140) (90) (80) (90) (60) (250) (120) (90) (1330) (60) (290) (70) (30 100) (80) (40) (70) (30) (1610) (150) (40) (50) (100) (40) (90) (1120) (90) (100) (160) (130) (150 170) (230) (50) (60) (250) (920) (160) (50) (60) (50) (170) (10710) (70) (50) (150) (100) (10270) (150) (50) (2880) (3610) (6560) (9400) (3920 1150) (3230) (8390) (570) (2750) (2710) (60) (8820) (130) (440) (1180) (1020) (7010) (680 1000) (1040 7430) (850) (1560) (80) (380) (60) (420) (60) (40) (100) (100) (30) (140 1970 200 40) (550 6960) (2220 200) (40) (3560) (30 60) (6730) (100) (100) (70) (870) (650) (40) (580) (770 1530 120) (4530) (230 1010) (280) (100 90) (1480) (90) (2000) (1570) (410) (70) (380) (360) (40 560) (50) (40) (40) (120) (1050) (3810) (30) (5150) (40) (2610 90) (30) (80) (550) (110) (180) (40) (150) (470) (230) (400) (3370 90) (500) (230 4420) (40) (120) (4280) (50) (270) (110 3910) (910) (60 190) (450) (3320) (1880) (470) (90) (1290) (70) (130 60 60) (280) (420 980) (60) (90) (2050) (60) (110) (1020) (1900) (1420 270) (40) (30) (1160) (70) (760) (40 740) (50) (110) (90) (10) (10 0) (0 0 0 0))) :lvel (quote ((69 58 54 48 44 43 43 41 41) (41 41 40 40 40 40 40 40 40) (40 40 40 40) (43) (40) (40) (40) (40) (40) (50) (40) (40) (40) (40 40) (41) (40) (40) (40) (40) (55) (40) (40) (43 41) (40) (40 40) (40) (42) (42) (40) (42) (41 40) (40) (41) (49 44) (43) (46) (43) (52) (66) (48 46) (44) (50) (44 44) (51 45) (56) (48) (54) (58) (45) (44) (53) (43) (41) (41) (41) (44) (46) (42) (42 41) (45 41) (43 42 41) (43) (40) (41) (41) (41) (41) (47) (41) (42) (43 42) (43) (43) (52) (62 41) (43) (41) (42) (43 41 40) (41) (41) (41) (41) (41) (45) (42 42 40) (40) (51) (40) (41) (46) (40) (42) (41) (42) (40) (41) (42) (41) (40) (40) (41) (40 40) (41) (41) (40) (40) (40 40) (40) (40) (41 40 40) (40) (41) (41) (41) (41) (41) (41) (41) (40 40) (40) (40) (40) (41) (40) (40) (40) (40 40) (40) (40) (41 40) (40) (40) (40) (40) (40 40) (40) (40) (40 40) (41) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (41 40) (40 40) (40 40) (41) (40) (40 40) (42) (41) (40 40) (42) (40) (41) (40) (40) (42 40) (40) (41) (40) (40) (41) (40) (40) (41) (40) (40) (41) (42) (41) (41) (41) (42) (41) (41) (42) (42) (42) (42 41) (42) (41) (41 41) (40) (42) (41) (45 43) (41 41) (41) (40) (41) (41) (41) (41) (41) (41) (41 41) (40) (41 40) (41 41) (41) (41) (40) (40) (41) (43) (41 41) (41) (40) (40) (41) (40) (41) (40) (41) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (41) (40) (40) (40) (41) (40) (41) (40) (40) (40) (40) (41) (64) (41) (41) (40) (41 40) (67 45 41) (41) (40) (42 40) (41) (41) (43) (41) (42) (41) (40) (41) (41) (41) (40) (41) (40) (42) (41) (40) (40) (41) (46) (40) (40) (41 40) (41) (41) (41) (40) (41) (41) (40) (40) (41) (40 40) (40) (41 40) (41) (40) (40) (40) (40) (41) (40) (40) (41) (40) (42) (40) (41) (40 40) (40) (40) (40 40) (41 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (41) (41) (41) (41) (41) (42) (41) (46) (40) (41) (40) (43) (43 41) (41) (41) (40) (41) (40) (41) (41) (41) (41) (41) (40) (41) (41) (42) (41) (47) (41) (41) (41) (41) (42) (41) (41) (41) (41) (41) (42 42) (41) (41) (41) (41) (41) (42) (42) (42) (42) (42) (42) (41) (42) (41 41) (50 42 41) (42) (42) (42) (41) (42 41) (41) (42) (42) (42 42 41) (42) (42 41) (42 41) (41 41) (41 41 41) (42 41) (41 41) (41) (41) (41) (41 41) (41) (41) (41 40) (40) (41) (41) (40) (41 40) (69) (44 41) (40) (41 40) (40) (41) (42) (40 40) (41) (40) (42) (41 41 40) (40 40) (40) (40) (40) (40) (41 40) (42 40) (44 40) (40) (40) (41) (40 40) (40) (40) (40) (40) (41) (40) (40) (40) (46 40 40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (41 41) (40) (43) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (41) (40) (40) (40) (40) (40) (40) (41 40 40) (40 40) (41 40) (41) (42) (40 40) (40) (40) (40) (40) (40) (42 40) (40) (40) (40) (40 40) (41) (40) (40) (40) (40) (41) (41 41) (41) (41 40 40) (40) (40) (41) (41) (40 40) (40) (40) (41) (40) (41) (41) (40 40) (41 40) (40) (41) (41 40) (41) (40) (41) (40) (40) (41) (41) (41 40) (41) (41) (40) (41) (41) (41) (41) (40) (41) (40) (41) (41) (41) (41) (41) (41) (42) (69) (41) (41) (41) (41) (41) (41 41) (41) (41) (41) (41) (41) (41) (42) (41) (41) (41) (41) (41) (72) (42) (42) (99) (42) (93) (43) (43) (41) (41) (43) (43) (42) (47) (44) (72 42) (42) (43) (45) (42) (50 44) (46 45) (43) (43) (49) (100) (43) (58 54 42) (42) (42) (44) (67 42) (44 41) (43) (54 43) (43) (42) (41) (71) (43) (44 43) (45 44) (76 44) (44) (42) (44) (72 43) (46) (47 41) (43) (44) (41) (48) (43) (42) (41) (42) (65) (43) (41) (45) (46) (47) (42) (42) (42) (41) (41) (42) (42) (43 43 42) (51 43 43) (47) (42) (40) (42) (41) (41) (42 42) (42) (45) (47) (43) (41) (41) (42) (44) (40) (41) (42) (42) (42) (43) (42) (41) (43) (41) (43) (42) (41) (43) (42) (42 41) (41) (42) (41) (41) (42) (41) (41) (41 40) (41) (41 41 40) (41) (41) (43) (41) (40) (43 41) (40) (40) (40) (41) (40) (41) (41) (43) (40) (40) (40) (40) (40) (40) (40 40) (40) (42) (40) (40) (40) (40) (40) (43 40) (40) (40 40) (43) (40) (40) (40 40) (40) (40) (40) (44) (40) (59) (40) (40) (40) (40) (40) (40) (40) (41 40) (43) (41) (40 40) (40) (40) (40) (40) (40) (43 40) (40) (40) (40) (40) (40) (45) (40) (40) (43) (40) (40) (46 40) (44) (40) (40) (42) (40) (69) (40) (40) (42) (40) (41) (40) (41) (41) (41) (40) (40) (41) (40) (41) (40) (40) (40) (41) (40) (41 40) (42) (40) (41) (40) (41) (42) (41) (40) (41) (42) (41) (40) (40) (41) (41) (41) (40) (41) (42) (41) (41) (40) (40) (40) (41 41) (40 40) (81) (41) (41) (41) (41 40) (40) (40) (40) (41) (41) (41) (41) (41) (42) (41) (41) (41) (40) (40) (41) (42) (41) (41) (40) (41) (42) (40) (41) (40) (40) (42) (40) (50 41) (44) (42) (41 40) (41) (40) (42 40) (40) (40) (40) (42) (41 40) (40) (41) (41) (41 40) (42 41 40) (40) (41) (41) (40) (42) (41 41) (40) (41 40) (41) (42) (41 40) (41) (40) (41) (40) (41) (41 41) (41 40) (40) (40) (42) (40) (41 41) (41 40) (42) (41) (40) (40) (40) (41) (42) (41) (40) (41) (41) (40) (41 41) (47) (41) (41) (40) (41) (41) (42) (42) (41) (41) (42 40) (40) (42) (40) (41) (41) (41) (42) (42) (42) (41 40) (62) (41) (42 41) (41) (42) (42 41) (41) (41) (41 41) (42) (42 42) (42) (41) (41) (42) (41) (42) (42 42) (42) (42) (42) (41) (42) (43) (43) (42) (44) (41) (42 40) (43) (43) (41) (44 41) (44) (48) (42) (47) (47) (41) (46) (42) (41) (41) (44) (44) (43) (50 45) (43) (42) (45) (45) (42) (42) (44 41) (42) (41) (47) (44) (43) (42 42) (44) (42) (41 41) (41 41) (41) (43) (41) (42) (41) (41) (58) (48) (42 41) (42 41) (42) (44) (41) (40) (45) (42) (41) (52) (48) (41) (74) (47) (46) (45) (75) (44 43) (47) (66) (53) (57) (45) (74) (56) (48) (52 47) (48 45) (49) (93) (45) (63 47) (48) (44) (45 44) (99) (72) (45) (48) (41) (55) (63) (52) (44) (51) (60 48 46) (43) (46 45) (44) (62 43) (45 43) (50 49) (43) (46) (47) (44) (49) (43) (46 43) (43) (42) (41) (42) (43) (43) (47 42) (42 41) (52) (42 41) (47) (42 41) (42) (42) (42) (41) (48 41) (41) (42) (44) (50 41) (41) (50 42) (41) (41) (43) (46) (41) (41) (46 41 41) (42) (42) (47) (42) (44 42) (41) (42 41) (43) (47 41 41) (43) (41 41) (41 40) (41) (41) (44) (46) (43) (45) (42) (50) (46) (44 42) (47) (41) (45) (41) (44) (41) (42 41) (42) (41) (41) (43) (43) (42) (42) (41) (48) (42 41) (42) (42) (41) (41) (41) (40) (40) (41 40) (42) (41) (41) (40) (42) (40) (41) (41) (41) (40 40) (41) (41) (41 41) (41) (41 41) (41) (40) (40 40) (41) (42) (40) (40) (41) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (41) (41) (40) (40) (40) (56) (40) (41) (40) (41) (41) (41) (40 40) (43) (43) (43 40) (43) (43) (43) (43) (44) (43) (41) (43) (42) (42) (41) (43) (42 41 41) (43 41) (42) (42) (41 41 41) (41) (41) (41) (41) (44) (40) (41 41 41) (41 41) (41) (41) (40 40) (41) (41 40) (40) (40) (41) (41 40) (41) (40) (41 40) (40 40) (40 40) (40) (41 41) (40) (41 41) (40) (43) (41) (40) (41 40) (40) (40 40 40) (40) (41 40) (40 40) (40 40) (40) (40) (40) (40) (40) (41 40 40) (40) (40) (41 40) (40) (40) (40) (41 40) (40) (40) (40 40) (40) (40) (40) (40) (42) (44) (40) (40 40) (41) (40) (90) (40) (40) (44 42 40) (40) (40) (40) (40) (40) (41 40 40) (41) (40 40) (40 40 40) (40) (40 40) (40) (43) (40) (40) (40) (40 40) (40) (40) (40) (40) (56) (40) (40) (40 40) (40) (40 40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (66 40) (40 40 40 40) (40) (40) (40) (48) (49 40 40) (40) (40 40) (44) (40 40) (40) (47 40) (40) (43) (40) (40) (40) (40 40) (40) (45 40) (40) (50) (43) (41) (47) (46) (50 46) (52) (45) (46) (55) (46) (41) (54) (45) (51 49) (42) (44 43) (45 44) (44) (45) (45 44) (44) (43) (43) (46 43) (42) (42) (52) (43) (43 43 41) (43) (42) (43) (43) (43) (41) (41) (42) (44) (44) (41 41) (42) (44 41) (41 41) (41) (44) (42) (41 40) (42 41 41) (41) (42 40) (41 41) (40) (41) (41) (41) (41) (42 40) (41 41) (40) (41) (43 40) (41) (41) (42 40) (40) (40) (41 40) (41) (42 41) (40) (42) (41) (40 40) (40) (40) (41) (40) (40) (40) (40) (40) (40) (40) (44) (40) (41) (40) (40) (40) (40) (41) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (41) (40) (40) (59) (40) (42) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (41 40) (40) (41) (40) (40) (40) (41) (41) (42) (41) (42 42) (43) (42 41 41) (41) (42 40) (41) (41 41 41) (41 41 40 40) (41 40) (41 41) (41) (41) (41 41 40) (41 40) (41) (40) (41) (41 41 41) (41) (40) (41) (41) (42) (40) (41) (41) (40) (41) (40) (42) (41) (40 40) (41) (40) (40) (41) (40 40) (41) (41 40) (41) (40) (41) (40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (83) (40) (40) (40) (41) (41) (40) (41) (40) (67) (41 40) (41) (41) (41) (43) (41) (41) (41) (41) (42) (41) (41) (42 41) (41) (41) (41) (48) (42) (40) (40) (42) (41) (41) (42) (40) (41) (43) (40) (43) (41) (41) (41) (43) (40) (44) (41) (41) (40) (40) (40) (46) (41) (40) (49) (40) (41) (40) (40) (41 40) (40) (48) (41) (40) (40) (40) (40) (42) (40) (40) (40) (40) (40) (41 40) (40) (42) (41) (40) (41) (40) (40) (41) (41) (43) (42) (42) (41) (41) (41) (41 41) (44) (42 42) (41) (41) (78 41) (41 40) (40) (41 40) (41) (40) (41) (41) (43) (40) (41) (41) (40) (40 40) (41 40) (42 40) (40) (41 40) (40) (41) (41 41) (40) (40) (40) (41) (41 40) (40) (40) (40) (40) (40) (40) (40) (53) (40) (40) (40) (46) (40) (40 40) (40) (40) (41) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (41) (40) (40) (40) (40) (40) (40) (40) (40) (40) (56) (49) (47) (44 44) (69 42) (41) (41) (41) (42) (41) (42) (44) (47) (45) (47 47) (47) (51) (46) (48 45) (44) (48) (53 50) (62 47) (44 44) (48) (59) (46) (51 47) (51) (43) (44) (50) (43 41) (43 43 43) (43) (43) (44) (42 41) (43) (41) (45 43) (42) (42 41) (41) (42 41 41) (42) (46 41) (49) (46) (41) (45 44) (43) (42 42) (42) (42) (42) (41) (42 41) (44) (41) (42) (41) (42 41) (83) (41 41) (41) (42 41) (44) (41) (41) (41) (57 42) (42 42) (42) (41) (41) (41) (41) (41) (41) (42) (41) (41) (41) (41) (42) (41) (42) (44) (42) (42) (42) (45) (52) (42) (42) (44) (43) (82) (41) (41) (41) (49) (45) (41) (41) (41) (41) (46) (42) (41) (47) (44 41) (44) (43) (41) (41) (42) (41) (71) (47) (41) (41) (41) (45) (44) (41) (48) (41) (41) (41) (41) (41) (41) (42) (41) (41) (41) (42) (41) (41) (41) (41) (41) (41) (41) (41 41) (42) (41) (42) (42) (42) (42 41) (42) (41) (42) (42) (41 41) (41) (41) (41) (48) (41) (45) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (40) (41) (40) (57 42 40 40 40) (40) (40) (40) (41 40 40) (45) (40) (40) (41) (40) (40) (41) (40 40) (40) (40) (41) (40) (41) (40) (41) (40) (40) (45) (40) (40) (40) (42) (40) (41) (40) (40) (42 40 40) (40 40) (41) (40) (42) (40 40) (40) (40) (40 40) (41) (41) (40) (41) (40) (40) (40) (41) (40 40) (40) (42 40) (41) (40) (40) (41) (40) (40) (42) (40 40) (40) (40) (40) (40 40) (42 40) (40) (40 40 40) (40) (40) (42) (40) (69) (40) (40) (41) (40) (41) (53) (40) (41) (40) (41) (41) (41) (41) (40) (40) (40) (47) (40) (41) (40) (40) (40) (40) (40) (40) (40) (42) (40) (40) (41) (40) (40) (41) (44) (40) (40 40) (41) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (41 40) (40) (40) (41) (40) (40) (40) (40) (45) (47) (40) (40) (41) (40) (40) (40) (41) (45) (46) (46) (45) (44) (41) (45) (44) (42) (42) (45) (43) (43) (43) (42) (42) (43) (42) (42 41) (43) (41) (41) (41) (41) (43) (41) (42) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41) (41 41) (41) (42) (41) (41 41) (41) (41) (42) (41) (42) (41) (42 41) (41) (41) (42) (41) (42) (41) (41) (41) (42 42) (42 42) (41) (41) (41) (41) (41) (40) (41 40) (77) (46) (41) (40) (41 41 40) (41) (41) (41) (41) (55) (41) (41) (41) (41) (40) (41) (40) (41) (41 41 40 40) (41) (41 40 40) (41 41) (40) (41) (40 40) (40) (40) (40 40) (43) (42) (41) (40) (41) (40) (40) (41) (40) (40) (41 40) (40) (40) (40) (40) (40 40) (40 40) (51) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (41 40 40) (40) (40) (41 40) (40) (40) (40) (40) (40 40) (44) (40) (40) (40) (40) (40) (40 40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (41) (40) (40) (41) (40) (40) (41) (40) (41) (40 40) (41 40) (40) (41 40) (40) (40) (41) (40) (40) (40) (40) (41) (41) (40) (40 40) (41) (40) (41) (41) (41) (40) (41) (41) (41 40) (40) (40) (41) (40) (41) (40) (41) (41) (40) (41) (41) (40) (40) (40) (41) (41) (40) (41) (40) (41) (40) (40) (40) (41) (41) (40) (41) (41) (43) (41) (40) (41 41) (40) (41) (41) (40) (40) (40) (41 41) (40) (42) (41) (41) (42 40) (40) (41) (41 40) (40) (41) (40) (42) (40) (42) (41) (41) (41) (40 40) (40) (41) (42) (40) (40) (41) (55 41) (41) (42) (41) (41) (41) (41) (41) (41) (41) (42) (40) (41) (43) (42 41) (41) (40) (40) (41) (41) (41) (41) (41) (41) (42 41) (41) (40) (41) (40) (41) (42) (44) (41 41) (41) (41) (42) (42) (41) (41) (42) (41) (42) (41) (41) (42) (44 41 41) (43) (41) (40) (41) (48) (41) (41) (42) (44) (41) (42) (42) (41) (42) (40) (41) (44) (41) (41) (41) (43) (41) (42) (43) (41) (44) (43 42) (41) (41) (41 40) (41) (42) (63) (41) (41) (41) (41) (41) (41) (43) (42) (43) (40) (41) (41) (41) (41) (43) (44) (42 42) (44) (41) (41) (42) (40) (41) (41) (42) (42) (43 41) (41 41) (45 42 42) (42 41) (42) (41) (45) (43) (41) (42) (45) (43) (44) (42) (42) (46) (53) (42) (42) (52) (42 40) (42) (44) (42) (45) (45) (41) (41) (45) (44) (43) (41) (41) (41) (41) (41 41) (41) (41) (43) (41) (42) (41) (41) (41) (43 41) (41) (41) (41) (42) (42) (41 41) (41) (41 41) (41) (42) (40) (72) (41 41) (41) (40) (45) (42) (41 40) (41) (41) (41 40) (41) (41) (41) (41) (41 41) (41) (41) (41) (41) (43) (41) (41) (42) (41) (40) (44) (40) (40 40) (41) (40) (40) (40) (40) (43) (40) (40) (40) (40) (44) (41 40) (40) (40) (40) (40) (40) (41) (40) (40) (40) (40) (40) (40 40) (44) (40 40) (40 40) (40) (40) (40) (41) (44) (40) (40) (40) (41) (40) (40) (40) (40) (40) (40) (40) (45) (40) (40 40) (40) (40) (42) (40) (40) (41 40) (40) (40) (41) (40) (40) (40) (40) (40) (40) (44 40) (42 40 40) (46) (40 40 40) (40) (42) (40) (41) (40 40) (46 42) (42) (40 40) (40) (47) (40) (43) (42) (40) (43) (40) (41) (40) (40) (43) (43) (42 40) (40) (40) (40) (40) (42) (40) (41) (49 40) (40) (40) (40) (40) (40) (40) (41) (40) (40) (42) (41) (40) (41) (40) (40) (40) (48) (41) (40) (42) (41) (40) (40) (41) (40) (40) (40) (40) (41) (40) (41 40) (40) (42 40) (42) (40) (41) (41) (41 40 40) (40) (40) (41) (41) (40 40) (64) (41) (43) (40) (40) (49) (40) (41) (40) (40) (41) (40) (40) (41) (43) (41) (40) (41) (40) (41 41) (43) (41) (40) (41) (40) (41) (41) (43 41) (43 40) (41) (44) (40) (44) (40) (40) (41) (42) (44) (40) (41) (41) (41) (41) (45) (40) (40 40) (43) (41) (44) (40) (41) (45 40) (40) (40) (45) (41) (40) (40) (40) (45) (57) (40) (46) (41) (40) (46) (46) (41) (41) (40) (40) (40) (47) (47) (40) (40) (47) (47) (40) (48) (48) (42) (40) (48) (50 41 40) (41) (41) (49) (41) (42) (41) (40) (42) (42) (41) (41) (41) (41) (41) (42) (42) (41) (42) (42) (41 40) (41) (51) (41) (41) (50) (41) (41) (42) (41 41) (53) (53) (51) (53) (41) (41) (40) (41) (54) (41) (40) (54) (40) (41) (55) (41) (41) (55) (58 41) (40) (42) (57) (59) (73) (41) (58) (41) (61) (43) (43) (43 43) (60 41) (61) (63) (45 42) (42) (61) (62) (65) (42) (64) (42) (67 41) (42) (43) (48) (42) (42) (42) (42) (42) (41) (47) (42) (41) (45) (43) (42) (42) (46) (42) (43) (42) (43) (43) (46) (43) (43) (42) (40) (44) (41) (43) (42) (42) (43) (43) (41) (43) (43) (42) (44) (43) (43) (42) (44) (41) (45) (41) (41) (44) (44) (41) (45) (41) (43) (41) (44) (45 41 41) (41) (45) (43) (46) (43) (41) (45) (41) (41) (41) (43) (49) (44) (51) (44) (41) (47) (51) (46) (42 42) (40) (42) (47) (41) (53) (41) (41) (49) (42 41) (47 41) (41) (45) (44) (50 41) (41) (43) (41 41) (51) (43) (41) (46 42) (41) (57) (48) (42) (44 41) (47 40) (57) (42) (47) (43) (44) (48) (46) (42) (41) (46) (42) (46) (44) (41) (42) (47) (44) (46) (42 41) (42) (41) (49) (43) (44) (52) (43) (43) (41) (44) (42) (46) (43) (42) (46) (43) (41) (47) (47) (42) (43) (42) (42) (42) (43 41) (43) (41) (43 41) (41) (42) (43 42) (43) (44) (42) (41 41) (41) (41) (41 40) (50 41) (41 41 41) (41) (42) (41) (41) (41) (42 41) (40) (40) (42) (41 40) (41 40) (41) (40) (42) (41) (41 40) (41) (42) (40) (43 40) (41 40) (41 40) (40) (40) (41 40) (41 40 40) (40 40) (40) (40) (41) (40) (41) (40) (40) (57 40) (40) (40) (40) (41) (45 41) (40) (40) (41 40) (40) (40 40) (40 40) (40) (40 40) (40) (41 40) (40 40) (41 40 40) (41 40) (40 40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (41 40) (40 40) (40) (40) (40) (40) (40) (40) (40) (41) (40) (40) (40 40) (40) (40) (41 40 40) (40) (47) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (41) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (41 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (56 40) (41) (40) (42) (40 40) (41) (40) (40) (40) (41) (41) (41) (44) (42) (43) (40) (43) (44) (44) (41) (47 42) (50) (48) (41) (43) (51 43) (65) (46) (55) (41) (48) (59 45 43) (44) (58) (45 43) (43) (43) (50) (49) (49) (45) (47) (44) (51) (45) (45) (44) (44) (45) (49 41) (44 41) (50 41) (41) (42 41) (41 41) (43 42) (42) (43) (53) (42) (42) (42) (43) (41) (42) (42 40) (41) (42) (41) (43) (42) (41) (42) (83) (42) (41) (40) (41) (41 41) (41) (41) (41) (41) (40) (41) (41) (41) (40) (41) (40) (40) (41) (40) (40) (41) (40) (40) (40) (40 40) (40) (41) (44) (41) (41) (48) (41) (40) (42) (41) (42) (41) (41) (42) (42 41 41) (41) (41 40) (41 41 41) (43) (41) (41) (40) (40 40) (41) (41) (41 40) (45) (40) (41 40 40) (41) (40 40) (41 41 41) (40) (40) (40 40) (41) (40) (40) (41) (40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (41) (40 40) (40) (40) (40) (40) (40) (41 40 40) (41) (41) (40) (41) (40 40) (41) (42) (40) (40) (46 40) (41) (40 40) (40) (41 40) (41) (40) (41) (41) (40) (41) (40) (40) (40 40) (40 40) (41) (40) (40) (40 40) (41) (40) (40) (41) (41) (40) (47 43) (41) (40) (41) (41) (40) (40) (41 41) (40) (41 40) (40) (41) (83) (41) (40) (40) (41) (40 40 40) (41) (41) (40) (41) (42) (41) (44) (41) (41) (41) (41) (41) (41) (41) (41) (40 40) (41) (40) (41) (41) (41) (41) (41 41) (44 41) (46) (41) (64 44 41) (54 41) (40) (40) (42) (42) (41) (42) (41) (40) (41) (41) (41 41) (41 40) (42) (41) (41) (41) (47 42 42 41) (41 41) (44 40) (41) (43) (41) (41) (43) (41) (42) (42) (49) (43 43) (44 42) (47) (48) (44) (45) (51 46) (46) (50) (53 48) (44) (58) (48 46) (50 48) (58) (44) (48) (47 46) (62) (53 50) (57 52 49) (44) (49) (47) (47) (48 42) (55) (48) (50) (52) (45 44) (53 44 43) (46 42) (44 42) (49 44 42) (58) (46) (44 43) (44) (42 42) (45 43 42) (50 44 42) (43 41) (46) (43) (53) (45 42 41) (44) (47) (42 42 42) (41) (48 43) (42) (42 41) (46 44 42) (43 43) (50 42) (49) (41) (42 42) (44) (42) (42) (42 41) (42) (41 41) (41) (41 41) (41) (42) (42) (47 41) (43) (42) (42) (40) (41) (42 42) (42) (41) (43 41) (43) (41) (42) (41) (41) (41) (43 42) (43) (42) (42) (43 41) (41) (41) (40) (41 41) (44) (42) (41 41) (42 41) (41) (41 41) (46) (41) (43) (41) (41) (40) (41) (40) (41) (41) (40) (40) (52 40) (42) (41) (41 40) (43) (40) (41) (41) (41) (40) (40) (42) (41) (41) (40) (44) (40) (40) (40 40) (44) (41) (41) (42) (40) (40) (40) (40) (40) (40) (41) (41 40) (44) (40) (41) (40) (41) (40) (40) (41) (41) (40) (41 41) (40) (40) (41 41) (41) (42) (43) (43) (48) (40) (40) (40) (40) (42) (41) (42) (47) (41) (41) (48) (41) (41) (42) (42) (41) (41) (45) (41) (41) (41) (42 41) (42) (41) (41) (40) (42) (42) (42) (41) (42) (41) (41) (42 42 41) (41) (42) (42) (41 41) (41) (42) (40 40 40) (41) (40 40) (41) (40) (41) (43 42 41) (41 41) (41 40) (41) (41 41 41 40) (41 41) (41) (41) (41) (41) (40) (41 40) (41) (41 41) (40) (41 41) (41) (41) (41) (40 40) (40) (40) (41) (40) (41) (40) (40) (41 40 40) (41 40 40) (40) (41) (40) (40) (41 40) (41 40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (41 40) (41 40) (40) (40 40 40) (40) (41) (40) (40) (40) (41) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40 40) (40 40 40) (41) (40) (40) (40) (40) (40 40) (40) (40 40 40) (40) (40) (40) (41 40) (40 40) (40) (40) (40) (40) (40) (40) (40) (41) (40) (40) (40) (40) (40) (40 40) (40) (40) (41) (40) (40) (41) (40 40) (40) (40) (41) (41) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (52) (40) (40) (40) (40) (69) (40) (40) (48) (52) (48) (44) (44 40) (44) (43) (40) (42) (43) (40) (45) (40) (41) (55) (45) (42) (46 44) (47 44) (47) (45) (48) (51) (47) (46) (51) (49) (46) (44) (41) (42 42 42 41) (42 42) (43 42) (43) (41) (43 41) (43) (42) (43) (43) (41) (43) (41) (41) (42 41 41) (40) (41 41) (41) (41 41) (43) (41) (40) (41) (41) (41) (41) (42) (41 41) (41) (41) (41) (41) (41) (40) (42) (40) (40) (41 40) (40) (40) (40) (40) (41) (40) (41) (41) (41) (40) (40 40) (40) (41 40) (40) (40) (41) (40) (40) (40 40) (40) (40 40) (40) (41) (40) (40) (40) (40) (40) (40 40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40 40 40 40))) :loffset (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0 0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0) (0) (0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0) (0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1 1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1 1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1 1 1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1 1 1) (1) (1 1) (1 1 1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1 1 1 1) (1) (1) (1) (1) (1 1 1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1 1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1) (1 1 1) (1 1 1 1) (1 1) (1 1) (1) (1) (1 1 1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1 1 1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1 1) (1) (1 1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1 1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1 1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1 1) (1 1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1 1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1 1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1) (1) (1) (1 1) (1) (1 1) (1 1 1) (1 1 1) (1 1) (1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1 1) (1) (1 1) (1 1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1 1) (1) (1) (1) (1 1 1) (1 1) (1 1) (1) (1 1 1 1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1 1 1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0 0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0) (0) (0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0) (0 0 0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 2" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 766 343) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 733 401) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 19) "(4164)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC 3" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 915 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INHARM-SER 3" (quote inharm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "distortion" "DIST" 1) (om-load-inputfun (quote input-funbox) "number of elements (partials)" "NPART" 1))) (om-make-point 904 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 46" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 928 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 67" (quote list) (quote nil) (om-make-point 952 41) (om-make-point 36 28) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 8" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 970 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 7" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 904 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F 3" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 870 28) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 66" (quote list) (quote nil) (om-make-point 1008 0) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 65" (quote list) (quote nil) (om-make-point 981 0) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 64" (quote list) (quote nil) (om-make-point 942 0) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 63" (quote list) (quote nil) (om-make-point 915 0) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 62" (quote list) (quote nil) (om-make-point 870 0) (om-make-point 44 28) 4164 "4164" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 6" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 911 481) (om-make-point 60 105) (let ((thechord (make-instance (quote chord) :lmidic (quote (9720 5688 4032 3132 2556 2160 1872)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 3 (om-make-point 1366 725) (om-make-point -8 -8) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 45" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 921 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 6" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 936 388) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 61" (quote list) (quote nil) (om-make-point 974 360) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 60" (quote list) (quote nil) (om-make-point 947 360) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX 3" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 911 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 5" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 914 225) (om-make-point 60 105) (let ((thechord (make-instance (quote chord) :lmidic (quote (4164 5244 5876 6324 6672 6956 7196 7404)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 3 (om-make-point 1366 725) (om-make-point -8 -8) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 41" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 514 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 34" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 325 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 43" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 577 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 38" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 439 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 33" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 283 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 27" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 91 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 26" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 85 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 25" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 58 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 34" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 289 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 32" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 226 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 30" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 172 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 28" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 118 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 59" (quote list) (quote nil) (om-make-point 322 799) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 58" (quote list) (quote nil) (om-make-point 361 799) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 57" (quote list) (quote nil) (om-make-point 388 799) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 56" (quote list) (quote nil) (om-make-point 415 799) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 55" (quote list) (quote nil) (om-make-point 442 799) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 54" (quote list) (quote nil) (om-make-point 469 799) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 53" (quote list) (quote nil) (om-make-point 496 799) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 52" (quote list) (quote nil) (om-make-point 523 799) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 51" (quote list) (quote nil) (om-make-point 550 799) (om-make-point 26 28) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 39" (quote list) (quote nil) (om-make-point 577 799) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 38" (quote list) (quote nil) (om-make-point 610 799) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 44" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 604 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 44" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 610 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 43" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 571 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 42" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 541 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 42" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 547 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 41" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 520 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 40" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 493 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 40" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 487 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 39" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 466 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 39" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 460 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 38" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 433 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 37" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 412 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 37" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 406 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 36" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 385 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 36" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 379 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 35" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 358 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 35" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 352 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 18" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 514 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 24" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 610 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 50" (quote list) (quote nil) (om-make-point 1 799) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 49" (quote list) (quote nil) (om-make-point 40 799) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 48" (quote list) (quote nil) (om-make-point 67 799) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 47" (quote list) (quote nil) (om-make-point 94 799) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 46" (quote list) (quote nil) (om-make-point 121 799) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 45" (quote list) (quote nil) (om-make-point 148 799) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 44" (quote list) (quote nil) (om-make-point 175 799) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 43" (quote list) (quote nil) (om-make-point 202 799) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 42" (quote list) (quote nil) (om-make-point 229 799) (om-make-point 26 28) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 41" (quote list) (quote nil) (om-make-point 256 799) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 40" (quote list) (quote nil) (om-make-point 289 799) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 32" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 250 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 33" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 256 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 31" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 220 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 31" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 199 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 30" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 193 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 29" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 166 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 29" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 145 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 28" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 139 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 27" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 112 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 26" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 64 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 25" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 37 827) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 24" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 31 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 23" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 4 862) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 22" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 325 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 21" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 604 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 20" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 571 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 23" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 577 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 19" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 541 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 22" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 547 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 21" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 520 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 17" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 487 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 20" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 493 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 16" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 460 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 19" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 466 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 15" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 433 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 18" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 439 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 17" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 412 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 14" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 406 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 16" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 385 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 13" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 379 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 15" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 358 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 12" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 352 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 37" (quote list) (quote nil) (om-make-point 610 693) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 36" (quote list) (quote nil) (om-make-point 577 693) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 35" (quote list) (quote nil) (om-make-point 550 693) (om-make-point 26 28) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 34" (quote list) (quote nil) (om-make-point 523 693) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 33" (quote list) (quote nil) (om-make-point 496 693) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 32" (quote list) (quote nil) (om-make-point 469 693) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 31" (quote list) (quote nil) (om-make-point 442 693) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 30" (quote list) (quote nil) (om-make-point 415 693) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 29" (quote list) (quote nil) (om-make-point 388 693) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 28" (quote list) (quote nil) (om-make-point 361 693) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 27" (quote list) (quote nil) (om-make-point 322 693) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 10" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 283 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 58 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 11" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 4 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 26" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 80 917) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 9" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 250 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 8" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 220 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 7" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 193 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 6" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 166 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 5" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 139 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 4" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 112 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 3" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 85 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "FUN1" 0) (om-load-inputfun (quote input-funbox) "number or list" "FUN2" 0))) (om-make-point 31 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 14" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 289 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 13" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 256 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 12" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 226 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 11" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 172 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 10" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 145 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 9" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 118 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 8" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 91 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 7" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 64 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 6" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 37 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 25" (quote list) (quote nil) (om-make-point 289 693) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 24" (quote list) (quote nil) (om-make-point 256 693) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 23" (quote list) (quote nil) (om-make-point 229 693) (om-make-point 26 28) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 22" (quote list) (quote nil) (om-make-point 202 693) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 21" (quote list) (quote nil) (om-make-point 175 693) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 20" (quote list) (quote nil) (om-make-point 148 693) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 19" (quote list) (quote nil) (om-make-point 121 693) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 18" (quote list) (quote nil) (om-make-point 94 693) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 17" (quote list) (quote nil) (om-make-point 67 693) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 40 693) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 5" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 199 721) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 1 693) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 268 586) (om-make-point 87 105) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8640) (5056) (3584) (2784) (2272) (1920))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 498 481) (om-make-point 87 105) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4386) (5226) (5718) (6066) (6336) (6558) (6744) (6906))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 7" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 333 481) (om-make-point 87 105) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4944) (6024) (6656) (7104) (7452) (7736) (7976))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 6" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 433 586) (om-make-point 87 105) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (4920) (3480) (2700) (2220) (1860) (1620))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1366 725) (om-make-point -8 -8) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 500 360) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 13" (quote list) (quote nil) (om-make-point 473 360) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 4" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 437 481) (om-make-point 60 105) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400 4920 3480 2700 2220 1860 1620)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point -8 -8) (om-make-point 1366 725) 3 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 4" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 447 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 5" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 462 388) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 3" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 272 481) (om-make-point 60 105) (let ((thechord (make-instance (quote chord) :lmidic (quote (8640 5056 3584 2784 2272 1920)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point -8 -8) (om-make-point 1366 725) 3 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 282 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 4" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 297 388) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 335 360) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 308 360) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX 2" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 437 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 272 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 440 225) (om-make-point 60 105) (let ((thechord (make-instance (quote chord) :lmidic (quote (4386 5226 5718 6066 6336 6558 6744 6906)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point -8 -8) (om-make-point 1366 725) 3 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 275 225) (om-make-point 60 105) (let ((thechord (make-instance (quote chord) :lmidic (quote (4944 6024 6656 7104 7452 7736 7976)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point -8 -8) (om-make-point 1366 725) 3 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC 2" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 441 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 276 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INHARM-SER 2" (quote inharm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "distortion" "DIST" 1) (om-load-inputfun (quote input-funbox) "number of elements (partials)" "NPART" 1))) (om-make-point 430 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 454 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 478 41) (om-make-point 36 28) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 3" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 430 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 396 0) (om-make-point 44 28) 4386 "4386" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F 2" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 396 28) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 468 0) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 441 0) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INHARM-SER" (quote inharm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "distortion" "DIST" 1) (om-load-inputfun (quote input-funbox) "number of elements (partials)" "NPART" 1))) (om-make-point 265 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 289 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 313 41) (om-make-point 36 28) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 331 28) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 265 28) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 231 28) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 369 0) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 342 0) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 303 0) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 276 0) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 231 0) (om-make-point 44 28) 4944 "4944" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 94 402) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 19) "(4944 4386)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 127 343) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 143 232) (om-make-point 87 111) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6528 7238 6994 5402 5246 7914 7360 6048 8368 7612) (6558 5310 4230 8380 7986 7886 7426 8318) (7082 7656 7530 5110) (5900 5550 8118) (6710) (7342 8274) (7828 7268) (7496 6910) (7680) (8374 6212 8052) (6624) (7126 6864) (8334) (4784 7206 5656) (4396 7986 7870) (7050) (8370 7530) (8110) (5316 7654) (8388) (6752) (6088) (8054) (6324 7370 7288 5504 8520) (5986 7812 7644) (8398) (7016) (6952) (5086) (5860) (6790) (7984) (4858) (7576) (7448) (8274) (8072) (7382 8558) (4862 7762 8412) (7088) (5790 6830) (7996) (7864) (6128 7800) (5330 7078) (4536 7708 7346) (7100) (8038) (5934) (6394 7264 8576) (6754) (7446 7926) (7618) (7066 4650) (6628 7758) (6022) (7982) (6208 8352) (5696) (4270) (7524 7710) (7092 7874) (6390 8016) (6048) (6722) (7230) (7626 7378) (8286) (7070) (5428 7788) (7306 6604 8444) (8518) (6370) (7294) (5218) (7770 6880) (7368 6610 8010) (8476 7822) (4872 8416 8582) (7646) (6228) (6844 8334) (8088) (5884 8458) (7126 7638) (7536) (6788) (7436 8306) (8418 8018) (7058) (7830) (7702) (4548 5314 7266 5968) (8336) (6080 8082) (5684 7568) (4472) (6436) (8028 7808 8582) (8468) (8130) (5078) (8180) (7986 6074) (5388 8420) (7896) (6890 8430) (8232) (7588) (7258) (8140) (6654 8048 7410 8552) (4240 8406 7796) (6934 6178 7682) (7370 7116 7610 8176) (8014) (4524) (8252 8210) (7452) (7890) (6882 6300 8098) (5674 6818) (8596) (7180 7736) (8064) (4624) (7412 6058) (6870) (8030 7984 8312) (8582 8502) (7834) (6036 8392) (7314) (6400 8330) (6310 7354 8180) (8442) (7376 6664) (5768) (8538 7750) (6168 8508 8112) (6794 5648 8026) (7608) (7058 6924) (5984 8238) (7220) (6040) (7346 8054) (6754 7666) (6556) (6994 7730 7620 6082 8166) (4774) (5206 4276 7640) (7502) (7206 6448) (8400 7876) (7372) (7144 4794) (6650 7660) (4042) (8506) (6170) (7444) (7654) (5476 7048) (7986) (8142) (7288) (6870 8562) (6198) (7838) (7076 5886) (4482 8518) (8280) (8020) (7302 5556 7582) (8094) (4490 7784) (5218) (7422 7808) (7150 6074 8344 8160) (8074 7880) (5658) (8288) (8102) (5332 6534) (6848) (6600) (6944) (7430 8006) (4378 5658 8328) (8540) (7266 6382) (7174 6504 6932) (4004) (8116 7836) (6204) (4840 6400) (8100 6792) (7310 7804) (7564) (6602) (7270 4628 8004) (7956) (6266) (7772) (5628 7330 8160) (7506 8010) (7444) (6524 5098) (5802 7792 7620 6892) (6374) (4544 7870) (6896) (7430 7216) (6576) (7758) (7374 5594) (5154) (7060 7242) (4030 7936) (7396) (6458) (4490) (6078 7570 7020) (5864) (6612) (7616 7288) (7606) (5270 5720) (7004) (7096 6898 6408) (7450) (6014) (5740) (7120 6538 6654) (5142 7734) (7238) (8028) (8352) (5616) (7444 6868) (6752) (5822 7082) (7610 7528 7952) (7206) (7348) (6366) (7500) (6018) (7838) (5456 7360 4460) (7746) (5434) (7556 7452) (7196) (7462 6988) (4514) (5196) (5972) (7218 7302) (7836) (8000) (7078 6084) (6658 7628) (4990) (7830) (7556 8108) (7146 5336 7850) (4828) (6314) (7192) (7694) (7490 6550) (4544 8042) (6112 6920) (7304) (7596) (8330) (5860 7578) (7834) (6478) (6874) (4144) (5634 7526) (7982) (7224 6772 8014) (6054) (6964 7620) (6580) (7490) (4500) (7132) (7924) (7728) (6800) (6158) (8060) (5390 8096) (4692) (7282) (7622 7524) (8548) (6380) (7718) (5062 7472 7810) (6536 8358 8012) (6936) (5610) (7404 7456 6850 6622) (7234 7690) (8118 7914) (7962 6672) (6428) (4702 7106) (7300) (7452) (6778) (6416 6138 7922) (7132) (7950) (6402) (5192) (6146) (6322 8046 7774) (5876) (7212) (6680) (5164 4478) (6022) (5426) (7262) (6996 7838) (8016) (6552) (6874) (7676 7512) (5980 7362) (5236) (6982 7870) (7066 6636) (8108) (6080) (7342) (4342) (5544 7066) (6956 7924) (7546) (6208) (8042 7730) (7660 7030) (7678 6680) (6352) (5294 7342) (8026 7802 7730) (7424 7866) (7250) (6874) (6572) (8198 7608) (8288) (7792) (6688 5816) (7480) (5078 7170 7940) (6478 6964 6354) (7742 7590) (4754) (6008 6352) (7324) (6742) (4484 8012 7600) (7672 7042) (8262) (7242 6870) (7918) (5542) (7458) (5280 4408 6930 6762) (6364 7680) (4930) (7566) (5386 5120) (7086) (6836 6812 8036 7804) (7406) (5952 7752) (7298 6608) (8328 8072) (6242 7116) (7498) (6824 8362) (7624) (7468 7950) (6322 8054) (7034) (7750) (5470) (7210) (6624) (7606 7398 8026) (6108) (8040 7830) (7948) (6812) (5276 6056) (4058 8154) (6650 6362) (6908) (7154 7430) (7864) (7516) (5034 8202) (8114) (7716 7016 6756) (7414 7148 7932 7810) (7530) (6610) (7874) (8354) (6222 7682 6640) (6834) (7192) (4472) (7462) (7904) (7118) (7548) (6896 8072 7758) (6822) (7830) (7370 7092 5824) (4008 7830) (7452) (7900) (7294) (8334 8096) (8164) (6704) (7522 7036) (4280) (7714) (5490) (7330 8066) (5180) (8258) (8096) (5580 6370) (7886) (7558 7378) (6946) (6596) (8000) (5124 7914) (7796) (7188) (5100) (6044 7768) (4262) (5668 7508 6974 7990) (5098) (6514) (8320) (7516) (7890) (8060) (7706) (7340) (4824 8110) (6426 7982) (7028 6662 7974) (8210) (8282) (7318 7568 6186) (7454 6736 6114 7876) (7210 5656 5116) (7500) (7610) (8350 8104 7816) (8448) (7412) (4342) (5548) (7764) (4056 7040) (6206 7922 7860) (6626 7842) (7174 7646 7094) (5814) (6362 4000) (5250 7880) (8046) (7076) (7366) (8046 7856 7696) (6706) (7204) (7354) (7658) (4460) (7352 5494) (6106) (6440) (7704) (5828 5338) (7896) (7184 5076) (7664) (6642) (6976) (5816) (7240 6718) (7860) (6214 7934) (8274) (4674 7324 8200) (6878 6930) (4522) (5564 7996) (7412) (7628) (6762) (7876) (7480) (5314) (5848) (7120 7982) (6696) (7752) (6494 7338) (6092) (7052 5116) (7840) (6940 7998) (6384 4740 7224) (7374) (7124 7772) (6838) (6268) (5862) (7746) (6526) (4806) (8266 8032) (6268 8240) (5334) (7566 6840) (7506 6280 7024 6956) (4772 6586) (5756 8018) (6250 7914) (6358) (7632 6804) (5998) (5262 7812) (5508 8072) (7350 6924) (7584 7892) (6704 7998) (6408 8150) (5942) (7554 7294) (7456 8018) (6402 4498) (7910) (5822) (7098) (7564) (7538) (6296) (7746) (5364 6808) (6580) (7008) (4444 7904) (6708 6548) (7258 5242) (7288 5638) (6372) (4968 7696) (7836) (5428) (7242) (5720 4282 7482) (7100 7388 6540) (7658 6782 7932) (6038 7560) (7236) (8144 7686 8164) (6770) (7792 6374) (6080) (7276) (6866) (7462 7890) (7210 6934) (6958) (5702 5064) (4344 5548) (6684) (5920 7972) (6270) (4346) (6982) (8038 7744) (7310) (7486 6688 6322 8016) (5484 7848) (6912) (6460) (7654 4800 7832) (8204) (6318 6458) (7710) (7094 8074) (5998 8022) (4856) (5728 6608) (7440 5430) (6186 7230 7744 7860) (4548) (8492 8282 8542) (7762) (4898 8212 6824) (6234 8406) (8348) (7970 7868 8080) (8460) (6518) (6732) (8294) (8500 7274) (7898 7520 8056) (8334) (8546 5310) (7164) (6956) (8038) (5082) (6134) (7764) (5418 6952 8244 8136) (8448) (7152) (8554 7386 8446 8036 6630) (7826 5434 7452) (8376 6538) (8384) (8182) (4958 6092) (7642) (7274 6790 8208 7506) (8510) (7744 5674) (6058) (8330) (7198 8060 7442) (8082) (6680) (5456) (7298) (7478) (7684) (6990) (5360) (8328) (4338 7232) (7394) (5822) (6766) (8338) (7236 6230 8086) (8392) (6284) (8040) (7634 5602 8470) (7704) (8252 6820) (4428 6892) (8470 8226) (8580 6584) (6160 7412) (7754 7454) (8174) (6060) (7894) (7668 7178 7230) (7548 7416) (8326 5708) (7818 4844) (8524) (8084 5544 8408 6490) (7236) (8158) (6306 8362) (4434) (7742) (7458) (5926 8424 6648) (7270) (7674) (6304) (7038) (5870 8464) (4770 7334 8178) (5300 8404 8246) (7664 6756 6546) (6092) (7486 7876) (8594 7172 6692) (7110 8332) (4900 8450 8220) (7680) (6982) (8038) (7100 7282) (6638) (6726 8228) (8480) (6330) (7502) (5342 7686 6588) (8096) (7192) (6190) (8498 8252) (6564 8456) (7214 5298) (7724) (8564 6994 8390) (4970) (6086) (8504 5630) (7684) (6978) (7312 6576 6266) (8414) (5374) (8164 6698) (8528 4970) (7916) (8494 8218) (6054) (4154 7200 5548) (8422) (8098) (6510 7270) (8212 7396) (8464) (8044 8168) (8358 8258) (4776) (6984 6736) (7866) (5508 6612) (7172) (6098) (6894 7878) (8494) (4424) (4324 6450 7544) (8346) (7700 6574) (8406) (6258 8166) (8072) (7378) (5604 5350) (6138 8506 8188) (6986) (8598) (7898 6714) (5558 5098 7492 8258) (8422) (8162) (7696) (6364 7524) (7426 4368) (4908 7038 6568 7272 8278) (6118) (6392 8566) (8228) (5482) (8516 7666 6640) (6900) (8108) (7890) (8408 7696) (7828 7356) (5486 7060 6342) (4526 6626 8428) (8508) (7468 6928) (7624 6030) (5170 7200) (5632 8292) (6978) (8244) (7470 7330) (4828 8544) (6102 6598) (7312 6190) (8460) (7174 6276) (6010) (8576) (4080) (5418 5092 7318 8280) (6308) (7400 8038) (5748) (7166 5956) (8506 7690 6614) (7490) (7170 8310) (6380 5186) (6902) (6240) (4512) (8354) (6198 4826) (7122 7846) (8520 6996) (5278) (6504 8350) (4520 5932) (7320) (7150) (8522 7878) (5640 6970 6784) (4268 7604 7434) (8108) (8424) (6724) (7502) (5408) (8524 7836) (6504 8314) (6874) (7160) (5358 6632) (5272 7228) (6880 8196 8136) (6656) (7274 8524) (6958 8118) (6362 7010) (7888) (4074 7498 7728) (8342) (6832 6578) (7206 8364) (8526) (6072) (8502) (8072) (7084 6966) (6060) (5360 6832) (4336) (7426) (6566 8544 6336) (7364) (4992) (7136) (6112) (6432 6462) (7462 7654) (8548) (8034) (7212) (5112) (4128) (6322) (7364) (5668) (4506 5848 7516) (6682) (5696 6618 8272) (8070) (6178 7216 7022 8572) (8138) (7478 5506) (6736) (7884 7854) (6974) (4902) (7078 8572) (6476 8480) (7404) (5804) (7218 6660 4546) (8344) (6770) (8574) (6220) (5286 5674) (7008 7902) (4776) (8546) (7180) (6314 7728) (7168) (5944) (5000) (6980) (5798 6914 6312 8182) (7462 8048) (5502 8250) (7480 7352 8358) (5862 7846) (7320 6026) (5716 6622) (5352) (7286) (6276 6328 7944) (6818) (4596 7254) (7784) (6548) (7690) (4612 5956 6966 6596) (5580 7276 7480) (6306) (7834) (7210 7970 7706) (6874) (5602 7674) (8076) (7862) (6098 7230) (5404 6772 8512) (7320) (7472) (6028 6990) (7446) (7218) (4884) (5736) (6120 7876) (6664 7160) (7430) (4530) (6498) (7158) (7292 6582) (8530 6376) (5482) (7096 6886) (5856) (6634) (6312 6882) (7012) (7494) (4402) (6974) (6482 7162) (5574 7072) (7292) (4944) (7786) (7552) (7430 6902) (6668) (7286) (6868) (7478 6286) (5400 7578) (5852) (6970) (7288 6638) (4464 6348) (7580) (6880) (7232) (7894) (6122 5326 6448) (7648 6658) (7456) (6340 7066) (5216) (5910 6902) (7020 7888) (7278) (4400) (6392) (5872) (6490) (8052) (7858) (6938) (7624) (6780 7568) (7360) (7914) (5578 7414) (4986 5306) (6644) (5164) (7132 7580) (7730) (6504 7510 7366) (6920) (7708 6774) (7310) (7932) (6662) (5592 7224) (8020 7630) (5118) (6216 7846) (5836) (7070 6688) (7186) (5350) (6416) (5310 7988) (5712) (7024) (6770 4608) (8094 7910) (5938 7462) (6370 7752) (7574) (7292 6678) (4462 6724) (8050 7920 7822) (7286) (6762) (8106 7878) (5118) (6880 7596) (5986) (8120) (7052) (7572 6084) (7772) (7950) (6374) (7018) (7396) (5322 8090) (6908) (7088) (4908) (7582) (7722) (5220) (6352) (7660) (4122 7542) (7166) (6786 7988) (7600 7930) (7084 5974) (4234) (7872 7806) (5782 7110) (4990) (5068 8088) (7688) (6926) (6316) (5596) (6650) (7580) (6396) (7654) (5028) (5502 7712) (6542 5922 6086) (6898 8130) (7214) (7628 5190) (6790 7834) (7042 6588 8530) (5830) (8142 7844) (5410 8050) (7292) (6062 5146) (4518) (6420) (7624 7766) (5352 7698 7042 8020) (6730) (5350) (6374) (7422 7108) (7652) (7010) (5886 5526 7164) (7596) (7272) (6086) (5600 6798 5040 7998) (7592) (7854) (7428) (6904) (5994) (7336 7658) (8048) (6378) (5840 7198) (6980 7490) (7346 6660) (8570 6786 8384) (6240) (7692) (7236 6002) (6260) (7840) (7506) (5142 7064) (7138 6978) (7934) (7570) (6414 7346 6884) (6960) (7300) (7420) (6352) (4838 8070) (7548 7740) (7134) (7172 6062) (6910) (4984 7538) (5732) (7080) (4512 6932) (5964) (7214) (7680) (4982) (5828 6412) (7386) (6192 7010) (7554) (7092) (4140 6028 7450) (6306) (7124 5322) (4050 7488 7840) (8548) (8038) (6622) (7780) (6420 7444) (7110) (7348 7576) (6018) (7510) (4792 7006 5524) (7274 6728 6314) (7736) (7316) (5222 7178 6588 4988) (7418) (7626 7076 6376) (6514) (6268) (7886 8148 7802 7182) (6386 5522) (6654) (7284 7762) (6616) (8032) (5750) (4146) (7260 7498) (5740 7726) (8196 6896 6348) (4178) (8012) (5792) (6880) (7310 7548) (6850 4564) (7748 8368) (8420) (8310 5144 8126) (7458 5808 7714) (8180 7866) (6658) (8256) (7226) (8360 6932 8052 7958) (5390) (7064) (6150 4692 8252) (6522 6856 8452) (8232 5222 7662 8540 8142) (7226 7192) (4600) (6668) (7434 8578) (4652 6978 8452 8038) (7714) (5396) (7634) (6812) (6230 8414) (8580) (8120) (7214 7942) (8170) (7798 8486) (7784) (4454) (5230 6916) (8486) (7674) (7264 8188 8406) (5206 4918) (6498 7860) (7232) (8596) (7958) (8428) (5796) (8232 5944 8318 8130 6944) (5078 7258 7438 7176) (8380) (6552 5178) (4004 7640) (6898) (7846) (7264) (7194 8364) (6698 5838 7412) (5092 7960) (4746) (4828 7004 7636 8100) (8204) (7454 4432) (7796) (5122 8464) (7318) (7296) (8186 6790 8090) (4640 8346) (7782 5392 6858 8594) (7120) (4820 7432) (8518) (8410) (6518) (7392) (8594) (6842 7794) (7210 7674) (5282 8126) (6706) (8374) (8166) (7414) (4348 7030) (8160) (5868 8316) (7752 8426 8502) (4028) (7392) (8450) (8126) (4950) (8494) (8596) (7718) (8358) (6710) (7640 7902) (8264) (4278 7792) (7712 5134) (5914 7926) (6956 6690) (8352) (5622 7618 7896) (8454) (8454 7836) (8030) (5200) (7220) (5350) (8330) (6962 6566 8600) (8124) (4004 8498) (7460 8304) (7904) (8040) (6660) (5870 5400 8400) (7432) (7340 7826) (8342 8492) (8174) (5258) (4746 7216 8366 7626) (4910) (8270) (6672 7830 6936) (8170) (8548) (7890) (8038) (6948 7632) (5444 7340 6672) (7880) (4522 7434) (8106) (7976) (8268) (6984 7946) (7230) (6126) (8386) (6858 8516) (7362) (5268) (8438) (8264) (6528 8568) (5916 7642) (7228 6848 8550 8148) (7454) (8372 7322) (4688 7850) (8134) (5818 6716) (7820) (7018 8582) (7466 8238) (7412) (6978) (8314) (7380) (8444) (6690 7904) (7256 5366) (8314 8592) (4318) (7454) (8090 7386) (7866) (7972) (8200) (7822) (4190) (7814) (5012) (6116 6680) (7288) (4428 8306 8202 8598) (7966) (7790) (7542) (7016) (7886) (7528) (6972 4470) (8246 7792) (6222) (7406) (4080 5910) (7474) (7720) (8304 7858) (6968 7392) (7208 8522) (5092) (8324) (4526 7798) (7286 6726) (6528 7646 7302) (6678) (8124) (6792) (7446) (7814) (7640) (8368) (6986) (7754) (6740) (7494) (4126 8250) (7198) (6410 7378) (6178) (5088 7394 4892) (5754) (6628 7476) (5276 7640) (6920) (5938) (7018) (5212 7896) (6710) (7232) (4104 7416) (7614) (5404) (7662) (4404 6958) (7888 7712 7458) (7632) (7218) (7284) (7024) (7554 8416) (6530) (7716) (6988 6754) (6560 7434) (4448 7402) (5438 7454) (6146 8194) (7092) (5092) (7326 7216) (6984 6682) (5430 8176) (5848 7838) (7256) (8062) (7604) (6148 5048) (7296) (6468) (8254) (8036 6854) (5794) (7878) (6928) (7522 7722) (5362) (7726) (7556) (7194 7662 6676) (5894) (8024) (4026) (5050) (7196 7968) (6740) (7568) (7426) (6532) (6994) (7746) (8326) (5346 6018 8182) (7678 6724) (7194 8024 6642) (5994) (7356 7152 7698) (6868) (7554) (6780) (5234 5878) (7410 7310 6654) (7816) (5706) (7094) (6844) (4378 6400) (7738 5830) (7470) (6510) (7302) (8184) (6264 6986) (6398 7618) (7408 7084 6900 8084 7798) (4152) (6702) (4704 5050) (5842 7890) (7306 8134) (4078) (6178) (5660) (6106 7182) (6440) (7068) (5960 7670) (5504 7492) (5828) (4844) (7082 7308) (7588) (5650 4510 4566) (6846) (6916 7894 6514) (6638) (4272) (5054 5440 7984) (5966 7664 6568) (7500) (6174) (5824) (5350 7324 7934) (6484) (4708 7386) (6370 6826) (6096 7906) (7466 7664) (6446) (7218 6978) (4570 5578) (4776 7240 7060) (6576) (5956 6194 7888) (5344 7362 6954) (8546) (7420 6734) (6354) (7674) (4432 5798) (7332 8072 7798) (6112 6984 6764) (5368 6540) (5962 6676) (4192 4548 7176) (5676) (7346) (6100) (4746) (6444) (5362) (7618) (7450) (5828) (7132) (6726) (6954 7410) (6080) (4780) (7060) (7218) (5144) (6104) (5808 7288 7646) (5530) (7446 7014) (6516) (5912) (7232) (4136) (7024) (7562) (7330) (5520) (6380 7418) (6136) (5910) (6252) (6862) (5720) (5112 7146) (6840) (5734 5490 6636) (7318 7014) (5862) (4762 7540 7300 7110) (6176) (5292 6032) (7078 7340) (7954) (6078 6152 6630) (7438) (5748) (4222) (6422 7192) (6136) (7008 6130) (4028) (7436) (6464) (6232) (5934) (7122) (7268) (7460) (4306 6504) (5016) (5406 6626) (7318) (7352) (5756) (5212) (5946) (6022 6830) (5024 5534) (7724) (6754) (7228 6802) (7576) (6190 5196 7616) (7508 7146) (5606) (4596 7276 7686) (5846) (7046 6582) (6384) (7520 6760) (5990 7014 6172) (7446 6548) (4236) (8440) (7180) (7568) (6826) (7528) (5710) (6132 7342) (5118) (7496) (6910) (5216 7202) (5990 6522) (7408) (5478) (7240) (4130 4592 6636) (7470) (5334) (6308 6834 7694) (7302 6984 7838) (4724) (5364 5972 6672) (6390) (7094) (6926 7574) (7282 7702) (4576) (6218 7338) (7132) (7438) (5036 6382) (7302 7222 6734) (6790 6458) (5330 5536 7780) (6972) (6330 7438 7186) (7528) (6638 7758) (8192 7900 8092 7966 7866) (5966 8290) (4978) (7258) (6866) (5972) (7560) (5310) (7182) (4134 6936) (6416) (6568) (7436 7900) (5578 7862) (7002 6802) (6650) (6368) (4800 7572 5854) (7638 7932) (8114) (7142) (7964) (6170) (5550 6336) (6412) (7120 4700) (7282) (6538) (6970) (7460) (5472 7068) (6158) (5958) (7166) (5304 4368) (6922) (7964 7820) (8026 7766 8412 8236) (8004 4410 8462 7748 6298) (5564) (6796 8172) (8386 7688) (8068) (6310) (5688) (4058 8106 8344 8274 8514) (7502) (8412) (7808) (8304) (7136) (7322 8492 6720) (4212 6128 7664) (8162) (7836 6920) (6686 8364) (8016 8518) (8158) (5312) (7372) (7958 7186 4322 7668 7514) (6502) (8082) (8296) (7972 6920) (8426) (7572) (8028 7802) (8092 7294 4892) (7114) (8546 8334 8284 7634 6720) (7384) (4490 8384 7570) (7830 6316) (7266 4038) (8342 7604) (8592) (7294 6910 7874) (5500) (4854) (7800) (8222 8250) (8566) (5616) (6438) (8544) (4354) (5248) (8098) (7354) (8396 7620) (6026) (6346 8234 8556) (5616) (7190 7726) (5110) (6716) (7384) (7912 7856 8264) (8348) (5340 4142) (7616) (6282 7870 8600 5996) (7938 6908) (4632 8186) (7156 8534) (8106) (7566) (5344 7846) (5038) (7432) (8510) (5312 6014) (8300) (4784) (7304 8072 5090) (8274) (8422) (7980) (7640) (6916) (5630) (8482) (7976 8358 6136) (4786 7788 8256) (7732) (5468) (8116) (8232) (6738) (5598) (7346 6870) (8422 6148 8248 7864) (8496 5638) (6938 8380) (4346 7656 8572) (7522) (4564) (6664) (8162) (8134 6018 5648) (8370) (4348 7506) (7914 7802) (5118 8104 6846) (8240 7390) (8292) (4652) (7684) (6010 5636 8384) (8394 6898 4790) (7572) (8108 7822) (8548 7344) (8440 8044) (6984 7506) (4774 8196 7944 7662) (4276) (6072) (7310) (6756 7726) (8356) (7798) (6488 6880) (8380) (7572 7148) (5628 7944 7512) (8018 8520) (7334) (6700) (8430 7798 7674) (5100 6436) (4440 7512) (8508 8596) (8188) (7950) (4008 7408) (7792) (7242) (8246) (6498 7102 8332) (7802) (7342) (8288) (8584 7928) (8440 8166) (4398) (7428) (6162) (8152) (8582) (6490 8500 8396 7926) (6754 5608 4216) (4842 8046 8206) (6036) (8488 8308) (7932) (7134) (6450 8580 8408) (7446) (4142 7962 7694) (8222) (8514) (6482 8200) (6476 5552 7658) (8390) (8278) (6704) (7436) (5328 8222) (8442) (7344) (8310 7416) (7740 7662) (8560) (4290 7140 8396) (8158) (5756 8580 8346 7678) (5564 7778 7344) (6714) (6992) (7432 5630) (7946 7130 8142 7876) (6124 8310 7638) (4588 6580) (5414 8166) (8468) (7838) (7360) (6188) (7916) (5822) (7840) (8196) (7152 6676 8420) (6948 8550) (8134) (8090) (6126 8398 8052 7494) (8384 8578 7732) (4644 5998 6814 8188) (7834) (7876) (8480) (4198 8228 7386 8056) (7892) (5556 8412 8080) (5650 5988) (8464) (7644) (7958 7492) (8322) (5630 8540) (8218) (7856) (7686) (6226) (6928) (6724 7566) (8546 8468) (5752 7016 8280 8042) (5992 7822) (8114 7846 7476) (7692) (7288 8502) (8560) (8208 7888) (7994) (7052) (5474) (8392 7426) (6854) (5976 7918) (6214) (8256 7792) (7338) (8012) (6764) (6946 8448 7740) (5406 8282 8524) (7416) (8590 8138) (6310) (6774 8176) (4828 8504 8006 7554) (7836 8266) (6056) (6638) (5882) (7292) (6974) (8234) (5672) (7780) (6884 8600) (8488) (7898) (6032 8158) (6354 6670) (7312) (7956 7602) (8252) (4736 6064 6592) (7794) (8328 8446) (6364 7840) (8362) (7646) (4600 8496) (6892 8590 8226) (7982 7926) (7504) (4198) (8328) (8520) (7294) (5864) (6338) (8350) (5288) (8450) (7042 7996 7806) (7340) (6380) (5644 8550) (7592) (6880) (4174 8210) (6906) (8576) (7298) (4998 7488) (6324 7098) (8302) (5428 6168) (8018) (6628 8458 7780) (7480 8272 7910) (5602 6862) (8550) (7300) (5430 6792 7944 7780) (6012 7090 8580) (4812) (6382) (8468 8318) (5234 8126) (7014 6700 7794) (8346 8258) (8006) (7282) (6352 8448 5862) (7660) (5090) (7896 7770 7424 8534) (5574 8158) (7088 6928 8306 7520) (8488) (7314 8580) (6690) (4310) (5690) (4422 6888 8240 7848) (7314) (8020) (8434) (5070) (4268 7510 7438) (7774) (5864 7946) (7328) (6812 8530) (8282) (4104) (5572 7834 7916) (8188) (7048) (7512) (7056 8278 7948) (5866) (5988) (6718) (8246 7674) (8574) (6652 6932) (8546) (5634 7976) (6176 8302 7424) (7800) (8596) (8152) (5024 8022) (8412) (7004 7310 8470) (4468 5864 6634 7460) (7578) (7854) (8276 7710 7078 8490) (7984) (4276) (8244) (6278) (6274 5098 7612) (6888) (8198 7416) (7298) (8008) (6738 7014 7886) (6018 7644 8478 8300) (6360) (5188) (7106) (7480 8466) (7304) (6684 8026) (5078 8160) (6384) (7466) (8576 8262) (7862) (5488) (8238) (4490 6848) (7852 7600) (6230 7138) (6962) (4872 8016) (6690) (8338) (5138) (4316 7478 7670) (7316) (8376) (7088) (7832) (4310 7774) (6980) (6666) (5126 8370 7902) (6748 7612 7156 8184) (5156) (5786 7776) (8514) (6370) (6792 7516 7612) (5766) (7096) (7856) (6274 7300) (5908) (8342) (7632 7458 8598) (6018 8044) (8494) (7808) (7728) (6930) (5552 7282 8376) (8498) (4950 6946 6340) (6146) (7346) (6668) (5972 6834) (5886) (4236 7442 8456 7986 7588) (7820) (6396) (7254) (6094 7060) (7062) (5640 7384 7182) (4400 7478 8262) (5134 6710) (5674 7954) (7080 8014) (7334 8298) (6402) (5998) (7364) (7238) (5422) (7902) (7524) (7748) (7080) (7172 6966) (6106) (7580 7500) (6632) (5968 8188) (7432 7354 8482) (7700) (7286) (6670) (6358) (7432) (8266) (4474 5692 8464 7890) (6778) (6260 5898) (6632 7070) (7672) (7992) (7800) (4970 7298) (4092 6550) (7134) (5328) (7936) (5870) (6862 7736 7456) (4216 6950 7408) (6894) (6166) (6690) (7944) (5122 5484) (4386 6798) (6412) (6360 6810) (7062) (4092) (6200 7610) (4134) (5722) (7032 7556) (6294) (7304) (7118 6576) (5174) (7126 5872 8184 7844) (6308) (6930) (5424) (7012) (7482 7298 7958) (5196) (6832) (4580) (5902) (7322 7708 7144) (4844 7002) (5994 7002 7496) (6876 6244 6116 7344) (7720) (7834) (6684) (5808 6596) (6056 7394 6920) (4506) (6172) (7180) (6526) (6348 7580 7070 8490 8284 8190) (5888 6638 7952) (7346 8028) (7558) (6982) (7226) (5616) (4138 7076) (6912 7716) (6716) (4542) (5412 7738 7208) (7792) (6008) (8556) (4086 7518) (5130) (6394 7212 7040 8004) (6870) (5676) (4390 7724) (7004) (6368) (7448 7336) (4532 6682) (4076 6426 7424 7034 8526 7858) (7924) (5874) (4834 7548) (5702) (7184) (6828 7630) (8082 8334) (7496) (6400 5838 7068) (6512) (7246) (6898 7452) (6706 7078) (8194 7974) (7654) (6680) (6542 7448) (7270 6172) (7394) (7180) (6746) (6998 6478) (7610) (8024) (6194 7584) (7214 7684) (6538 7164) (6664) (7008 7820) (5898 6364 7504) (7156) (5056 7788) (4994 6054) (6922) (7042) (4014 7428) (4778 5936) (7324) (4914) (4154) (6706) (8004 8192) (8478 6188 7284) (5092 8330 7902) (7896) (7098 8272) (8488) (8116) (6584 8502 8222 7362) (8304) (4524 6194 7714) (6412) (8132) (7934) (8272) (4056 6998 8210) (5898 8552 8572) (6732) (6214) (5454 6676 7538) (8330 8510) (6946 7692) (4358 5204) (8190) (6190) (8396) (6546 8504) (7820) (5856) (7440) (4802 8342 7742) (6686) (8534) (7958) (6994) (5698 8498 7652) (5412) (8310) (5874 7370) (7806) (8116) (6496 6624) (6048) (5034 7936 8344 7386) (8372 7514) (8548) (7878 8102 8478) (5666) (4454 7378 8430) (5604 6630 7662 8074) (7156) (8348) (6728) (7926) (6788) (4458 8284) (8068) (5976 8420) (7934 7456) (6172 7810) (8494) (8154) (7016 6070) (8216) (8306) (6660) (6216 8186 8064) (8384) (7492) (4516 8146) (7002) (7942) (4114 8444) (7872) (6750) (4544 7950 7670) (8428) (5414 6002 7928 6212 7368) (8548) (8208) (5814 7488) (4816 6786) (6988) (5486) (7154) (4506) (6542 8546) (5786) (6654) (8298) (5318 6968 7548 6012) (8544) (8250 6662) (6312 4316 6222 8178) (5876 8580 7478) (4866 8302) (8058) (6710 8370) (7018) (4846 7770) (8448 8358) (8082) (5122 7694) (8068) (7540) (5658 6180 6530) (4132) (7484) (7872 7668) (8214) (8542 8156) (6156 7044) (6508) (5066) (7366) (8356) (8056) (5688 4488 8436) (8346) (8582) (7518) (7004) (5910 6558) (4502 8234 8398) (7938) (8338) (8568) (4232) (8150) (6590 7936 7372) (5470) (6012) (6520 7044) (4848) (7520) (4238 7874) (6970) (5442) (7372) (8322) (7828) (5166) (7196) (6522 7568 8150) (7926 6828 8426) (5840 4436) (7564) (7376 8580) (8504 8384) (4992 5786 8450) (6114) (7928 6996) (5432 8054) (5182) (8534) (5166 7182 8158) (6988 8512 8404) (8538) (4584 7382) (6538 8572) (5392) (7828 5994) (6330 7550) (6804) (4210 7190) (7818 8346 7392) (4860 8084) (7018) (5454 6566 7992 7548) (6208) (8178) (6810) (8372) (8548 7930 7380) (4614) (7824) (6314 6620) (7202 7504 8326) (7766) (7028 6548 8524 7924) (6214 7682 8164) (8254) (7156 6686 8430) (8470 7352) (4544 8042) (7164) (4130 6750 8138 7506) (8076) (8542 8254) (8106) (8506 7374) (6066) (6424) (7738) (8546 8474 8598) (6616 7116) (8362 8058) (7594) (6296 5388) (8310) (6380) (7542 8234) (6020 7698) (6530 7144) (7930) (7416) (7760) (4346 8254) (5470) (8474) (7574) (4678 6416) (6906) (6086 5762 7002 8510) (7706) (7518 7178) (8342) (4844) (7986) (5352 5906) (5530 7654) (8316) (7384 8442) (6984 6796 7924) (6270) (5060) (8240) (4492 6528 7150) (5646 7762) (8516) (7710) (7460 8434) (6402) (4792 8558) (7876) (5900 8320 8010) (8126) (6028 6944) (4004) (6660 7902 7142) (4648) (7728) (8022) (7830) (4896 8256 7470) (7198 7140) (7848) (6984) (6540) (8186) (8550) (8316 6998 7772) (7200 8440) (5170) (5768) (7972) (5826 8352) (4574 7482) (6378 7662 7442) (7116) (5342) (6578) (7972 8322) (6782 6894) (7834 8512) (7224 7750) (6242 7678) (5742 6894 7466) (4078) (7556 6540 8370) (6218) (7632) (5544 8538) (7982 7832) (7298 7098) (8216) (7388 7130 8114) (8294 8466) (7892) (8278) (6236 7404) (5922 7880 8014) (5366 8144) (7494) (7080) (8004) (7892) (4520 7646 7178) (6596 6922 7478) (5158) (7806) (8272) (8396 8266) (7898) (4872 6296) (5368 8302 7718) (8410) (5986 7906) (8512) (8528) (5262 6246 8290 7392) (4470) (6908) (7480) (7114) (6662) (6438) (4566 7036 8452) (5950 7552) (7830) (6602 8160) (8596) (5882) (5690) (8106) (7754) (7408) (7828) (7916 7360) (4826 6934 8160) (8430) (7602) (4906 8066) (7462) (7930) (6974) (7074) (4482 8418) (6872 8296 8080) (8074) (5878) (7904) (6532 7496) (7228) (6170 8514) (6698 7446) (4660 8058) (7806) (6930 7102 7588) (4284 7996 7282) (8592) (5452) (7932) (7472) (6472) (7830) (5746) (7884) (6242) (7542) (8576) (8566) (7272) (5556 7582 7758) (7432 7512 6912) (7646 8414) (6194 6844) (5752 7112 8048 7354) (6602 7876) (7664) (5090) (7200) (8590) (7504) (4536) (5742) (7320) (6932 7268) (6318) (7952) (6478 6818) (7174) (5804) (7536) (5446) (6460 7734) (5606 7160 8584) (4174) (5914 8544) (7130) (7344) (4898 7482) (7026 8194) (8092) (7618) (7644) (7294) (4408 7146 8458) (6164) (6824 7570 7662) (8194) (7394) (6668) (5270 5894) (4062) (4888) (7414 7190) (7060 7486 8428) (6130) (7100) (5398) (6608 8126) (7278) (4534 7474 7320) (5294 5704 8280) (6976 7730) (8484 7826) (7564) (6712 8090) (7080 6944) (7948) (6060 8066) (4556) (7916) (6784 8596) (7588 5920 7770) (8328) (8192) (4108 7442 7196 6570) (5888) (7924) (6270) (5638 8014 8556 8296) (7156) (7896) (6796) (5948 8428) (7498 7206 6596 8468 7700) (5530) (8224) (8008) (6410 4614 7194) (8116) (5104 8504 7770) (7974) (6532 7656) (4058 7164) (6950) (6384) (5072 6940) (7762 7518) (6036 8588) (8352 8470) (6632 8130) (6816) (8062) (7502 5906 5536 8450) (7894) (7772) (6870) (7658) (7232) (7948) (8320) (6218) (4102 7144 5970) (7510 5466 7766 6654) (7334) (4490 6530 7158) (7830) (5476 7498) (7832) (6372) (7012) (4476) (5718) (8110) (7114) (7626 6488) (7334) (6920 8412) (5898 7958) (5450 7684 6056) (7236 7832) (4280) (7360 6650 8052 7958) (7250 7396) (6606) (5690) (7814) (4466) (7496 8298) (5254 5882) (6996) (7126 8210) (6410) (4378 8062) (5012 7328 5784) (7712) (4538 7640) (7962 7764) (5494) (6794) (8040) (7360) (7486 6766 4080) (4870) (6934) (7240) (8474) (7870) (4776) (5714 5506 7664) (6564) (4880 6610) (6366) (8152 7900) (8088) (8452 8256) (7846) (7022) (7010 5540) (6398 6916 5914) (7952) (4288 7150 8590 7868) (8146) (4546 7738) (6582) (6484) (6770 8590 7910 7636 7214) (8214) (5358 6940 8078) (6250 5942) (6684) (5616 7364) (7078) (6112 8590) (6512) (7514 7276 7920) (8442 7720) (6226) (4850 5490) (7208 5928) (6990) (8042 7736) (7326) (6522 4044) (6242) (4516 8180 7584) (7490) (6722 8418) (8080) (4044) (5554) (6312 5950 7290) (7780) (7562 7116 4922) (7360) (5434 7914) (6934) (8128) (6392 7446) (7018) (7242) (8042 7834) (6178) (5290) (7624) (4116) (6480 7660) (7472) (7602) (6070 7878) (8020 7724) (4874) (8140) (6642 7076 6550 8404) (5544) (7214) (7514 7908) (6812 8582 8150) (6102 7390 5660) (6782) (8042) (8228) (7704) (5864) (4516) (7926 7634) (8080) (7014) (8194) (6212) (7332 7572 7004) (5190 7750) (5736) (6434 8302) (6758) (7912) (8474) (7226) (6880 6062) (8498 4112) (8390 8028) (5662 6844 8232) (5048) (7808 8538) (8426) (8368 7134 8116) (5048) (8336 8470) (6970 6776) (7366 8504) (8330 8232) (8104) (5134 7964 7842) (6812) (8466) (7354) (8290) (8392) (6958) (7964 7778) (6018 8478 8516) (8314) (7326 8236) (8382 7784) (7110) (6624 8486) (7614) (8308 6932) (5918) (7250) (6816) (6036) (7788) (7310) (6438 7140 8486) (8304 8412) (7832) (8110 7756) (8382) (6950) (8576) (8480) (7774) (8362 5960) (8398) (7308 6968) (8124) (8486) (8370 6908) (8328 7528) (7336) (8256) (7448) (7192) (8270) (8510 8378) (8100) (8384 7812 7562) (7340 6992 5426) (5874 6056 8240) (8434) (8348) (8550 7464) (8434) (5454) (7322 8394) (8050) (8354) (7314 8220) (7132) (8422) (8280 8574) (6286) (7078 5066) (7984) (8366) (6052) (7056 8312) (8528) (7414 7912) (8578) (8330 8540) (8262) (5454 8508 7956) (7564) (7116 6836) (6578) (8034) (8450 8262 8512) (7934) (7800) (8392) (6954) (8476) (7178 8214 8100) (8544 8288) (5880) (8488 7476) (7360) (7110) (7338) (4390) (8424) (8264) (8496) (5992) (7126) (7004) (8064) (7756 4802) (8378) (7372) (7082) (7394) (8344) (8420) (6042) (7452) (8380 8012 7762) (7512) (4804 8220) (8480) (7404) (8390) (8540) (4074) (7108) (8376) (8290 6006) (8392 8504) (7110) (5350) (6976) (8276 7776) (5428 8482 4758) (7328 8316 6916 6822 8208) (8396 8314) (8576) (6426) (8488) (7064 4034) (8360) (7792) (5452 8234) (8160) (7336 6008) (7542) (8464) (8308) (7102) (7606 8082) (6120) (8450 7454 7430) (7592 8306) (8536) (5572) (7194) (8034) (8408) (7592 8518) (8234) (8486 5430) (7492) (7728) (7118 5488) (7378 8560) (7210 7558) (8534) (8270) (5068 8070) (8436 7728 7398) (7276 7154) (6514) (8232) (7520) (7752) (8444) (6816 4784 8172 8026) (7134) (7368) (4244) (7740) (5412 6010) (8372) (8326) (4618) (6836) (7154 7574 7476) (8320) (8244) (8476 7086) (7950) (7896) (8394) (5584) (8006) (5116) (5438 7734 7468) (6922) (8468) (7972) (7714) (8242) (7056 7642) (8070 7394) (7982 6804) (8496) (7810) (7556) (5762) (7418 5014) (8364) (8156 8002) (6040 7460) (6808) (5344) (7820) (7166) (7064) (8070) (8430 7876 7640 5934) (8198 5500) (7356 7772) (4888) (8488 4066) (7472) (7170 7928) (4842 7714 7606) (7750) (6416 7014) (8490) (5098) (8096) (8246) (7362) (5968 7846 6822) (7640) (8372) (8176) (5440) (4104 7720 7396) (7320) (7940) (7156 7574 6926) (4572 7784) (8164 7544) (6794) (4910) (7428) (8082 7020) (7324 8220) (5320 8060 7852) (7644) (7216 7076) (8452 8140) (8132) (7432 6836) (5680 5252 7556) (8224 7998) (5644 7746) (8310) (7804) (7948) (7316 5900 5418 8206) (7150) (7394 6952 4052) (7914) (7470 6832) (8044) (6420 7648 7438 7110) (8268) (8466) (5388 8166 7748) (8290) (8194 6966) (8358) (6742) (8428 7830) (6396 7970) (7166 6900) (6012) (5568) (8492 7776) (4054) (8330) (5204 8356) (7350) (7792 6888) (8380 7888) (8258 8134) (7092) (4676) (8424 4574) (8376 8294 8070) (6708) (7638) (7958) (5928 5042 8150) (7560) (8462 8380) (5178) (7916 7084) (4100) (4828 8132) (8082 7752) (7564 7486 6924) (7420 7032) (8248 7926) (6794 5960 4896) (6418 8118 7128) (5492 7820) (8442 4188) (7378) (6094) (6522 8246) (4544) (5896) (7618) (4598 8242 7892) (8002 6980) (8376 7644) (6486) (8336 8020 7438) (8426) (5078) (7670) (5178 7210) (7714) (6016 8466 8010 7362) (6114 7136) (7730) (8254 8138) (7450) (7182) (7062) (5958) (4978 8120) (4944 4386) (8478 7768 7514 7350) (8314 6854) (6822) (7964) (8374 7802) (5428 8190) (7892) (8352 8312 7510) (6994) (4568) (6470 8264 8082 7356 6034) (7014) (7690) (7806) (6264) (7170) (8420 6924) (5042 4442) (8004) (8366 7738) (6776) (8230 8046) (7630 7448) (8140) (7190) (7856 7142 6374) (7984) (8486 7900) (4902 8268) (6932) (4866) (8108 7396 6040) (8474) (7718 6280) (7806) (6050) (8374 4386) (7490) (8200 7054) (7972) (6636) (6430 4076) (7368) (6922) (7948) (7782 7570) (8324) (8494) (8510 7210) (6998 6924) (4994 6774) (6478 8146 8040 6542) (8110 7594 7174) (5306) (7018) (5914) (7384) (5148 7960) (8084) (6162 7650) (6358) (5496 7994 6760 4496) (7826 7004) (6538) (7670) (7752 7334) (7542) (6442) (6210) (7296 6844) (7230 6648) (5982 7634 7180) (7352) (8036) (8308) (7798) (5106) (6132) (7476 6406) (4252) (6904) (7448) (7902 7010) (4254) (6012 7580 7254) (6494) (4290) (4962) (7618) (6942) (5454 7358) (6714 6254) (7312) (5470) (5180) (7910 7268) (6224) (7466 6612) (6624) (6548) (6264) (6014 5470) (6358) (5422) (4122) (4668) (5102) (5898) (6510) (7216 6972) (6232) (6836 4562) (7748 6946 6328) (5220) (7458) (5890) (4706) (7940 7432) (7276) (6132) (6710) (5966 4190 7538) (4148 5216 7742) (6980) (7490 7094) (6038) (7358) (7926) (7598) (7292) (5508) (7748) (7872 7540) (7078 6754) (6634) (5124) (7480) (7694 6494) (5714 8066) (7848) (6878) (8226) (7592) (7352) (6606) (7072) (6210 7380) (5268) (4038) (6146 6298) (5094) (6528) (5504 6954) (7818 7646 7298) (8216 6744) (5196 8366 8322 8122 7946) (7764 7146 6136) (5934 5166) (7664 6392) (7420) (6630) (7534) (6212) (7930) (6698 8470) (8010) (5932) (7764 6304) (8288 7260 8136 6884) (8126 8088 6240 7158) (7818) (7972) (8200) (7590 5994) (8354) (8182) (6408) (7700) (7958) (7166 6314) (7362 8540 8032) (8222 7504) (5704) (8566 5970) (8050) (6016) (8194) (8342) (7158) (7512) (8590 6324) (4856 8370) (8456) (8414) (4776) (7162 8510) (7618) (8046) (6382 7732) (7892 7478) (8142) (5760) (8068 7676) (7950) (8420) (7542) (6962) (4764) (8046 8400 8192) (7954 7136) (4776) (5696 8478 7532) (8516 7610) (7412) (4506) (5778) (7948 6558) (8228) (6138) (8026 7602) (6870) (8524) (6202 8568) (7170 7526) (7736) (4498) (8458) (8360 5840) (7314) (8410) (8044) (7610) (7952) (8400) (7554) (6386) (8202) (8482) (7516) (8526 8422) (7198 7996 7660) (6488) (8548) (5766) (8554 7600) (4656) (8384 7704) (7172) (4444 8490) (8066 7488) (5942 8442) (7286) (4362 8572) (4014 7648) (4062 8028 7600) (7668) (6862) (7186) (7606) (4804 7974) (6042 7736) (8476 6528) (4382 8378) (6310) (6836) (5754 6810 6440) (6140 8222) (8182) (7708) (7446) (5740) (7184) (6388) (8066 6950) (7418) (8004 7188) (5980) (8570 7430) (5506) (8440 7742) (6546) (6928) (7554) (7948) (4582) (8352) (5748 6454) (8200 7726) (4652) (6148 6646) (7958) (4274) (7302) (8374) (6214) (5448 8206) (6472) (8458 7172) (7332) (6274 8492 7906) (8132) (6882) (8218) (7906) (7900 7434 6118) (5032) (6634 6446) (5526 7552) (5942) (5766 8164) (8204) (6084) (8198 7656 6688) (5278 8348 8094 7738) (4778) (5534 6418) (7844 7678 7602) (6214) (7484 6970) (8464) (6736) (4888 7636 6494) (8410) (4104 7858) (5488 8168 6898) (8076) (5830 8260 6252) (8288 6740 4884) (8002) (7712) (7510) (7766 7202) (8352 6504) (7842) (5308 7648 7316) (8234) (8002 6986) (4812 7616) (8474) (7878 6174) (6854) (8002) (7812 7414) (8492 6436) (8168) (5982 6986) (8422 7902 7734 6848) (7478) (7660) (8290 7724) (4084) (8416 6612) (8110 8002 7016) (7720 7526 7222) (5900 8098) (8290) (7310) (6668) (7794 7478) (8136 6448) (7960 7226) (8418) (7666 6708) (7098) (5394) (7910 7766) (8300) (8088) (7566 7448 6918) (8494) (8046 7856) (7624 7118) (5130 8222) (7330) (7592) (6386 8378) (7864 7812 6876) (8074) (6696) (4508) (7728 7352) (8348 6754) (8232 7444 6062) (7868) (8386 7692 7274) (6258) (8032) (6060 7558) (7344 7144) (8292 6654) (8258 7966) (4580 7382 6938) (7866 7722) (6498) (4258) (7156) (5238 8186 5930) (6856) (8132 8074) (7752 7048) (5248) (8418) (5916 7390) (6404) (6550) (7820 7702) (8484) (8124) (4232 8268) (7940) (7806 7084) (7696) (8426) (5122 8180 7584 7150) (5766 6702) (7314 6966) (7630) (8054) (4800 8370) (7198) (8240 7400) (7632) (5506 8444 6234 5912) (8116 7792) (7888) (4146) (8490 7572) (7854) (8072 7142) (6944) (8068 7478) (7820 7436) (6132 8208 6702) (8000) (7578) (5748 4666) (7790 7740 6914) (8372) (8386) (6288 5886 8246) (5144 7856) (5642 8044 7630 6740) (4492 6980 5998) (6488 7780) (7942) (8182) (6652) (7546) (5980 5206 7680) (8428 7250) (8248 7482) (6026 7844 6408) (7768 6988 6318) (5580 8344) (7488 7164 6804) (8144) (4934 8264 7666) (6370 7888) (5796 7186) (7034) (7914) (8428 7376 6566) (7414 7290) (5836) (8004) (4800) (8266 6260) (4470 8340) (5694 8086) (6866) (5770 7988) (5002) (8478 5958) (8338 7794 7422) (8214 7928 7654 7136) (4272) (5792 5192) (6886 6554) (8280) (7858 7434) (8112) (8262 7320) (4512 7086) (6054 8364 6974) (7570) (8088 6434) (7832) (7456) (5508 7732 7644) (8228 6214) (4092) (7998) (5762 6534) (8078) (8350 7440) (7906 7810 6994) (6280 8460 8182) (7216) (8040) (8476 7936 7532) (5892 8580) (5428 6970) (4074 7802 7290) (8144) (7676) (8288 6852) (5868 4462) (4042 6496) (8394) (5668 8210 7896 7798) (8000) (7338) (4984 4550 7476) (8112 6432) (7638) (6252) (5892 7868 6628) (8434) (5408) (7022 6704 6398) (8146 5216) (8008) (6076) (8080 7794 7132) (8310) (6134) (6868) (4780) (7248) (7568) (6016) (8196 8052 7778) (6290 8462 7920 7392) (7684) (8280 7960) (7804) (6120 7174) (6744 6628) (8478) (7770 7432 7254) (8156 8030) (8272 7096) (7484) (7852 6900 6662) (8260) (5278 8492 7788) (7346 7182) (5856) (4892) (8308 7424) (7728) (5496 7986) (8092 6930) (7642) (7510 6564 6348) (4570 8184) (7870) (8408 7274) (8268) (7344) (7890 6878 6630) (6278) (7140) (6030) (7824) (8234 6972) (7070) (5584) (8386 8180 7496) (7764) (4528) (6174) (8482 7858) (6044 7740) (8354 6800) (7694 7154 7106 6794) (8132) (5524 7938) (7478 7032) (8214 8058) (6580) (4346) (8226 7494) (6302) (7816) (8456 8010) (5414 6184 7956) (7438 8452 6524) (8254) (7366 7038) (5702 7338 6944) (4490 7728 7090) (8580) (5440) (6700) (8028 7660) (8136 7882) (6630) (7736) (8276 8138 7582) (7892) (8026) (7504) (5906) (4476 7368) (8340 7960) (6792) (5104) (7888) (7238) (8584) (4522) (8226 6072 5558) (7810) (7542 7120) (8170) (8112 7734) (8318) (8392) (6682) (8186) (8320) (5118 6444) (7852 7714) (8324) (5346) (8492) (7748 7148) (8064 4508) (5204 6760 6508) (8340) (7642 8500) (4042 6574) (7964) (8026) (5582) (8368) (8598) (5666 5066 7166) (7744) (6374) (8022) (6764) (7604 6926 6578) (8440) (8170) (6678) (5184 4548) (7246 6774) (7856 7960) (6480) (8218 8420) (8012) (4832 7676) (7550) (8366 7866 6698 4528) (8530) (8148) (6878) (6420) (7550) (8008 7250) (7132 6078 4400) (7458 8400) (8212 7550 7604) (6804) (5300) (7678 8524) (8386) (7466 6836) (8278) (8238 8462) (8578 6628) (8286 7746) (5624 7668) (6948) (8276 8496) (8168) (8334 6452 7982) (4512) (8574 8366) (8100 7616) (8256) (7384) (8090 6710) (7624 6970) (5238) (8360 6502) (8012) (4438) (5664 8596) (8218) (6286 5054) (8528) (7506 7324) (7786 5436) (7152 8346) (6040 4386) (7912) (8366 8592 8518) (5374 8530) (6828) (7838) (7724 4038) (6674) (7738) (7384) (8014 8546) (6946 6898) (7770) (7576) (8300) (4396) (6900) (6590) (8070 7002 8386 7314) (5116 8498) (7386) (7340 7966) (6148 8294 7564) (6424) (7978) (5286) (4540 7690) (7382 8546) (5656 8384 6728) (4086) (8430 8342) (6140) (4340) (7570 7282) (4348 7602 6968) (8060) (8574) (8150) (6156) (8320 7042) (4842 7972) (7056) (8562) (6768) (7696) (8020) (8128 4420) (6158 8412) (7296 7638) (6446) (7934) (6618) (5458) (8548) (6664 6182 7776) (8042) (8436 6662) (5480 7788 7682) (8092 7060 8526 8454 7272) (7590) (8152 4046) (5372) (8016) (8542 8404) (5232 6900 7676) (8002) (6082 6580) (4666) (8000 7568 6386) (7448 7892) (7168 4142) (6106 7982 7938) (8510) (6400) (7458 7228) (8462 7050) (7514 7974 4990) (6116) (8488 6282 8120) (5452 6864) (5338) (7568) (8516) (7412) (4420) (8464 8594) (5216 7032) (6396 7942) (8508) (7244) (5730 4510) (6252 7898) (6096 7974 8598) (7574) (5240) (7058) (7470) (4574) (8450) (7964 7344 6422) (7270) (6830 8124 7876 5598) (6420) (8598 4542) (7976) (5032) (8094) (7960) (5608 7050 6208 8374 7586) (8532) (8112) (6892) (4990) (4058) (8454 7094) (8066) (4728) (8248) (7866) (8138) (5162 7682) (8074) (5646 8076) (8476 8260) (7220 7070) (8380) (8024) (8146) (5548) (6004) (6162 7544 4130) (4722 8216) (7786 7456) (7286 7184) (7714) (8484 7970) (8122) (8560) (8422) (7500) (7396) (7910 8570 8158) (7158 7654 7098) (8006 4026) (7312 7078) (5098) (8034) (7536) (8358 6904) (7276) (8192) (7862) (7150 8516) (8460) (8314) (5568) (6774) (7992) (6178) (7680) (8518) (5114) (7864) (6154) (7294 8038 7204) (7932) (8428 8268) (5354) (8362 7926) (6074) (7044) (7502 8022) (5020 8598) (7486) (5600) (8282) (6178 7424) (8474) (7254) (7908) (8490 8078) (5052 6056) (7542) (8384) (8098 6936) (7094 8562) (5592) (7878) (5460 7456 7186) (7580) (6932 8560 8470) (8088) (8040) (5364 4002 8334) (6214 4884) (6062 7892) (7592) (8404 7172) (8006 7918) (5564 8462) (4916) (7960) (8090) (8404 8350) (6114 6204 8180) (8464) (8568 8450) (7962) (7488 4526) (8490 8438) (5106 4068) (8408 7162) (6766 7682 8352) (8192 8104) (6110) (7912) (8424 8350) (8150) (8116) (7598 8574 8244) (6700 7218 8062) (5096) (4368) (6488) (6244) (4052) (7962 7632 8590) (7076 8536) (4260) (7274 8580 7166) (8348) (8516 7672) (8218) (7184) (5096 8394 8214 8360) (4020) (7988 8538) (8368) (7436 4796) (8428 8150) (5560 7240 8350) (8582) (8438 8072 7718 7870) (4092) (5100 6054 7586) (8094) (4798) (8354) (7946) (8424) (6262) (7192 6914) (5694 7446 8076 7624) (8394) (5130 4956 7624) (8504) (5880) (7964 7236 6992) (7680) (8236) (4062) (7954) (8114) (5562 7500 7230 6862) (6388) (5912 7348) (8564) (5442) (5044) (6098 4274) (8532) (7502) (8058) (5894 6766 7436 8592) (8544) (7960) (5690) (7006) (5010 6232 4068) (7496) (8546 8042 7720) (6094 6700 7598) (4816) (8526) (4094) (7880 7690) (6222 8092) (5478) (7256) (4998) (8540) (5784 7174) (7998 7954) (4570 8480) (5622 7562) (5112 7294 6842) (7606) (6170 4070) (7944) (5448 8488 6872) (7496 7696) (5112 4562) (7036) (7350 6870 8534 8168) (5324 7580) (7162) (5722 8240) (7010 7962) (5814 5694) (7234) (6772) (8498) (7686) (4494 8036) (8106 8026) (5530 7874) (6798) (7522) (8540 7042) (6172) (7200 7714) (7584) (5636) (6064) (4560) (6392 8544) (6998) (7638) (7492) (7116 8006) (4486) (7028) (6756) (8534 8202) (6226 6910) (7208) (8008 7570) (7348) (8048) (6380 7696) (5712) (4064 7006) (7392) (5722 7440 6774) (6242) (6432) (7008) (4056 7888) (6062 5514 8118 7716 6962) (4970) (6770) (6552) (5902 5438 7224 7504) (8042) (6658 4656) (7456) (6468 7690) (7146) (6086 5448 6762) (4044) (6984 7948) (5580) (7352) (6432) (6232 7246) (5044 4458 8028) (5662) (6430 8494) (7378 7106) (5572) (5758) (6506) (4400) (5104) (6754) (4966) (7720) (6394) (7276) (7314 7006 7786) (8046) (5884) (4906) (7212) (7528) (6318) (7646) (4556 6788 7994) (5634 7036 7382) (7538) (5494 4854 6594) (6430) (7282) (5930) (7206 8484 7040) (5490 6706 6916) (7686) (5908 4834 7350) (6420 7712) (7564) (8334 7888) (7412) (6900) (7094 6696) (4696) (6336 7280) (4324) (6982 7484 7460) (7904) (5660) (6768) (6384) (7010) (4236) (5710 4926) (7726 7326) (7070) (7418) (7368) (6310) (4914) (8176 7494) (6974) (6536 7236) (6662) (5948) (4774) (6408 7230) (4770) (7076 7702) (5966) (7290) (7534) (6754) (6092 5504 4216 6310 6654 7624 7466 7018) (7470 8540 8400 8248 8194) (6926) (7160) (6550) (7560) (7486) (7206) (6852) (5690) (6746 7580) (8404) (5532) (8500) (6766) (5866) (7402) (5682) (7432) (6044 7594) (7148 7418) (6748) (7686) (5680) (7524) (8536) (4006) (7530) (5488) (4216) (5704 7140 7496) (6682) (4718 6538) (6192) (7150) (5726) (7276) (4068) (6664) (6090) (7830 7460) (8364) (7670) (8114 7912 8294) (7182 6526) (5672 4602) (6744) (4110) (4538 7418) (7464) (5710) (6660 6868) (7652) (5656) (6758) (6060) (7540 7250 7192) (5938 6542) (7636) (5514 5404 6752) (7600) (5702) (7404) (7214) (6150) (6520) (6078) (5704) (4186) (6036) (7570) (4044) (4750) (5736 7736) (7142) (8488) (6518) (6656) (6010) (6750) (4204 7394) (7698) (6844) (5394) (6534) (7424) (5704 7258) (5864) (8546) (5506) (7580) (7814) (6662 7464 6510) (5720 7218) (6200 7622) (7684) (7164 6762) (7386) (5512) (7494) (8512) (7508) (6756) (7334) (8540) (7456) (6540) (7406) (7184) (8564) (4028) (6216) (7788) (6520) (6752) (5714 7824) (7312 8014 8512) (8434 8112 8250) (7400 8288) (8352 8138) (6202 7892) (8530) (6524) (8432) (7524) (7514) (5498) (7646) (8536 7646) (8586) (6556) (7208 7720) (7966) (8300) (7154) (8556 7896 8438) (8034 6842) (5692) (7732) (8558 8138) (7568) (7718) (8342 7432) (6934) (7890) (7366) (8516 8114) (8136) (8504) (8590 7668) (5748 6530) (7720) (7970) (7496) (5664 6754 7150) (4578 7516) (8266 8234) (5532) (7902) (6928 6536) (8348) (7344 5690 6752) (4542 6192) (7742) (8534) (8330) (7144 8240) (8412) (5540) (4510) (8574) (7156) (7428 7940 8126) (8536) (7322) (8214 8450) (7702) (7638 8600) (5698) (7974) (5590) (6170 8108) (7492) (6754 7442) (5386) (4168 7154) (7628) (7916) (6754) (5742) (8476) (7326) (8132) (6536 7620) (6052) (7886 8428) (7382 8598 8052) (6752) (8512) (8304) (5656) (4098) (6598 7414) (5490) (7354 7456) (8026) (6752 7152) (6524) (5426) (7884) (8434) (6102) (7166) (7354) (5510) (4162) (5878) (6096) (6522) (7336) (5726 7750) (7202) (4032) (5652) (7650) (7164) (5710) (7334) (7406) (6066) (5400 7156) (7266) (7330) (7198) (6096) (5516 6524) (6752) (7196) (7538) (5566 6516) (6098) (7400) (4854) (6532) (6214) (4028 7426) (5672) (6512) (7410) (6752) (7474) (6510) (6752) (6504) (4724) (5676) (4138) (6508) (7494) (4426) (5702) (6526) (6916) (6514) (7162) (4226) (7434) (5692) (6752) (5526) (7596 6530) (5640) (6162) (7192) (4004 7456) (7178) (4198) (6210 7784) (7518) (7636) (6748) (6644) (5682) (6592) (7612) (7416) (6598) (6740) (4232) (5660) (4478 7236) (7230) (6740) (6650) (5476) (6694 6508) (6646) (7406) (6646) (6736) (6586) (6730) (6516) (7418) (6640) (6196 6516) (6730) (6620) (6486) (7526) (5422) (6062 7184) (5578) (7388) (7842) (6842) (7446) (6482) (6594 8410 8256 8118 8028) (7106) (6500) (6816) (7660) (6454) (6506) (6030) (7328) (6428) (7084) (7894) (7736) (7498) (7502) (6436) (7060) (8498) (6750) (7292) (7900) (7274) (5372) (7316) (7022) (4558) (6402) (6744) (5322) (7576) (7270) (5958 8014) (7204 7084 8164) (5952) (8012) (7564) (6720) (8460) (7832) (8520) (7486) (7998) (7010) (6738) (7026) (5906) (7270) (7514) (6396) (5936) (6390) (7016) (5894) (6464) (7454) (7266) (6400) (5970) (6398) (7966 8010 7582) (7210 5932 8566) (7710) (6464 7876) (7426 7672) (6558 7612) (7140) (8442 8346 8202) (7972) (6356 8572) (7146 7022) (8546) (7312) (5322) (7816) (6570) (7948) (6558 7002) (7162) (5950) (6464) (8022) (5934 8558) (6328 8174) (7398 8466) (6720 8362) (8226) (8546) (7128 4154) (6370 8444) (7390) (7222 5944) (7012) (8350) (6564) (8018) (7958 7428) (8306) (6316) (8456 8360 8312 7414) (8558) (8178) (7656 8006) (8390) (7146 7564) (7288) (6366) (6562) (7590) (8466) (8030 8138) (8544) (7110) (7688 7434) (8436) (8358) (8028) (8510) (7136) (8228 7308) (7464 8034) (8158 8528) (6484 7630 7992) (7348 8432) (7266 8280) (7488) (8516) (7100) (8398) (8034 7988 8204) (7594) (7402 7770 8476) (8550) (7860) (8292) (7962 8100) (4452) (8560) (6294) (7784 8210) (8378) (7610) (6720 6582) (7988) (8554) (7172 8562) (6456 8294) (5348) (4512) (6004 6410 7316 8352) (7114) (6734 8540) (7906 7488 8596 8038) (6408) (8412) (8196) (7508) (8396) (7832) (6178 7580) (6580) (7132 7426) (8526 8138) (8078) (6262) (8292 7742) (7020 5892 7922) (7616 8304) (6390 7938) (8440 8108) (7404) (8534 8214) (6350) (8194) (5918 6644) (7872) (8584 7452) (8140) (6250 7684) (8288) (7512) (7414) (6578) (7964 8392) (8292) (7598 7142) (8164) (8582) (6442) (5948 7646) (8466 8330) (5978) (4090 6492 8226) (5350 7836) (6550 7784) (7246 7978 8584) (8228 7430) (7900) (5908 7782) (6990) (7260) (8192) (7650) (4308 7934) (6574 7224 8432) (7554) (5934 7752) (8588 7476) (7646) (6988 7986 8152) (4486 6328) (8458) (7210 8378 8110) (6718) (7250 7432 8484) (8286 7766) (4066) (7610) (6330 7954 7758 7444) (8176) (7010 7808) (5928) (7120 8108) (6880 8308) (7828 8240) (7982) (7432) (4166 6566) (7864) (7262 6992 8486) (6342 7780) (7934 7716) (8302) (7430) (8106) (7982 7840) (8398) (4226) (8194 7032) (7238) (6528 7852) (8248) (8118) (7858) (7514) (7660 8580 8410) (6366) (8136) (8338) (7932 7728 8226) (5914 6042 4538 7442) (8000 8492) (7000 8584) (7872) (7708) (8508) (8314 7440) (6336 7802) (6552 8104) (4534 8398 8298) (8178) (7692) (6342) (5846 5952) (7902 7454) (4072 7728) (8252) (7670 8378) (5944 5836 7972) (8410 8340) (7850) (8176 7940) (7244) (8396) (7988 7644) (7222) (8042 8470) (6448) (4462) (7548) (5856) (4184 8348 7008) (7972) (8264 8502) (7704) (7526 8098) (8326) (7966 7558) (8200) (8304) (7776) (7978) (6304 7520) (4096) (7250 7758) (6550) (7646 7504 7198) (7032) (7704 7958) (8172 7448) (7598) (6544 7104 7992) (5914 8112) (7862) (5880 8330) (6272) (7774) (7826) (8576) (7898 7038) (6316 7836 8258 8170) (7244) (8494 8376 7444) (6448 7638) (7764) (4266 8122) (6858 8288) (7126) (7842) (8304) (8378) (6290 7526 7962) (7642 7478) (7232 6660 6560) (7758) (8434 8312) (6384 7452) (4482) (7596) (7978 7000) (6304) (7304) (6566) (7834) (7422) (8444 7880) (4182 7782) (6758) (8088) (8046) (6720) (7014) (7152) (8354 7968) (6176 6914) (8458 8284 7694 7434) (7226) (7974) (6728) (5352 8240) (6954) (7242 7668) (7444) (8538 8190) (7708 7426) (6996 8300) (6352 7252 7598) (6568 8360) (4530) (4186) (6040) (7006) (7402) (6334 7612) (7336 8578 7882) (7850) (7230) (6418) (5358) (7352) (8030) (7666 7438) (4324 4642 8142) (6864 8346) (7244) (6332) (7990) (8322) (6544) (7366) (8580) (7916) (7470) (8250 7982 7596) (6128 4340) (7268 6722) (7130) (7846) (4600) (7752) (7232) (6312) (7426) (8080) (7842) (5964 7600) (6590) (4160) (6556 8190) (7006) (7610) (7228) (6046) (4556) (6298 6860 7792) (8542) (7486) (7586) (7306) (6434) (8434) (6276) (6174 4502) (8534 8300 7510) (8052) (4150) (5924) (6560) (7394) (6026 6964 8206 7718) (4448 7882) (7432) (7726) (6308) (7428 7938) (6178) (7950 7634) (6580) (7370) (7278 7028) (6720 8556) (5946) (4132) (6930) (5458) (6550) (7036) (6220) (7502 7674) (8438 8328 8276 7896) (6394) (5898 7628) (8258 7984) (6032) (8042) (6278) (4334 6514) (7390) (7816) (5930) (7246) (5898 7380 7716) (4100 6306) (8476) (6564) (7966) (6458 7234 8114) (5070 7802) (6744) (7030) (6724) (6918) (5214) (5728) (6738) (4302 8062) (6890 7870) (5890 7756) (7890 7580 7430) (5206) (6628) (5642) (6180) (7456) (6700 7130) (4076 6814) (5904 7346) (7964) (5632 6460 4364 8180) (7794 7056) (6290) (6544) (7488 6868) (5630 7192) (8444) (5402 7672 7538) (6114) (5230 7284) (7720) (5686 6432 7636) (7858) (7082 7506) (6306) (5204) (7682) (6210) (6748 7732) (6900) (7196) (7576) (6588) (7772 6854) (7740) (5634 7486) (4282) (6422 7020) (5980) (7652) (6852) (5204) (7962) (5656 5854) (6936) (6142) (6788 6678) (7764) (7708) (5288 7590 7360) (6040 7114) (5842 6678) (6432) (7520) (7854 7664 7314) (5788 8034) (6896 7204) (6488) (4356 7722) (5570 7298) (7648) (7836 7550 7052) (5326 7246 7786) (5862) (5976) (7436) (4312 6994) (7252) (6244) (5358 5136 5898 6644) (7130) (7444 7976) (6384) (5614) (5754) (7368) (6278 7114) (5454) (6006 6526) (7542) (5276 7286) (6824) (6476) (7644) (7142) (5486) (4890) (7108 7552 7422) (5904) (7276) (7618 6822) (4206 8170) (6164 8318 8434 8006 7904 7806 7454) (8494) (8314 5722 8060) (8576) (5184 6312 8430) (4782) (7206) (4390 7494) (5434 6520) (8372 8210 8114) (7806) (7626 7860) (8248) (5194 4510 8374) (7444 8006) (5618) (8408) (7220) (7944) (5996 8120) (7038 6686) (5654) (5274 5086 6268 4294 8524) (7382) (6078) (8316 8470) (5696 8266) (6630 8114) (5348 6450 8576) (8242 8540) (7450 8062) (7604 7150 6652) (8548) (8078 7848) (8342) (4480 8072) (7428 5880) (7160) (8218 7236) (6994 7646) (6396) (8052) (4324 8544 8414) (5548 7210) (5836 6310 7924) (7816) (8332) (7656 7866) (7466) (8086 8454) (7990) (5252) (6274 6556) (7104) (5910 8372) (7200) (6640 6134 8130 7792) (6134) (7720) (8266 7454 8564) (6976) (7178 8154) (8434 7650) (8402) (6260) (6720) (7128) (8588 8520 8478 7810) (8202) (4058 8028 6560) (5582) (7606) (8260) (6660) (8486) (7174) (7884 6260) (6936 8402 8086) (5842) (7642 7978) (5358) (8334) (8236 7446 7826) (8472) (8516 7968) (8414) (7650 7156) (5912 6688 8594) (6204) (7962) (6962) (7982) (5666) (6924) (8348) (4612) (5860 8488) (7224) (8038 6474) (8424) (6700) (8272) (5508 8110) (6154 7758) (4258 6836) (8454 7680) (5186 8342 8254 7014) (7374 8086 7958) (6272 5916) (6960) (7454) (4390 8254 7246 7124) (8032) (6534) (4900) (7248 6488) (8370 7166 8222) (7876) (5732 8338) (5460 6980) (7346) (4840 8556 7000) (8394) (8144) (5314) (7622) (8284) (8358 6966) (7296) (5914 6558 6426) (6304 8444) (8302 7428) (8418 7682) (7232 6636) (5502) (7082) (8356) (6248) (7710) (8254 8144) (5702 4664 8410 8082 7920) (7784) (5204) (6320 6748) (7554 7842) (5964) (7442) (4748 7066 6528) (5832 8134 8032 7648) (7048 6390 7250) (5444) (6720) (6690) (8398) (5166 8488 7962) (5892) (6520) (7056 7646) (8338) (6410 8242) (4284 7446) (7348) (8068) (7242) (7096 6650) (5740) (5970) (6706) (4584) (8320 7672 7096) (8342) (6934) (6546) (5864 8432) (4570) (6954) (4172 7568 6680 8256) (6228 7778) (7356) (5810) (5626 6400) (6894) (7276 7458) (5772 8056 7698) (4582 7616) (7220) (6224) (8514 8440) (8232 7904) (6956 6406) (6642) (6344) (4088) (7368) (6064) (5518) (7554) (4912 6840 8322) (7044) (6322) (4566 8320) (7092 7452) (6700 6572 8358 7534) (6094) (5066) (5202 7378) (7046) (5860 4806 6900 6750 7638) (7192 7916) (6894 6608 8350) (8284) (5752) (6422 7256) (5520 7092 7872) (7460) (6832 6672) (7542) (4478 6050) (7768) (8354) (4090) (7632) (5502 7338) (5766) (6114 7276 6554) (5706) (4316 7030) (6718) (6074 8274) (6830 7266) (5630 7364 7714) (7806) (7032 7914 7680 7314) (8328) (7468) (7154) (5118) (7054) (6082 7268) (6406) (7474) (7768) (4500) (6764 7220) (4122 6570) (5942) (6368) (6982) (7462) (6572) (5156 7124 8272 7616) (4198) (7198 7434) (7592) (4998 6208 6956) (4618) (6016) (7304) (8348 7548) (5614 7618 6868) (6724) (6220) (7476 7098) (8228 7292) (5344 5890 4170) (6314) (7622) (7002) (5098 7366) (7452) (4032) (7190) (5692) (6528) (7108 7686) (5602) (6806) (4520) (5716) (6338) (7688 7680) (7120 7324) (6460) (4310) (7794) (6638 7214) (7460) (5664 6980) (6762) (8352 7952 7748) (7880) (6408 6060) (7652) (5864) (7690) (4132 6774) (6292) (4576 7328) (8132 7460) (6652 7800) (6454) (5118) (6768) (7206) (6532 7466) (7888) (5258 6992 7318) (6258 6468) (8042 7612) (5760) (4516) (7548) (6854) (5062) (7706) (6726) (7484 7212) (5874) (6082) (4908 4826) (6994) (7758) (5648) (6680) (6254 5916 5768) (4706) (7770) (6294 7002) (6612) (7514 5724 7826) (6816 7260) (7148 7618) (6168) (7116) (5564 6448) (5858 7844) (6544) (7658) (7104 7498 7220 7744) (5506 4962 6510) (7086 7030 6170) (7262 7862) (4246 6350) (5844) (6914 7430) (6070) (4754 7368 6544) (7936) (5668) (5110) (6322) (4756 7744) (7408 6898) (7414) (7178) (6694) (7104) (8220) (6230 6506 7256 7728 7608) (5552 7390 6762) (7844) (6192) (4546) (7176) (7504) (4084) (6698 6556) (6876) (4940) (7570) (7694) (6076) (7720) (7014) (7246) (5710) (6514) (4566) (7092) (7028 7638) (6630) (5520) (6198 4416) (7344 7202 6524) (7790) (5854) (7152) (6942) (7708) (7284) (4536 7092 6650) (7950) (5690 7846) (7660) (6918 6992) (7414) (4130) (7754) (5946) (6012) (6782) (6334) (5572 7278) (4998 7020 6426 7772) (5738 7018) (5256 7160 7430) (6294 7460) (4698 7534) (6768) (6568 7808) (5540) (6888) (6204) (5928 7208 6758) (4868 7720) (7406) (7174) (6432) (6480 7278) (7196 7694) (7430) (5782 7086) (7252) (6292) (7852) (4356) (6862) (7184 8076 7952) (5832 8246) (6422) (6062 6794 6574 7848 7724) (7366) (4146) (6896) (6074 6546) (5800) (7280) (7094) (6896) (4378 6466 7574) (5892) (4220 7748 7298) (6724) (4036) (6404) (7112) (6072) (6578 7964) (6944 5690 7296) (6106) (6878 6646 7556) (7658) (5492) (7108) (7930) (5458 6704) (7682) (5744) (4326 7046 5508 6832) (6500) (7024) (5144 5780 7302) (7752 7630) (6650) (5698 6950) (7536) (7284) (7104) (5524 7156) (7322) (6358 7772) (6802) (8034 6602) (4320) (7668) (7110) (7952) (7456) (6904) (6496) (7264 7396) (6662) (6960) (7872 7704 7624) (7800) (5874 6884) (7366) (7220) (5720 6388) (4330) (6050 6796) (7414) (6864 6590) (5334) (6208 7732) (6880) (6524 7110) (6792) (7310) (4194) (7900 7470) (5562) (7164) (6926) (7632 6680) (7340) (6430 6950) (5604 4264) (8172 7642) (8510 8298 8414) (5868) (7936) (6858) (7220 6942) (8538) (7316) (6412) (7578) (8036) (6652 7786) (8328) (6346) (5828 8116) (7584) (7720) (8348) (8088 6720) (7156 6586) (6184) (7828) (7302 8272) (5986) (7490) (6512) (8160) (5340) (8540) (7064 8118 8460) (5728) (7580 7994 7654 7136) (8542 8360) (6722) (7216 7094) (5134 8062 8416) (8546 7726) (7828) (6820) (6698) (5836 7080 5208) (8216 7290 6518) (7626) (6348 5724) (8540 7976) (8050 7774) (6016) (5988 8436) (7088 8382) (8086) (7484 8252) (6362 5780 7204) (7958) (8258) (7330) (8592) (7474 8348) (8222 8404) (6810) (7172 7984 8426) (8286) (8506 7816) (7364 7692) (6518) (8104) (7420 6354) (8158) (6932) (7500 7668) (7316) (6398) (8396 8226) (7192) (5226) (8546) (7064 8316) (7782) (7280 8286) (6668 8544) (8322 8252) (7684) (6760) (6390) (8392) (8118) (7060 4678 8274 5704) (7364) (8200 7994) (6652) (8070 8454) (8332) (8158 5740) (7062 7670) (6850 8542) (8298) (7490 8550) (8490) (8064 7738) (8436) (7068) (6652) (8116) (7030 5734) (8496 8388) (7786) (8174 8542) (7992 7706) (6922 8222) (8418 8344) (5760) (7052) (8106) (7170) (6390 8012) (5716) (6200) (6870) (8470) (8250 8552) (8428 7822) (7282) (8476) (6948 7998 8226) (8432) (6402 8568) (7076) (5836 8312) (7254 8234) (7964) (6698 7674) (6924 7506) (7734) (8350) (5690 6862 8122) (6562) (7314) (6758 4840) (8126 7526 8284) (8240 8546 8432) (8302) (7676) (6896 6808) (5718) (8170) (7982) (6962 6574) (8240) (6804) (8220) (7196) (7804) (6986 7494) (8432) (8578 8276) (6506 7700) (6940) (7124 6826 8110 8468) (8214 8380) (6510) (7040 7834) (8156 7212) (8494) (8590) (6562 7998) (7682 6796 8442) (4804 8090) (7354) (7062 7172) (5688 8106) (8502) (6856) (7512 7680) (7170 5794) (8338 4816) (8552 7684) (6888 7986) (7358) (7760) (6152) (7270) (8020) (5774) (7358) (7084 8158 6560) (8016) (8332) (7722) (6304 8544) (5778) (8550 7528) (7704) (6922) (6592) (8158) (8440) (6880 8104 5740) (7062) (7966) (7490) (7692) (6178 8378) (7352 8156) (8502 8436) (7978) (7144 7712) (6364) (6896) (7320) (8224) (4806) (6810) (8320) (7506) (7308) (6542) (7064) (5626) (7366) (8500) (8030) (5730) (7244) (8136 8346) (7524 7778) (6848 4802) (8490) (8386 7972) (8176) (7530 5716) (7774 7318) (8546) (6918) (7126 6362) (8160 6762) (7696) (5710) (6586) (7002 8398 7894 7230) (4962) (7318) (8598) (5404 7988) (7050 5678) (6894) (8550 8218) (7086) (8102 6768) (4850 8354 7320) (7774) (7546) (6372) (8228) (8476 7542) (7056 4872) (7896) (6786) (8164 4742) (6570) (6884 6072) (7286) (6720) (7602 8040) (7062) (7776 5756) (7550) (8192) (5478) (6576) (7984) (5744) (6336) (6874) (7216) (4778) (7066 7376) (8546) (8022) (6990 7548) (6894 8160) (7262) (8546) (8494) (8056 7898) (7258) (6840) (7178) (5876) (7992) (8402) (7534) (4760) (6834 5732) (6592) (4716) (8138) (7602) (6030) (7976) (7144) (6574) (6994 8498) (6744) (8170) (7548 6388 5878) (7006 4752) (7970 7268) (7672) (8480 7924 7050) (8028) (8140 5996) (6386) (7552) (7056) (7166 5760) (7602 7318 4754) (8544 7968 7888) (6830) (7050) (8102) (8040) (6174 7548) (7046) (5730) (4666) (7602) (6380) (7218) (4626) (8100) (5998) (6912 8044 7600) (5740) (4778) (7602 6308) (6720) (7974) (6178 7604) (6852 4570) (6188 6916) (8032 7154) (7600) (6876) (5982) (4706) (7716) (7142 5292) (4300) (6398 6996 8594 8480 8448 7830) (8144 8090) (6340 5490 8466 8240 8090 7258) (8364 8014) (7480) (8260 7926) (7734) (8154) (8142 7296) (8394) (8542) (8586) (8414) (7908) (4948 6662 7556) (8258 8120) (8514 8440) (8410 7606) (7818 6966 8244 8094 7976) (5998) (4848) (8036 8338 7480) (4298) (6676 7270) (8128 8082 7040) (5312 5530 7934) (8510) (8288 8038 7502) (8356) (6698) (6684 8250) (8294 8178) (7798 7930) (7634 7204 8492 7960) (6998 8272) (8592) (8210) (6856 7552) (7412) (5280 8314 7078) (8084) (6774 7600) (8478 8380) (8530) (7222) (7816 8576 6918 7336 7072) (8346) (8572 6706 7936) (8394) (4474 7886 5510 8550) (8172 7276) (7214) (8276) (7700) (7554) (4460 8126) (8536 7912) (8382 6916 7854) (8324 7384) (6998) (5200) (8050) (8268 7460 6642) (8138) (4644 5944 7946 7256) (8346) (8014 7536) (7858 7200) (7702) (8268 8156) (4490) (5976) (6634) (7072 8452) (6866) (8018) (7532 7472) (8476) (6718) (4830 8138) (8492 5580 7274) (7628 7896) (8280) (7562 6952) (5312) (8020) (7776) (8076) (7722 7118 8562) (7348 8594) (6472 8150) (8022) (5492 8520 8410) (7200) (8560) (8234 7370) (7284) (6964) (8350) (7178) (8030 7728) (6662) (7742 8158 7942) (4574 7994) (8484) (7666) (8252) (8440 7936 6794) (4850 8120) (8370) (8492 7444 7304 7234) (8556) (8400 8262 6658) (8166) (7974 7730 7620) (7882) (8342 6692) (7548) (7096) (8482) (4414 8428) (7752 8328) (4948 7460) (7994) (8198) (4178 8506) (7956) (7182) (8464) (8272 7670) (7948) (6634) (6344 8348) (7834) (7656) (8202) (7906 8472) (8354) (7296 7178 6982) (8108) (7928 8416) (8466) (8062 7868) (7048) (5144 7966 7672 7804) (7188) (4440) (8116) (8380) (7504 8550) (7822) (6568 6740) (5272) (7634 8028) (4290 8174 7544 6748) (7124) (7800) (8016) (8450) (7350) (8552 7924) (7126 8272 8044) (5400) (5848) (8318) (7316 8154) (8418 8334 8548 7662) (7622) (6486 7824 8030) (4124 8452 8284) (8254) (7500) (7428) (8412 6514) (7276) (7892 7602) (7858 8454 8572) (8072) (8566 8258 7484) (5150 7334) (7802 8344) (8534) (8372) (6112 6662) (8062) (8472) (5538 8136) (7858 7634 7582) (7446) (8428 7994 7118) (6010) (7278) (7494) (6408 7602 8398) (8102 8260) (8514) (8300) (7788 6662) (8034 7420) (7270) (8468) (8040) (8466 7916) (8566 7596) (7570) (8376) (8558 7956 7106) (7768) (8278) (5000 5980) (7990) (7596) (6328 8284 7510) (8050) (8392 8562) (8106) (7870) (7116) (5220 7848) (8254 7392) (8446) (8328 7384) (6750 6650) (6324) (7088 8546) (7706 7816) (7268) (6116) (7956) (8520) (4142) (7972) (8250 7264 7414) (8310) (8448 8474) (7686 7858 6658) (8562) (7984 7390) (8302 8146) (8424 8582) (6132 6478 8034) (8254) (6852 7112) (7844) (7946) (8302) (8114) (8478 7874) (7264) (7866 6650) (8168 7102 8572) (8338) (6872) (5436) (8154 7938) (7634) (8522 7532 6666) (8402) (7278) (7094) (6906 8124) (8306) (8444) (8582) (6300 8418 7414) (7088) (6322 6622) (4008 7912) (7544) (8270) (7980 8098) (8562) (5960 8334 7284) (8238 8440 7542) (8156 7082) (6886 8510) (6664) (7666) (8396) (5386 8276 7570) (7960 7900) (8372) (8072) (8226) (8228) (6120) (7300 8468) (7708) (6658) (7944) (6270) (4010 7828) (8132 8324) (7706 7184 8042) (4946) (7418) (8560 7954) (6870) (7860 7626 7108) (8278 7558) (8446) (7978) (7282) (8284) (8576) (7910) (8114 8220 7586) (7448) (4966 8510 7872 6742) (8226) (8306) (8476) (7450 7094 7568) (6172 7730) (6924) (6544) (8248 8006) (7072 7372 7920 8106) (6752) (7558) (8396) (7898 4166 7482) (7104) (8316) (6928 8246) (6166 7814 7596) (8164 7984) (8564) (7690 6652) (6936) (6104 8292 7140) (8316) (4970 8536) (7946 8168) (6416) (7122 7536) (8404 8530) (8262) (7612 8520) (6988 5970) (8326) (8030) (5002) (8430) (6966) (7880) (6040 7746 6900 8198 7520 7328) (7174) (7326 8430) (5358 4150 7668 7466) (7730 8250 6912) (5638) (6680 8584) (8594) (7764) (6064) (8388 8462 8248) (7546) (8116) (6944) (8398 7756 7680) (8298 7140 8242) (7840) (8546) (6820 8340 8514 7538) (7288) (8022) (8578) (8004) (7494 7840 8076 8196) (8376) (7636 7718 7192) (6062 8126) (5030 8062) (7876) (5300) (7652 7704) (5924 8532) (7942) (8372 8232 8550 7328) (8464) (7202) (4096) (5242 4714) (7852 8024) (7552) (7704) (8550 7916) (8102) (5600 6072) (8552) (8432 8026) (7792 7392 7976 7562) (8186 8376) (7282) (8332) (8478) (7884) (8398) (6662 6084) (5014) (7754) (8508) (8530 7268) (6612 8122) (7554) (6098 6982 7932) (8478 7374) (7938) (7842 8260) (7768) (5168 6716) (4042) (8574) (6592 5734 7294 7948) (5032) (7866) (8562) (7584) (6868) (7408) (7968) (6850) (6120 7232) (8564) (6820) (8110 7952) (7554) (5024 8390 8092) (6120 4294) (7078 7408 7242) (7832) (7322 8250 8544) (6458 6364 7480) (6836 7580) (7002 8516) (6100 7818) (8048 8560) (7384) (7982) (7724) (7818) (7210) (6834) (8348 8158 8030) (8574) (8460) (6090) (7890 6872 7562) (8470 5656) (7238) (4374 6118 8162) (7704) (7422 8392) (8290) (8550 6894) (8558) (7364) (7954) (5274 8580) (6144) (7548 7284) (8066) (5066) (7744) (4034) (8138 7702 7540) (7632 7342) (5090) (4146) (8522 7962 7416) (6454 8194 8090 8404) (6902 8576 5412) (7266) (8590) (6062) (5016) (7830 8558 7984 7702) (6716) (8266 7738) (8428) (6158) (5006) (8460 8160 7000 8368) (8194 7396) (4420) (6726) (4166) (5180 6288 7570) (8238) (7052) (7810 6108 8310 7726 7288) (8204) (8090) (7550) (6988) (4130 8020 8392) (7430 6792) (8236) (4964 7644) (7958) (4766 7466) (6766) (8110) (8272 8134) (8098 8438 7328) (6994 8408) (6430) (8022) (6756) (7712) (4938 8196 8512 8080) (7742) (6458 7480) (7886 7410) (6850) (8076 7954) (6704) (8448) (8240) (8386 8294) (6860) (4602) (7954) (6272) (7492) (8564) (8518) (8594) (7492 8148) (6102) (6726) (7756) (8066) (8262) (4372) (7960) (7160 8580 6710) (8394) (7744) (7982 8090 7390) (4618 7476) (8230) (6118) (6714) (8274) (8330) (7924 6122 4400) (4882) (7476) (8582 6908) (8470 8112) (8522) (5402) (7346) (8142 7736 6798) (7948) (8092) (6118) (4982 7494) (7894) (8372) (7336) (8006) (8472 6564) (7986) (7420) (8012) (7744) (8272) (6752 6144 7998) (7890 8436) (4076) (8134) (5042 8342) (7966) (8560 8506) (6702) (8114 7730) (8206 6758 4132) (7298) (8496 8330 8086) (6128) (5602 8546) (8058) (4826) (7494) (8254 7974) (8362 8102) (4368) (8528) (7654 7786 7374) (8304) (7492) (7926) (8480 6092) (6908 8040) (7820) (7518 8092) (8098) (5298 4464) (8596) (8260) (4444 7718 7114 8518) (6466 7452) (6138) (8022) (5042 7864 6984) (8284) (7368) (8152 8416 7928) (7932) (7754 5740) (8280 4466) (8504) (7880) (5164) (8158 8396) (6838 6142 7554) (7442 7070) (7828 7966) (8568 6702) (5066) (8422 8192) (8474) (8512 7830 6998) (6136) (7476 8228 7302 5608) (6746) (5004) (8266 7806) (8384) (7184 6182) (4670 8318) (7958) (8564) (6266) (8246 5476) (8458 6818) (8418) (7902) (7854) (7182) (7950) (6040 8464) (8452) (6870 8582) (8168) (7464 7352) (5782) (8276 6818) (8458 8148) (8300) (6108) (7964) (7566 6886) (8400) (7752) (8092) (7174 8482) (8162) (8282 6658) (6234 5722) (7372 8180 6826 5560) (6440 8242) (8598 7590) (6536) (8472) (7776 7208) (7956 7374) (7882 4998 6864) (5814) (7740) (6694) (8490) (8036) (8198) (7420) (8276) (7556 5654) (8588 8020) (7146) (8402) (8490 6580 8232) (6272) (6914) (6294) (8096 8492) (7814) (7690 7530 4410) (8400 7374) (6632) (8260 8220) (7988) (7548 7052) (8486 8126 7388 7262) (4998) (6304) (6980 7886 7572) (6968) (6802) (7932) (7250) (8362) (8456) (8244) (7974 6540) (7836 7934 6260 8094) (4528) (8572) (8376) (6956 7624 7446) (7954 5582) (8104) (6434 7852) (8522 8398 6848) (4094) (6752 8222) (4974) (8584) (5592) (7876 7418) (7584 8592) (7450 7086) (8400 8218) (8026) (6710) (8094) (8298 7064) (8138) (8036) (5962 7668) (7436 7258) (4708) (6904) (8220) (7556 7924) (6166) (7742) (8264 5782 5558) (8392) (8530 7112) (7950) (4636 7912) (7730) (5282 7768) (8496) (7418) (7114) (7600) (6986 6136) (8330 4726) (7118) (5588 8578) (4396) (5054) (7596) (8028) (5602) (7908) (8424 7480) (8050 6122) (8364 8564) (7904) (7738) (6884 6828) (8394 8588) (5350) (8560 7302) (7164 8420 4188) (7964) (8582) (8150) (8246) (5080) (7736 6788) (7280 8018) (6868) (5076) (8486 8376) (7808) (7956 7596) (8500) (8486 4294) (7226) (8496) (4578 6086) (8108) (7844 8414) (8360) (7456) (8548 7994) (6770) (7956 6130) (8506) (7762) (5408 8000) (8594) (8144) (6802) (7832) (4758) (7580) (7954) (8390) (8562) (4160) (8054) (8264) (7174) (6134) (6792) (6638) (7878) (5640) (4028 8580 4360) (7284) (8574 7872 7578) (8496) (6152) (7586) (8586 4402 7738) (7234 7884) (7534) (8504) (6136) (8398) (7410) (8062) (8590) (7880 6120) (7174 5352) (7586 5718) (8594 6118) (7746) (8040 5562) (8418 8308) (6130 4104) (8598) (5736) (7592) (7884 8516) (8422) (8204) (7362) (7380) (8508) (8130 5404) (8370) (7884) (8124) (8444 6098) (7568) (8174 8014) (7394) (8256) (7310) (7992) (7830) (7624 7688) (7394) (8496) (4120) (7878) (5504) (8020) (5406) (7462 6124) (7608) (7878 5354) (7590) (7246) (7336) (7614 6142) (4262) (7396) (7816) (7932 5602) (8590) (7264) (7818) (8248) (8404) (6262) (8492) (7594) (7532) (7752) (7764) (8590) (7868) (8250 7952) (8046) (6128) (4286) (7946) (8334 7734) (7590) (8036 8140) (8408) (5742) (8366 7942) (8500) (7408 6072 7330) (7892) (7082) (8256) (7976) (7746) (8512 6122) (7550) (7938 5962) (4312) (7076 8582) (6106) (8150 6768) (8386 7880 8496) (8008) (7756) (6104) (8392) (8146) (8586 7750) (8000) (8400) (6282 8256) (8498 7320 5378) (8108) (8584) (7450) (7310) (7878 7414) (8378 7396) (4180) (6130) (8538) (8584) (7286) (7966 7592) (7876) (6128) (8392 7412 4190) (7568) (7886 8258) (7962) (7374) (8502) (8392) (6146) (5790) (8258 7562 7526 7386) (7294) (7864 6118) (4394 8494) (8168) (8322) (7556) (8398) (6110) (6638 5062 7844) (6874 8040 7364) (4262) (7944) (8342) (7596) (7978 7416 7804) (6920) (4332) (8508) (8330) (7750) (6744) (7910 7582) (8388 7370) (4230) (8036) (6110) (7290) (8504) (7880 8142) (8046) (6124) (7926 6876) (8328) (7992) (8414) (7864) (8110 7374) (8094) (8240) (8502 7578) (6134) (6894) (8500 8432) (7820) (7536) (8458) (7414) (6124) (7554) (7660) (7560 6886) (7390 6296) (7824) (8368) (8376 8210 7192) (7400) (8162) (7778) (7548) (8090) (8382) (7942) (8242) (8578 8500) (7888 6210 6902) (8024) (8268 6032) (7548) (6894) (8496) (7232) (6282) (7878 7342) (8000) (8398) (7326) (7608) (7434 7780) (8392) (6820) (6220) (7730) (8496) (7502 7868) (6116) (6636 8252 8600) (7300) (8052) (6850) (6290 7562) (7394 7750) (4394) (7092) (8460 8252) (8316 7900) (6760 7656) (7536 8190) (8514) (7950) (4232) (7596 6518) (8218 7224) (6102 8408) (8056 6852) (7382) (8290) (7112 8186) (7830) (6118) (8016) (7504) (8226) (8044) (4358) (6836) (7168) (8490) (6568 7554 7344 5860 8416) (8244) (7650 7834) (7978) (6028) (5752) (4818 8484 6900) (7818) (6612) (7194) (8226) (8482) (7480 7648) (4242 8464) (8590) (6660 7936 8028 8492 7258) (4798) (8394) (5946 8220 7774) (5760) (6146) (6796) (7872 8036) (7262) (8490) (5720) (8546) (8112 6940) (7268) (4580) (7470 6034) (8012) (6510 8234) (8590) (7662) (8368) (8490) (7752) (4012) (8390) (7460 6916) (8250 7204) (8526) (6620) (7772) (8284 8070) (6488 4404) (8460) (8566) (6132) (7478) (4652) (8288 8376) (7956) (6646) (7878 4044 7244) (7796) (7640 6854) (6632 4918) (8384 7778) (5228 7266) (6986) (7148) (7470) (5808 6804) (8050) (8258 8446) (6484 8010) (8252 5728) (7692 6912) (8408 8132) (4934) (8524) (6162) (6578 8056) (8578 7726) (7990 7484 8296) (8450 7804) (6776) (8396) (8528) (8322 6610 7290 4936) (7908) (8236) (8376) (8260) (6462) (8562 8058) (8466) (7482) (7884) (7164) (7726) (6678 6110) (6934 8396) (7550) (8022 8046 7738) (8554) (7146) (8560 8386) (6902) (6904) (7266) (8394) (6562 8002 4822) (7132) (7778 6938) (7908) (7802) (8034 7900) (4758 7666) (8392) (4758 8236) (7138) (7594 6530) (7918) (8460 8090) (8422) (8512 7752) (7642 4638) (8102) (7926) (7654 7502) (6584) (7728) (7942) (7868 4406) (7968) (6134) (7478) (8044) (7138 7832) (7876) (6450 8566) (7588 7482 6784 4394) (7948 8584 8444) (5760) (7156) (7972) (7624 6462) (4660 8418 6124) (6954) (4696) (8562 8054 7984) (8032) (5426) (8562) (8296) (8328) (7282) (5434 8510 8484 7772 6938) (6654) (8028) (6284) (7592 8414) (7742) (8048) (6634) (5720) (7958) (5164 8576 8512) (4414) (7234) (7808) (6612 6128) (8380) (8536) (8024) (6506) (6998) (8260 7476 7284) (7204) (4494) (8492 7638) (7474) (6646) (6496) (8112) (7452 8172) (8384) (8506) (6326 7902) (8340 8466) (6626) (7344 8250 8484 7960) (8320) (7066) (6880) (7990 5656 6992) (5472) (7376) (8308 8406) (7830) (5978) (6938) (7836) (8302) (6592 8450) (6038) (7568) (7944) (8460) (7772 8182) (6464) (7930 7868) (8440) (8110) (8282) (7204 7116) (8476) (6660) (8168) (7270 8386) (8486) (8412) (6594 8450 8260 8202) (5722) (5082) (6040) (8118) (7334) (7492) (7080) (7330) (8244) (8362) (8046) (7066 8472) (8160) (8206) (7534 8100) (8558 8062 6826) (8254) (6472) (5136) (6860) (7540 8544 8052) (8216) (7926 5472) (8380) (7106) (8216) (8500) (6018) (6812 8270) (7870 7124 8072) (8556) (7932) (8416) (8404 8212) (7468) (8014) (7064) (8306 6930) (7166 8380 8252 8094 8590) (7926) (8548) (7156) (8340 8446) (5880 6112 8234) (8556) (7784 4168) (8374) (8450) (4480 8352 6046) (8552) (7414) (8474) (8258) (7758) (6504 7084) (7934) (7786) (8556) (8370 7934) (6412) (8510) (8034) (8414) (8560) (8492 4564 8482) (6922 8362) (7056 5466) (7116 6812 8468) (6550 8502) (7760) (7812) (6284 8074) (7110) (8518) (8044 6800) (6018) (8590 8218) (8034) (8382 7788) (8470) (7114) (7598) (8540) (7504 6962) (8494) (6962) (8564) (7366 8358) (5880) (8444) (7554) (5206 8014) (7192 7146 6802) (7380) (6620 5472) (8554) (5984) (7808) (7486) (7648) (8442) (8026) (4766) (7594) (6020 7516) (7102 4726 8106) (7178 6428) (6090 8502 8006) (6812) (5464) (7376 8104) (8380 7054) (8502) (7768) (7186 7430) (7160 8310 7604 7056 8500) (8342) (8038) (7962 4854) (7692) (7166 7548 6894) (8386) (8446) (7058 7648) (8252) (8426 7974) (8558) (7628) (7138) (7720) (8442 6838) (8172) (4094 7628) (7712) (8364 7060) (7182 7630) (5044 7820) (8158) (8054) (5132) (6808 6924) (7354 7532) (7864) (7784 7120) (5218) (7040 8520) (8424 7702 5926 8142) (8254) (7790) (5510 7460) (7696 8228) (8394 8112) (4922) (8066 8038 7668 7366) (6580) (8512) (7186) (7496) (7284 8180 8112) (6506) (7310 7126) (4088 7372) (8114) (7882 6888) (6496 7452) (6500 7764 7338) (7016) (8338 8566) (6372 8026) (7674 6850 5116) (8314 7724) (6244) (7838) (4384) (8496 8010) (7414) (7832) (8082) (8334) (5092 8462) (8540 7648) (6270 7468) (5948) (8234) (5162) (7060) (6790 4506) (4054 8500) (7854 7300) (7692) (8214 6538) (8406) (8054 7116) (8464 6874) (5422) (4886) (8322) (8076 7810 7462) (8520) (5162 8010) (7170) (7642 8170) (8444 7860) (4548 6968) (5372) (5140 8024) (8586 7670) (8166 8032) (5172 7264 7450) (7324) (7526 6742) (8498) (8176 7766) (7062) (8290) (8538) (7586) (6210) (6494 7784) (5710 4388) (7126 8078) (8282) (7808) (4042) (7934 8414) (8590) (7586) (8524 8154 6688) (7966) (8366) (6962) (7006 6558) (5054 8448) (6202) (7280) (8574 7952 8590) (8326 8182) (8524) (6264 8276) (7808) (6908) (8290 8600) (6518) (7256) (8502) (8416 7802) (7412) (6242 8588 8090) (5106 8410 8528) (8192 7690) (6948) (7556 6460) (6740) (8446 8240 7254) (8072) (5080) (8124) (7634) (8364) (7770 8028) (6834) (6138) (8440) (8170 8054) (7800 7574) (4158 5476 8408 6874 6684) (8514) (4680 7414 8306 7968) (8508) (6496) (8220 8104) (5992 8430) (4324 7734) (5134 8062 6708) (6604) (5930 7888 6132 7260 8484) (8222 7632) (8108 7780) (7402) (7278) (7546 5384 7044) (8006 6200 7586) (8274) (4724 5788 4380) (8074 7462) (6846 8490 8414) (6244 6644) (6516 8356) (7366 8028 7590) (7870) (4488 8388 7784 7674 7188) (8210) (5048 8514) (6830 8300 7998) (6992 7756) (7516) (5722) (8164 7942 7408) (6464 7654 7046 6900) (6090) (6778) (7356 8526 8150) (7924) (7556 6686 8332) (8242 7184 8060) (4872 7360 8454) (7060 7922) (8474) (6324) (6954) (8262) (6630 7848) (5930 8452) (6218 7380) (7554) (7728) (6338 8400) (8042) (4964) (5796 7084 8010 7472) (7712 7280 7900) (8156) (6204 6558) (6832 8344) (7966) (7262) (6424) (6910) (8520 8572 7940) (7602) (8132 8432) (8466) (7560 6652) (8074 8344) (5502 7054) (7456) (7184 5986) (4088 4786 6816 8170) (8586 7858 7342) (7624) (7432 8108) (6280 8260) (5084 8364 8452) (6178) (7960 8524) (5768 7866) (7712) (8190 8230) (4388 6558 6670) (7088) (5024) (6956) (7664 8082) (8330) (5454) (8210) (6272) (8542 7690) (7932) (5538 8364) (6126 8578) (7840) (4452 7272 8256) (6020 7824 7590) (8466) (4372 7138 8296) (8568 8044) (6706) (7954) (6352 8566 8230) (7466) (4936 5802 7810) (8254 8454) (8142) (6648 6020 7532) (7930 7058) (7700 8330 8070) (7876 7274 8262) (6332 7426) (5442 8026) (4706 8374 7000) (8138) (7896 7600 8480) (8204) (8578) (5966) (7638 7450) (6988 8026) (5364) (6678) (4140 8214) (7320 7204) (8104 6900) (5124 5662 7850) (7552) (7224 8180) (7714 6824 6676) (8594) (7922 8472) (7442 7312) (7694) (4948 7076) (5828) (7640 8386 8108 8460) (5590) (7162 8280 7786) (6422 4840) (5690 6128 7490) (7510) (4472 8270) (5196 7562 7056) (8174 8136) (6532) (8208 8370) (6796 6690) (7896) (7664 7538) (8478 7476) (5496 8496 8192 7550) (6160 5208) (7962 7684 7586) (4516) (8430 8348) (4926 8156 6748) (6942) (8528 7638) (7372 6032 5972) (7038 8082 7710) (4832) (6176) (6398 7380) (6690 7726) (8410) (5702) (7776) (4470 7630 7772) (7282) (7472) (8110) (5936 8566 8466 8330) (8156 7696) (8308) (5318) (6984 7946) (8492) (7562) (4096) (6758 8580) (8030) (7834 6618) (7530) (8138) (8460) (5330 6304 8110 7728 7308) (7302) (4620) (8252 8066) (6470 8568 8294) (6836) (5842 7116) (4882 8084) (7800 8356 7676) (6942 7492) (5852 7338) (6756 7248) (5688) (8024 7390 7116) (6412 8378) (5404) (6002 8280) (7634 8146) (7756) (6652) (4542 8014) (6876) (5258) (8486) (7896 7870 6992) (8050 7290) (6718 5684) (4796 7568) (6370 8252) (5204 6906) (6352) (4066) (6606 8570 8542 8278) (7666) (8090) (8240) (7768 7372) (8548) (7014) (5982) (6370) (8508) (7502 8406 7734 7084) (8380 7416) (8570) (7248) (5596) (5120 8110 7280) (4894) (7490 4004) (5640) (6302) (6450 8456 7680) (6178 8270 6904) (8078) (4572 7970) (7324 7616 6600 8280 8168 8424 8496) (8310) (7818 7092 5250) (6764 7718 6986 5406) (6374) (8340) (7998 7854 7770 8494) (7214 6698 6258 5410) (7430 8450 4862 8586) (4384) (7644 7012 5854) (8446) (8436) (8102) (8470) (7454 7962) (8416) (5950) (6440) (7786) (6970) (8138) (4684) (8174 7950) (5226 7228 7170) (6804) (8232 8422 7802) (6364) (7014) (7864) (6428 4554) (7068) (5858) (8414) (7476) (8272) (8008 7180 4962) (4542) (6552 8118) (6796 7880 5252) (8432) (6704) (8562) (8110 5108) (8448 4424) (8478) (8580) (7466 8462) (8360) (8226 8590) (6666) (7638) (6926 8522) (4764 8126 7970) (7378) (8390 5840) (8362 8520 8096 7186) (8246) (6910) (7808) (7994) (7938) (8394 7816) (5974) (8590) (6804) (7168 8210 7640 5162) (8378 6946) (8112) (8050 6590 4996) (7460 7418) (6348) (6804 7646) (7228 4910) (6972 8408) (5304) (7850 5932) (8102) (8320 7584) (6988) (8238 4760 7852) (7982) (8562) (6710 6368) (7642) (7242 8126) (8312) (7466 7874) (8200 6522) (6758) (8332) (8036) (5826) (8590) (8458 6674 4280) (8154) (6182) (8256 8000 7070) (8030) (7246 7650) (8572) (6482) (8466 7986) (8322 8404 7798 7652 6986 5016) (8094) (8392 7308) (6316) (6738 7440) (6972 7226) (8136 7658 6368) (8466) (7480 7386) (8438 7988) (8198) (8256) (8086) (8582) (7318) (8480) (8568) (7804) (8334 6510 8014) (7248 7164) (7434) (7260 7192) (8452 7940 5764) (8202 8152 7630) (6658) (7014) (5188) (8388) (6748) (7946) (8566 5216) (6448) (8256) (8466 8098) (7264) (6994 7872 4756) (7946 6630) (5430) (7626) (8510) (6212 5140) (8158) (6484 5552) (7428 6702) (8524 6180) (8008) (7630) (8496) (8398) (8158) (6366) (5182) (5780) (8384) (6828 8476 8196 7944) (7282) (8228) (6870 5472) (7978) (7922 7014) (8246 6704 5276) (8114) (5932) (8018) (7454) (7738) (5402) (8006 7630) (6726) (6930) (8450) (8404) (8578 8534) (7010 5494) (7090) (7464) (7790) (6808 6168) (8534) (7640) (8494 8392) (8064) (8362) (7950) (8152 5604) (6172) (6820 8258) (4754) (7806 7430) (8454) (7634 7240 5284) (8060) (8164) (6740) (8008) (6998) (7248 6736 5890) (8426) (7092) (7454) (8206) (8394 7818 7262 6460) (8360 6730 5142) (8574) (8038 5710) (7632 7348 4622) (5600) (8520 8070 6092) (7438) (8276 8140 7940 5324) (8566 6322) (6902) (7240) (8246) (8036 7450) (8490 6070) (6332 5254) (6798) (4810) (7826) (7466 5916) (8464 8276 6668) (6754) (7262) (7392) (7036) (8260) (4204) (6820 8370) (6784 5430) (8002 6998 6498) (6732) (8416 7956 7642 6164) (5354) (7436) (8504) (6480 5264 4042) (8228) (8480 7638 6900 5496) (6594) (4880) (8272) (8548 8074 6794 6112) (7810) (7944 7254 5028) (8522 6478) (8252 5940 4282) (6820) (4014) (8396) (8258) (6990) (8008 5072) (8224 5872) (5620) (7876) (6828) (6960 5082) (7434) (6028) (5690) (8068 6696) (8532) (8406) (8224) (5998 4686) (5510) (8258) (8066) (7170 6346) (7444) (4166) (6932) (7228) (6502) (8516) (7002 5478) (6542 5822 4676) (8168 8070 7258) (8396) (6678 6276 5692 5284) (7962) (8262) (7642 6280 4782) (6574 6096) (5878) (6434) (8006) (5092) (5196 5864) (6240) (8238 5334) (8066 8344 6518 7958 7784) (8540) (5628) (7076 7762) (8248 7486 6758 5150) (7986 7792 6260 8554) (7338) (7568) (5402) (7498) (6170 6562) (8202) (8532 7632) (8316) (6652) (6444 5458 8184) (7986 7520) (7670 8284 8034) (7908) (7566) (8536 7894) (4722 7412 6404) (5946) (8488) (7730 6260) (7818) (5632) (7556 7902 7692) (6110 8540) (7422) (7890) (6776 5730) (7374 6288) (8374) (7322) (8058) (8488) (7628) (5908) (8560 8032) (5606) (7514) (7374) (8046) (7448 7908 6288 5480) (8228) (7362) (7372 5872 7792 4996) (7696 8596) (6448) (6208 7836) (7766) (6114 5620 8038) (7934 8176) (7810 7544) (5808) (6210) (8030) (6658) (4562) (7866) (7684) (7562) (7314) (6742 5174 8590) (7716 7926) (8006 6182) (5554 8276) (6162) (5844 8600) (6926) (8452) (6152) (7388 7866) (5896 8508 7548) (5790) (7662) (8022) (7256 4366 7008) (6900) (8356 7280 8176 7748) (7614 8562) (6880) (8536) (6228) (8488) (8222 7476) (7876) (8120) (6238) (8348 7568) (8488 7842) (5556) (7618) (8056) (7186) (8012 4776) (8592 7698) (8186) (8298 7620) (6054) (5712) (7544) (7286 7772) (8454 8580) (6764 7050 4508 7802) (7194 7870) (8056 6238) (8534 7630 8508) (8322 7890 7418) (5672) (6576) (8032) (7998 8552) (5436 8492) (7374 8352 8186) (8494) (7138 7550) (6072) (7308 6284) (8062 7766) (8408) (7632 7434) (7194 5672) (7824 4456) (7488) (7132 7292) (5392) (7920) (8302 4666) (8048 6256 5886) (8532 7638) (7298 8450) (7056) (6796) (7850) (8118) (7558) (7192 8502 7914) (7772) (8246 7258 6938) (6770) (8528 7918) (8110) (7682 5432) (6852) (7476) (8468) (8358 6108) (7074 8056) (8182) (6888 7234 7764) (4822) (5862 6900) (7638) (7460) (7994 7304) (8290) (8184) (7906) (8266 7580 6288) (5452) (8456) (8514) (8118) (8290 7270) (5432) (8112 7864) (7654) (8440) (8262 8164 7562) (7414) (5912) (7928 6232) (5586 8014) (5704) (7746) (7022 6450) (8254) (7234 8512) (7876) (7222 7952 8156) (7468) (6666) (4712) (8550) (8294) (8054 8532 7806) (8188 6986) (7320) (6360) (7940 7492) (7720 5398) (7086 8110) (8292 6768 6028 4748) (5850) (8476 5490) (7864 6318) (7462) (8414) (7234 6002) (8052 7628) (8366) (8250) (7074 4714) (6352) (6924) (8406 7946 7576 7298 6564) (8102 5662) (8468) (5002) (8344 7220 7710 6250) (7474) (8090) (8504 7864) (6918 8466) (8284) (6770) (5492) (7790 7042 8238) (8120) (8024) (6208) (8298 7416) (6276) (7700) (8110 8452) (7492 6530 5872) (5980 7634 7246) (7016) (6088) (7284 8328 8018 7654) (7088 8102) (8190) (7480) (6778) (8450 5478) (7528) (8198) (6108 8366) (5786) (8180) (7904) (7582) (7234) (7942) (5560) (7514) (7704) (8390 8218) (5686) (6160 8380) (7962) (8452) (8548 8258 7144) (8348 7594 5636) (7656) (7288) (8212) (7916) (7536) (8010) (8240) (7686) (8434) (5810) (7894) (8124) (6764 7748 7932 8396) (8228) (5460) (8574) (8454 7680 8346 6846) (7882) (5666) (8192) (8574) (4420) (7882) (8102) (8372) (7946 7444 6820 8580) (8120) (8056) (7592 7912) (6996) (8560 8212) (7892) (8058) (8170) (7234) (7902 6150 8416) (8568) (8424) (7154) (6348 8418 8306) (8488 7860 7700) (7504) (8564) (8042) (8556) (8396 8032) (7632) (7420 8480 7170) (8566) (6448) (7426 6956 8428) (8458) (8334) (6930) (8480 8072 5680 8256) (7648 6850) (8408) (8504) (8368) (8544) (7816) (6762 7170 6038) (7578 8020) (7724) (7404) (7866 8350) (7976 7178) (8482) (8592) (6432 8264) (7422 8244) (6158) (7642 7578 8592) (7886) (6930) (7430) (5490) (7504 8558) (7674) (8596 8264) (7590) (8140 7544) (7284) (8084) (7498 5058) (8450 8520) (8240) (7198) (8556 8342 7678) (7696) (7492) (8142 7018) (8530) (8284) (7636 4660) (8036 8384) (8506 7472 7182) (7868 5312) (8594) (7312) (7972 4606 8106) (8462) (7446 4978 8356) (7650) (6206 5290) (7596) (7702) (7162) (8066) (7460) (8430) (5436) (8488 8552) (4986) (7866) (7668) (8038) (7552) (7876) (8478) (6994) (8072 5414) (8478 7890) (5738) (7488 8124) (6046 8564 4922) (7236) (4018) (7644) (8494) (5820 7936) (7508 6174) (5258) (8358) (4984) (8478 8060 7924) (7416) (5664) (8066 7334) (6254 5228) (7962) (8486) (8172) (4196) (8020) (6248 6106) (5024) (8122 7994) (8454 5818 8590 8192) (7424) (6558 6994) (7392 6044 6236) (8500) (7974 7034) (5942) (7650 8334 8282) (6906) (6274 4012) (7540 7188 5424) (8118) (4990) (8418) (7416 4440) (8042 7580) (6152 8202 6762) (8226) (7248 7890 6996) (5866) (6270 7422) (8554) (8536 8394) (8354) (7224) (8498) (8204 5392) (7512 7416 6246 4886) (8370) (7192) (8134 7886) (6982) (8398 7936) (8550 6250) (4786) (8458) (7892) (8020 7432 6872) (6196 7260 4920) (7658) (8206) (8568 8520) (8474 6984) (8120) (7872) (8596 4534) (6102) (7968) (8426 5138) (8374 7488 5488) (7326) (8554 7518) (8522 7626 7254 6976) (7898) (8492) (7428 7538) (6248 5642 8086) (4908) (7894) (8478) (5476) (8598 7638) (8132) (8434) (4902) (7896) (7480) (7284) (8136 6842) (8114) (6170) (6074) (8138 7458 6234) (8446 7006) (8036) (8564) (7574 5026) (5902) (5626) (8424) (6966) (8228 5430) (7218) (7450) (7266) (7652) (5534) (8600 8428) (6750) (8512 7328 5694) (8166 7172) (8228) (7690) (6170) (7414 4920) (8424 7554) (8546 6970) (7518 7260) (8100) (7900) (5908 5468) (8116 6244) (7976) (8506) (8430) (7998) (4676) (7476) (8514 8430) (6174 6086) (4878) (8192 7890 5286) (7230) (6938) (8036) (8522 7404) (8118 7558 6074 5260) (8364 8220 7208) (8408 7642 6982) (8086) (7476) (4988) (6244) (8498 8228) (5646) (7970) (7888) (7484) (7652) (5210) (8562) (7398 6102) (8476) (8552 5354) (7348) (4552) (8440) (6144) (8294) (8136) (8106 8032) (6984) (6058) (7642) (7212) (8518 4856) (8034) (8566 8290 8116) (8598 5682) (8446) (7208) (5004) (7528) (8214 8142 8116) (8368 6220) (7964) (5510) (8036) (8548 8446 7630 4552) (7888) (6252) (5690) (7440 7224) (8122 4706) (5034) (8582) (8362) (7488) (7220 6154) (8458) (7284) (7192) (7454 5696) (5346) (7914) (7992 5278) (8502) (6786) (8548 8032) (8090) (7380) (7648 5552) (7404) (8426) (7218) (7896 7480 5666) (4976) (7538) (5248) (8472) (5598 4702) (8572) (8442) (8594) (8488 6984 4876) (5390) (5304) (8492 7190 6940) (5676) (4656) (8596 7428) (7974) (5576) (8028) (5044) (8482) (8558 8476 7476) (7292 5652) (4966) (5664) (7396) (4884) (7974) (8476 8118 4008) (7448) (7332 5370) (7212) (6220 6140) (4862) (7412 5568) (6984) (5376 4304) (7976) (5292) (5652) (8428) (5154) (8472) (6740 4222) (7452) (8482) (5276) (6252) (8036) (6760) (5506) (4844) (7424) (6174 5442) (4412) (6122) (5588) (6936) (8454) (5082) (8034) (5400) (4786) (4514) (5564 4868) (4614) (4964) (6172) (5306) (4172) (5028) (5624) (5372) (4624) (5346) (6286) (4236) (5626) (6378) (5216) (7216 6974 7610) (7938 8064 8386 8564) (8188 8150) (7700 8206 4792 8502 8394 5704 5460) (7372 7096 6678) (8064) (8232 7774) (7468 6844 7982) (7836) (7592) (7110 8328 8300 5658) (8156) (8064) (6408) (8166) (7632) (7150 7460 7404) (7986 7762 6180) (6934 8362) (7528) (7076 8548) (7372) (8044 7972 6670) (7526) (7788 4800) (5460) (8332) (7938 8456) (8176) (7674 8552) (7602) (7106) (4672) (8452) (7858 6154) (7780) (8410 7602 8034 7038) (5980 7100) (4368) (8380) (7456) (4824) (8016) (7796 8484) (7476) (4840) (8144) (8272 8502) (5956 8020) (7608) (7968) (8596 7676) (8392 7590) (8492) (6042 5328) (6748) (8120 7034) (7714 8458) (7324) (8020) (8324) (8448 6902) (7506) (8244) (6222) (8018 7440) (5692 7314) (8392) (4558) (6968) (8294 5008) (8068) (5980) (7420 5312) (4664) (7348) (6950) (7948 7736 7994 7792) (8136) (8448) (7466) (8576) (8134 4628) (8326) (7772) (8078 7900 7438 6506) (7092 7342) (6736) (7788 5462) (8560) (8190) (7996 6720) (8282 7028) (7908 8520) (7394 6988) (7372) (7998 6066 8550 7538) (6746) (7138) (8458) (7812) (7296 8204) (4394) (8596 8000 8554 5304) (7184 8256) (8142 7564) (8450 8430) (8528 4914) (5694 4436) (8326 6796) (7990 6924 4338) (7434) (8554 6288) (7032) (6014) (7744 7620 6394) (8492 8408) (6732) (7292 6994 4996) (8182 8038 7984) (7828) (8310 7498) (6592) (8492) (8542) (6880) (7324 6114) (7050) (5184) (8098) (7806) (8494) (7688 7048 6650) (8090) (6034) (8434 7988) (7300 7856) (8144) (8550) (8554) (7906) (4486) (8286) (8406) (7958) (8226 8180 5408) (6250) (8036 4924) (8334 7384) (7980 7624 6356) (7636 6594) (7316) (5958) (6936) (5182) (8286) (8134 7822) (7280 7626) (6306) (7962) (8556 8094) (8436 6490) (6876 6604) (7858) (7164) (7812 6936) (6010 8560) (7624) (7270 7988) (7644) (4474) (8438 8324) (7342) (8554 6664 6106 5438) (7560) (8444 7498) (8152 5056) (8356 6252 4562) (8520 6604 5424) (6986) (7196 8572 8538 8304) (6874 6504) (8428) (7984 7588 5320) (8442 6108) (5948 8200 7046) (6608) (8000) (6908 4232) (4918) (7272) (7562) (4350) (8042 7782 7414 6652 6054) (8566 8534 8432) (8316) (7958) (8162) (5676 5374) (4810) (7150 8542 6290) (8448 8202 7412) (7754) (5874) (7868 7636) (8102 4718) (8558 7154 5322) (6912 6458 6084) (8094) (7792) (5950 8118 7976) (8358 7500 5460) (8558 6154) (6764) (8384) (7994 7826) (8082 7280) (7772) (8184 4818) (4034) (8318) (7970 7042) (8560 7344 6584) (6274) (7574 6822) (8554 5438) (8188 8078 6094) (7970) (4378) (5910 6682) (7628) (5274) (7862 7804 4090) (7986 6844 4480) (5324) (6160) (8168 7628 6748) (8442 7690 6148 4980) (5938 5830) (8134 8022) (7280) (7948 7480 6174 5098) (8360 6490) (8450) (7448) (8556 7066) (8076) (7622) (6936) (8360) (6482) (8192 7944 5468 4238) (8142 6766) (7076) (8450) (8090 7976) (8580 8336 6596) (7402 5482) (8418 8164 6842) (6410) (8556) (7412 6200) (7706) (8308 7992) (7084) (8088 4604) (6298) (8188 5428) (8286) (5850 5118) (4070) (7968 7790) (6592) (4358) (7546) (6340) (4924 4766) (8446 8332 8114 6980 5994) (7838 7626 7406) (8556 7266 6220 5334) (8306) (6928) (8086 6708) (4712) (7970) (6006) (6218) (7794 7036) (7974) (8178) (7416) (6090 5590) (8590 7142 7054) (8136 6662) (7814 7274) (6582) (7488) (4456) (7762) (8568 7606) (8092 7970 6492 5400) (8358) (6208) (6606) (4612) (5494) (7808 7052) (7964 6738) (8388 4768) (8560) (5594) (6458 4022) (5302) (8340) (7362) (6082) (7798) (7970 7630 6200) (6066) (8542 8208) (6734) (5566) (8016) (7854 7402) (5080) (6946) (8556 8088) (7982 6814 5340 4908) (7808 7268) (8300 6194) (7056) (4550) (7932) (8430 7714) (8086) (6874) (5930) (6658 4566 4476) (6494) (8196 5582) (8306 7626) (7868 6880) (7972) (6034) (6484 5126) (7028) (5604) (8086) (6764 6080) (7976) (7184 6568) (8440) (5546) (6008 4962) (7316) (7830 7082) (6546) (6696) (8078 7172 6314) (5058) (5582) (7574 7250 6632 5994) (8432 7870) (8088 7384 4928) (6790) (6350) (7962) (6298 4922) (5974) (7198 6986) (5626) (5254) (7134 6930) (8086 6722) (7040) (8370 7974) (8582 4598) (7634) (5408) (4410) (6850) (7286 5312) (6438) (5608) (7860) (6272) (7988 4864) (5560) (7058) (6930 6594) (6764) (7880) (6438 5136) (6956) (7976 7400) (5494) (7270 6924) (7860 4934) (6612) (6844 6006) (6776) (8562 7020) (7858 7636) (6402) (5286) (6628) (8386) (5496) (6474 6234) (8500 7622 7436) (7956 4960) (6834 6544) (5796) (5820) (7274) (7044 6502 5586) (5022) (7324 7076 6744) (8506 8422 7964 6222) (6676 4136) (6908) (5666) (7338 5204) (6448) (6788) (5858 4432) (5526) (7204) (6736) (6324) (7698 5110) (7862) (7278) (6356) (6168) (6874 5760) (7220) (4332) (7276) (6140) (8510 8392 7638 7586) (8538 6420) (5456) (6002) (5088) (4638) (6494) (5350) (4406) (8362 4758) (6718 6004) (6342) (5594) (6968) (8540 7496 5958 5044) (6676) (7106) (6082) (4446) (6672) (6020) (7702 7330 6958) (5284) (6610) (7076 6986 4354) (4270) (6920) (5444 4622) (8328 7308 6750) (8398 7418 4896) (7276 6804 6692) (8278) (7962 5802) (7042) (6202) (6494) (4584) (5378) (6328 4126) (7196) (4378) (6828) (6920) (6638) (7212 6136 5150) (6220) (7582 6370) (7988) (6818) (5834) (7052) (5518) (7396) (6716) (4882) (7336) (8532 8450 8360 5364) (7794 8364 6012) (6826) (7962 6328) (5664) (6938) (7148 6976 6114) (6074 4930 4716) (5642 5452) (6622 4396) (7020) (7306) (8570 7138 6724) (5454) (7426) (7262 4242) (6516) (8012 8414 7482 4750) (8252 8188 5532) (7308 8564 8354 8318 7600) (8086 7902 6978 6796) (8122 7560 7498) (4428) (8474 8432) (7076 6250 6224 5602) (8276 7418 6500) (8420 7884) (7696 6890) (7616 5040) (8510 8124) (8272 7714 5680) (8586 8084) (7576) (8442 7488) (7980 5288) (7190 6870) (8580) (7178) (8264) (8106 6444) (7710 8552) (7392 5544 5002) (8312 6972) (6902) (8502 7148 6668) (6130) (8042) (8424 6606) (8148 7610 5118) (5640) (8490 5896) (8380 7710 7196 6712) (7560) (8468) (7338) (6962 5580) (8200 6374 5176) (7538) (4698) (7990 8476 7876 7716 5802) (8112 5214) (6464) (7948) (8466 6994) (8308) (4758) (8034 7114) (8580) (8350) (5506) (6248) (7580 6810) (8250) (7596 5276) (8322) (8558) (7890 7184 5636) (6216) (7562) (8046 7722) (8438) (8410 8098) (7982 4992) (8216) (4708) (6272) (7344 8476) (8596 7024 5754) (8312 7628) (7924 4342) (8340) (7164 5394) (7436) (8452) (8244) (7642 7494) (8122) (8300) (7128 4816) (8440) (8554 7402 5798) (8084) (7210) (6264) (5826) (8220) (6774 4810) (6594) (8260 8094 5698) (8302) (7658 6490) (7972) (8410 7196) (7440 6896) (7928) (6220 5374) (7648 6454 4382) (8442) (8216) (8180) (7502 6746) (6480 6006) (8430) (8280 7000) (7966) (8512 7612 7458) (7232) (4170) (7418) (5760) (7962 7632 7550 6408 5042) (8404 5576) (4996) (7718 7210 7178 6966 4104) (8548) (8298) (5250) (7886) (7876) (7516) (8404) (6312) (6138 5900) (5034) (7186 6500 4370) (8554 5494) (8222 5814) (7628 6932 6708 6272 5182) (8456 7898) (7562) (7396 7124) (7192 6720 6336) (8212 6610) (5102) (5618) (7694 6442 5624 4870) (6728) (7414 7188) (8552 8158 7708 5656) (7964 7554 5038) (6794) (6116) (7630) (7878) (8468 6754 5860) (5312) (8284 6312) (6854) (7646) (6496) (6282 5888) (8222) (7168 6830) (8514 4132) (7884) (8176 5622) (7962) (6492) (7050 6318) (8514 4946) (8198 7716) (8468) (4466) (6108 5362) (6482) (8096) (8028 5514) (8556 5888 5220) (8492) (8192 7720 6420) (7182) (6716) (6118 5514 5188) (7968) (4992) (8536 6926) (8558) (5718) (7482) (8162 6416 5074) (8036) (6756 5948) (8442) (7966) (7406 6940 5498 5222) (7874) (6618) (7706) (8290 6816) (7994) (8530) (7418) (8022) (6300) (8380 6830) (6332) (5974) (8510 7714 5702) (7960 7396) (6724 4582) (8502 6478) (4986) (8036 7096 6250 4122) (7960) (7472) (6874) (6106) (6444) (5000) (7124) (8600 8556 8466 8432 6782 5470) (7190) (7708) (4144) (6026) (7960) (8488) (6820) (6672 5554) (8422 7206 5336) (6734) (6310) (7966 6632 6466) (8536) (7404) (7136 6874 5946) (6146) (5926) (5404) (7634 6878 5982 4896) (6606) (7204) (7472) (7130 5700) (6338) (8560) (6820 5532) (8094) (6634) (5966) (7972) (5810) (7450) (6198) (6370) (5220) (4852) (7948 6770) (7960) (6558) (4158) (6002) (7406 5998) (5900 4894) (7678) (7184 4734) (6638) (6900 6716) (8178) (7868) (6906 6244) (5580) (5082) (6556) (5908) (5344) (6792) (6006) (4362) (6662 6326) (7102) (5740) (6724) (6066 4552) (7564) (7514 7178) (5042) (4476) (7176 4252) (6120) (7862 5948) (5402) (7968) (6904 6720) (5622) (7392 4888 4642) (5824) (7018) (6672 4870) (6512) (6304 6214) (8370) (5280) (7042) (6628) (6212 5724) (7134) (7966 4092) (7510) (5088) (4596) (6210) (5480) (7190) (7038) (6812) (6620) (4100) (6240 5242) (6126) (5726) (7030) (5400) (4812) (6434 5976 5570) (6920) (4872 4078) (5642) (8350) (6856 6014) (6998) (6122) (4966) (7030 4206) (6760) (5774) (5188 4084) (6628) (6736) (6058) (6446) (7198) (6704 5878 4308) (5228) (6486) (6948) (7432) (5394) (4988) (4638) (6476) (5748 5528) (5322) (6154) (6290 6140 4112) (7064) (5362) (4752) (6982) (4908) (6994 6054) (5678) (5910) (5740) (6834) (5334) (4438) (5478) (6424) (4610) (5856) (7814 6592) (7170) (4982) (6074) (7312 5534) (6828) (4824) (5964) (6738 4062) (6974) (7192 6448) (4842) (6450) (7182) (6164) (5894) (6572) (4194) (5656 5134) (6896) (6638) (6252 5610) (4662) (5478) (5318 6590) (7258) (7050 6482) (6944) (5862) (4802) (6474 5788) (4286) (6678) (7146) (4032) (6834 5550) (6204) (4534) (6550 6004) (6568) (7040) (4430 4042) (6678) (6102) (5790) (5936) (4596) (6940 5396) (4358) (6268) (4744) (7332 5260) (6426) (7002) (6616) (5998 5560) (7072) (6514) (7282 7166 6814) (5622 4864) (6980) (4760) (6828 6658 6310 5858 5152) (6142) (5626) (6454) (6374 5704) (7048 6274) (6788 5948) (4770) (5318) (6206) (6948) (6316) (4382) (4680) (6344) (5872 5326) (5060) (5924 6464 4178) (6976 6216) (6808) (4584) (6484) (7126 8114 7342 7830 7504 8020 7678 8406 8330) (8390 4186) (8572) (8100 8258 7962 8300 7890 7650) (7268 6910 8462 8346 6996 5680) (7282 8316) (7600) (7886 5092) (8020 8366 7002) (6438) (8300) (8026 6772) (8286) (7340 8146) (6196) (4772 7748) (7408) (8180 8306 7902) (8470) (8392) (6530 8474) (7224 5628) (6946) (7922) (7610 8248 4244) (8088 5048) (6146) (8382 7920 7746) (7030) (8130 8436 8162 7594) (8578 7220) (7854) (7006) (6140) (8178) (7428) (8112) (7990) (6816) (8364) (5468) (8470 6752) (7252 7956) (7908) (6190) (8018 7592) (8164) (7402 6558 6982) (4608 5060) (7024 6420) (5622) (7238 7770) (8026) (8474 6894 6156) (6504 7638) (7958) (6736) (8168) (8564 7832) (7586) (8046) (8460 8376 8280 6422) (6684 7430 5712) (8108) (7670) (8244) (7756 6782) (8026 8476 7896 6394) (8434) (7604) (8162 7518) (7042 7578 6996) (8230 6774) (6098) (8492) (8304) (8596 5024) (8166 7428) (6548 5680) (8464) (7824 6810) (8390 7932) (8588) (8134 6430) (8376 7596) (8178) (7240) (7972) (8356) (7734 5980) (7508 4124) (8462 6804 6274 5688) (7032) (6148) (8564) (8288) (8190) (4038 7890) (7040) (5612) (8486) (8066 6948 6362 6170) (7002 5026) (8244) (8292 7416 7922) (8434 7772 8596) (6760) (5672) (7430) (8068 8470 6384) (7874) (7596) (8550 7194) (7996) (6844 5074 8410) (8174 4252) (6034) (6670 8490) (7722) (8564 8216 7540 7966) (8378) (6802) (8470 7024 7994) (8576) (7222) (8174) (5968) (6732 4040 7930 7900) (7038) (5624) (7766) (8046 4948) (6388 8260 6108) (8512 6970 6928 5698 4186) (8292 8254) (7900 6280) (8158 7768) (8334) (8382) (8132) (5058) (6274) (7592) (7526 7216) (8466 8310 7876 6150) (8238 7456 5948) (4166) (8562) (8150 8284 7442) (6758 8380 7248) (7788) (7738 7014) (8136 6246 6100) (8020) (6086 5104 8474) (4038 7922 7880) (7478 7036) (5770) (8214) (8048) (8482 4796) (7682) (8304 8600 8204 6878 6310) (4108 8296 8266 7700 6940) (6104) (8498 7782 7424 5006) (5734) (8390) (8156 7606 6478) (7756) (8412 8214 7238 5772) (7884) (6748 5152) (8142 8016) (8488 8372) (6824) (8174 7440 6154) (8284) (7860 7696) (8564 8478) (7796 6844) (8162) (7586) (7034) (7992) (4982) (8488) (7698 7440) (8260) (6876 7902 6294) (8182) (6876) (8382) (8272) (8148) (8482 8182) (7788 6432) (7568) (8014) (7252) (5168 7908 7836) (8260 6886) (8164) (7866 7496) (8116) (8476) (8028) (8300 6382) (7652) (5762) (7540) (7040) (8192 7886) (6834) (8470 8104) (8314 7584) (6146) (7804) (7050 7750) (7456 7938 6730 5470) (8002 6470 6220) (7814) (5642) (7674) (8286 8182 7628) (7830) (8340 6580) (6708) (6076 7850) (7950) (8046) (7964) (5634) (8204) (8206 5870 6494) (5938) (8270) (7396 6770) (7698) (5584 7828) (6234) (7680 7520) (6578) (4106 8320) (7850) (5420) (8596) (8242) (8334) (7926) (8494 7588) (6092) (6776) (8002 7442) (7748) (8178) (7536) (6260) (7734) (6528 7572) (7316 6210) (6734) (7870) (7796) (8108) (5870) (8270) (6412 6230) (7994 7506) (7268) (4652) (7828) (7656) (5118) (8328 6716) (6544 7966) (8462 7734) (7960 7276 7846) (6052) (8422) (7470) (8372 7502) (7212 6584 7884 7728) (6100 7422 6458) (4894 8554 7858) (8410 7568 7616) (5750) (8012) (6246) (7756) (7166 5536) (6884) (8536) (8318 4920) (8154 7684) (8456) (8018) (8450) (8570 6404) (7188 7742 7836) (7130 7484 8424) (5928) (8024 7476) (7418) (7566) (7730 8134) (7750) (8598) (8024) (6208) (8328 7474) (8392) (4564 8498 7548) (6040 5408 7644) (8584) (8332 7876) (7570) (8276) (8528) (7654 7834) (7092 6186) (8216 7310 5424) (8586 8506 4692 7482) (6762 8176 7976 7642) (8386 6560) (7972 8208) (7396 6068) (6826) (6598) (8288 8490) (6792 7446) (8490 7516) (7220 5640) (7898) (8160) (8028 7786 7572) (7184 7478) (8336 8218 6202) (6466) (6710) (7172 8370) (6912 5552 8522 7882) (8228 8172 7722) (4624) (5722 5440) (7882) (6880) (8020 7600) (8266 7740 5978) (7410 8550) (7792) (8260) (7174) (7688 7622) (7494 7486) (8590) (5524 4032 6190) (8326 8064) (6898 7686) (7268) (5684 8540) (7184 8180) (7078 6530) (8036 4662) (7918 6272) (6776 8532) (8288 7680) (8452 7872) (5540 7496) (8022 6074) (8276 7002) (8094 7538) (7664) (6538) (8444) (7196 4282) (8226 6218) (8030) (8182) (7100) (6882) (8448) (5890) (8324) (7318) (7196 5918 5490) (8276) (8188) (8376 8320) (6756) (7970) (8260) (6830) (7064 8032) (5874) (7074 8224) (8326 7790 5944) (6344) (8028 8450) (8282) (8558) (7196 7658) (7864) (7074) (8204) (6742) (6854) (6536) (8362 7186 6084) (8364) (6736 8552) (5768) (7384) (4452) (7190) (7948) (8328) (6868) (7068) (8034) (6848) (7410) (8312 8276 6172) (4090 8380 8198 6564) (8094 7192 8530 7878 5822) (5650) (8334) (8028 6880) (8314) (4266) (6360) (7138) (6754) (8300) (8218 8022) (8018) (4968) (6744 6212 5598) (8234) (8530 4232) (7188 7060) (8034) (7668) (8266 6548) (5766) (8208) (8330 6024 5494) (7060 8176) (6888 8448) (5596) (8314 4558) (5894 7394 6340) (4210) (6756) (7966) (8328 8032 6116) (8408 8306 7342 4384) (7042) (7180) (6776) (8382 6556 5734) (8174 7884 7724 7138) (6748 8026) (8224) (8318) (7076) (7182) (8218) (6270 5706) (8466 4476) (8402 6924) (5594) (8374) (7556) (6746 8270 7736 6104 4764) (8538 7494 7432 7182) (8188) (7874) (8324) (7666 5708) (7100 8196) (6540 4400) (8342 8030 7030) (6752) (8308) (6744) (8062 6114) (5950 4736) (7380 5420 4294) (8442 8314) (8222) (7178) (6892) (7042 5730) (5562) (8030) (4598) (8218 6742 6476) (7364 8564 8114 8368 6142 5460) (7970 8350 8388 4900) (7580 7422 7188 8156) (6744 6562) (8600 7692 7252 7924 7896) (8044) (8426) (7496) (6258) (5498) (8552) (7262) (7252) (8502 8444) (6986) (6566) (8166 8456) (7880) (7706) (5074 6616) (6986 4090) (8220 8044) (7714 7452 7314) (8162) (5140) (6584 5336) (7676 7322) (8444) (8576 8456 8270 6044 8196) (7494 5586) (8502) (7170 8100) (7682) (7886 5152) (8254 8396 7362 5430) (6992) (8462 8286) (5604) (8174) (7840 8484) (8538 7418 6980) (6566 5420) (8458 8180 8062) (7688 6080) (7894) (7502) (8504 8290) (8048) (4160) (8590 5556) (7312) (7844) (5430) (7700 8150) (8288 6050) (6774) (8060 5610 7482) (7132 8510 7266 6426) (7550 7642 7302) (8554 6662) (8350) (8560 6848) (6522) (7018) (7216) (7742 8392) (4120) (8228) (5548) (8584 8160) (8482 8330 7184) (6534) (6928) (8060) (8478 7418 4896) (6660) (7238) (8268) (5596) (8594 6438) (6986) (8214) (7506) (7660 8408) (6826) (7296 5572) (8518) (6966) (6434) (7332) (7494 6000) (7216) (8218 5018) (8592 6530 6770 6166) (8154) (8524 7508 6096) (7308) (5106) (8470 4104) (8036 7202 7464 5144) (7644) (7906 7244) (6206) (5320) (6508) (7976) (7732 5974 5628) (8502) (4056 6220) (4476 8200) (7684) (8012 6940) (8446) (7978 7182) (8546 8318 7878 7504 7420 7270 6630) (8414) (8590 8356) (8520) (6526) (8216 7278 6742 5578) (5020 6538) (7700 6512 6204) (7180) (8048 7412) (6270) (6898 6674) (8524 8244) (7500) (7140 6930) (4290) (8576 8138 6560) (8346) (8362 6164 4762) (6722) (5684) (8564 7542) (7140) (4208) (6068) (8562) (4924) (8446) (8576) (4366) (8112 6476 5204) (6944 5546) (7598 4728) (8326 8080 7340) (7476) (7054 8442 6462) (8532 7878 8338 6326) (8194) (7660 5162) (8062) (8338 8218) (6568) (8106) (7704) (8382) (7138) (8454 6280) (5722) (8592) (7004) (8076) (8334) (5426) (8446) (7622 7134) (6570) (8520 8044) (8334) (7434 7264 4318) (7104) (8518) (5674) (7412) (6456) (8340 5036) (6432) (8518 4770) (7140 8228 6218 5512) (8148) (4242) (5808 8444 6574) (8562) (8340 5700) (8102 6302 4856) (6880) (6262) (8388) (6086) (8492 8164) (8506 7024 6970) (4540) (7628 6780 5330) (8508) (6112) (7378) (8314) (8124) (7260) (7604 5966) (7110 6790) (7296 8242) (7830 8060 8320 6392 5454) (6712) (5404) (7158) (8512) (6942 6450 8194) (8386) (4872) (7150) (8318) (6738 7566) (5570 8256) (8198) (5584 6994) (8584) (8406 5508) (8318) (7884) (8506) (7972) (6396) (6026) (8588 7596) (7042) (8362) (7300 6416 7164) (5476) (8070 8364 8510) (7512) (8408 7082) (6012 8212) (7910) (7644 7206) (4994 8554) (8054 8370) (5706) (8484) (8004 7200) (6432) (8404 8284) (7922) (6778 7642) (8388 8180) (6006) (7828 6660) (8498) (6404) (6946) (4028) (8388) (5970 8512) (8580) (7664 6740 7812) (7334) (6410) (4126) (6954) (7806 7516 8186) (6710 8486) (7168) (7536) (5494) (8318) (6406 5950) (8376 8560) (6990) (7120 7948 7824) (8064) (4936) (6010 8572 8232) (5602 4030) (8478) (8176 6668) (7592 7278) (7790) (8046) (6376 8482) (7218) (7608) (4130) (8428 7006 5952) (7244 6648) (8246) (6910) (8280 7810) (5530 7308) (6612 7082) (4998) (7736 8452) (8222) (4036 7478) (8468) (8130 5878 5540) (7912) (6686) (7500 7282 6592 8200) (7748 7180 8490) (5212) (6892 8192) (7948) (5484) (8314 4954) (5898 8268) (6542 8594) (6776) (7374 7760) (8070 8096 7436) (7708) (5762 8396 8204 7206) (7838) (8182) (8398) (5934) (6560 4944) (8120 6788 7414) (5598) (7910 7156) (8592 7830) (5550 7406) (8246 8434) (5306 6790) (7886 8546) (6546) (7004) (7414 8560) (8166) (7652 8326 6826) (4878 8542 7932) (8326 8050) (6958) (7720) (6236 4926 8122) (6514 7854) (7046) (7120) (7646 8156) (8052 7798) (4060 8226) (6926) (7692 8334 8576) (5856 8112) (6458 6242 5390) (8372) (8508 6842) (5668 7960 7902) (6522) (8126) (6262 4930) (8166 7124) (8002 8504) (6558) (7498) (5886 7864) (7120) (7698 5412 6732) (8334) (6772) (8186) (6308) (8534) (5148 8206 7904) (7572 7122) (6516 6884) (8534) (6226) (7666 7820) (7030 6670) (7080) (4928 7916) (7840) (8126 8084 5840) (8558) (7088) (6212) (7658) (8456) (8110) (7544 7870) (7988 8372) (5374 7078) (6500 5130 8558 6904 8166) (6242) (7498) (7724) (8118 7906) (7854) (6026 8282) (7584 4926) (8290) (8392 8052) (6526 8502 8454) (8076) (6708) (8248) (7468) (6230) (5474) (7554 7814 7018) (8306 8142 7896) (7554 8046) (6414 8540 8222 7836) (8358 7774) (6844) (5852) (6518 4940 8244 7118) (7934) (8358 8208) (5190) (7388 8372) (8130 6976) (8324 8194) (6374 5886 5466) (8590) (8248 7470) (7108) (7924) (6380) (4978) (5542 8514) (8132 7442 7284 6726) (7178) (6260) (8322 6812) (7548) (6678) (7914) (7928 7030) (8494 8206) (6536 7798) (8392 6260) (8194) (8124 5432) (7654) (7002) (4918) (5924) (8564 7468) (6228 8448) (7314) (8204) (7850) (6690) (8368 7564 8558) (6900) (5398) (7930 7796) (6290) (8350) (8536 7984) (8196) (8538) (7866) (8128) (7932) (7724 6668) (7802 7010) (4944 7942) (7074) (7390) (8204) (5894) (7176) (6712) (8206 6654 5448) (7928) (7588 6386) (7782) (8044) (8392) (8496 7470) (8122) (8594) (5958) (7728 8550 7006) (5208 8042) (6234) (8592 8384 7488) (6542) (7778) (7124) (7902) (8384) (7414 8338) (7498) (6268) (8090) (6792 6712) (8006) (8530) (8004) (6492 8220) (7648) (5874) (6758 4928) (7050) (8378) (6226 8468 8114) (7870) (6886 6578) (7918) (8116 7494 7398 6736) (7012 4076) (8198) (8372 7160 6554) (5968) (7792) (8584 6540) (6208) (8140 5200) (6870) (8276 7734 7482 6756) (8048) (8560 7146) (8126) (5878) (8286) (6532) (8236) (6876) (7920 7814 6568) (6202 4992) (7122) (8332) (8216 8038 6804) (7796) (6634) (7436 5878) (7912) (8178) (5036) (5480) (7778) (8370) (7980) (6526 8556 6888) (8540) (6002) (8332) (7482 7158) (7862) (5892 5530) (8216 8126 7936 5248) (6238) (7042) (8066) (8538) (4880) (7940) (5494) (7914) (8476) (8132 8056) (5898) (7518) (7090) (8358) (8538 7900 4924) (8120 7552) (7690 6688 6252) (8594 7900 7166 5638) (8386) (7818) (6852) (6706) (8444 7578) (8540 7720 6530) (8130) (6218) (5870) (7974 7486 7348) (7662) (7062) (7264) (5482) (8308 8130) (6662) (7410 6270) (7314 4986) (8538) (8402 8158 7906 5144) (6154) (6328) (7818) (8538) (8342) (6006) (8130 7200) (5760) (8466 7852 6622) (8158) (6502 5274) (7408 6176 5438) (7198 8478 7654) (7390 7300) (8000) (8276) (7878) (7572 7296) (8434) (7740 6346) (8216) (8492 5454) (8580 6218) (7714) (8130) (8406) (7052) (7994) (8116) (6218) (8252 6374) (8370 4660) (5128) (8552 8240) (7412) (6542) (5012) (8430 7100) (8324 6196) (7392) (8134) (7678) (8556 8176) (7054 6318) (8530 5140 4200) (8332 7650) (8104) (8472) (8418) (7372) (7058 4992) (8600) (8496 6322) (4234) (6226) (8208 5340) (7390) (5986) (8538 8144 8006) (8364 6372) (8232) (8476 6288) (8574 7388 7076 4860) (6154) (8192 5494) (7926) (8350) (8072) (4850) (7350) (6994) (5464) (8240 7574) (7336) (8158) (8032) (8412 6280 4714) (8516 7306) (8386) (7562) (7946) (4850) (8218 7626) (8428 7276) (8066) (5508) (6166) (8274) (8542 7996 7774 7384) (8422 7100) (8476 6584) (5556) (7740) (8058 7828) (8542) (8436) (8076) (4844) (7200) (8206 5200) (4386) (8548) (6264) (8034) (5728) (7204) (6478) (8206 6756 4838) (8376 7836 7724 7104) (8002 7980 5844) (8566) (7288) (8494 5780 5670) (7480 8428) (8068 6514) (7576) (8474 8414) (8246) (8526) (4992) (8266 8154 8038 7664 7036) (7492) (6136) (7948 7838 6294) (7632) (8174 7674) (6268 5222) (7552) (8416 8178 7792) (4276) (7398) (5006) (6574) (7704 5942) (8168 7596) (5300) (7166) (8474 5126 4790) (8304) (6314) (8584 7378 7268) (8010) (4406) (8472) (8128) (8354) (7980) (7560) (8222 5178) (8460) (8574 7968) (7352) (8212) (8428 7826 4874) (7226) (8158 6276 5742) (7652) (8322 8006) (5494) (7382) (8322 7938 7796) (7566 7196) (5768) (4926 8482 8174 7406) (6498) (7590 6252) (8540 8170 7980) (8468) (7736) (7296) (8552) (8240 6316 4944) (8122) (8298 7968 5728) (7708) (7312) (8478 8434 8320 8126 7964) (8140) (7834) (4818) (7560) (8254) (4116) (5292) (8382 7400) (8206) (6606) (5856) (8448) (8234 7682) (8104 7138) (7556 5168 4414) (8304) (8218 7316) (8554 8268 7046) (7988 7802) (8462) (8486 6324) (7568) (7542 5454) (6178) (7392) (8560) (8046) (5084 4154) (8136) (7846) (6998) (8554 8078 7602 6468) (8108 8578) (6150 5440 8578 8486) (7376 4450) (8236) (8018) (7626) (8208 7720) (7372) (8516) (7768 6416 4352 5216) (8368) (8050 5904) (8374 8268 4614) (7994) (7884 6028) (8508) (8078 7662) (7774 7328) (8270) (6812) (5340 7156) (8232) (8508 7924) (6734) (7874 5708) (7542 8514) (8260 7592 6390 8336) (8406) (7748 7188 7510) (7904) (4702) (8076) (8512) (5590) (8354) (8240) (6832) (6392) (7892) (8438 8200 8072) (6736 5976) (8582) (7828 6436) (8322) (8160) (8216) (7890 7540 5652) (8500 7152) (8028 7926 8212) (6692) (6366) (7822 6044) (7068 7044) (8562 8512 7678) (8046) (8106 7732 4064) (7876) (7754) (5810) (7630) (7076) (6384) (4210) (7808) (7464) (8162) (7562 7332) (8270 8188) (7134) (8058 6682) (7688) (8518) (7694) (8262) (7964) (8308) (7902 7490) (7198) (6398 4384) (8478) (8278) (7666) (7794) (8146 7872) (8580 5804) (7342) (8546 7518 6692) (6384) (7736) (7148) (8290) (7652) (8088) (8528) (8582) (5852) (8196) (5866) (7800) (4390) (8136) (8490 8282) (8544) (5606) (8590) (8012) (7860) (4414 8522 8038 6384) (7562) (8318 8016 8530) (8198 7856) (8140) (8466) (7434 7590) (7270) (8208) (5632) (6694) (5978) (7542) (7922) (5816) (8372) (8144) (8534) (7442 7264 4194 7862) (8148) (7682 7716 5878) (4448) (8500 6650) (8504) (6398 5636) (7828) (8452) (4186) (7312) (8372) (8252) (8464 8118 5608) (8372 6086) (7836 8474) (7346 7970) (8358) (8118) (8512) (8584) (5678) (8566 8180 6632) (5658) (8062) (7538) (7434 8478) (5978 8178) (8030) (8486 8264 7824 7006) (8322) (7322) (7984) (7470 6700) (4576) (8490) (8322) (5822) (8026 7544) (8150) (7760 6246 7828) (7422 8584) (8130) (7788 7628) (6352) (8590 8230) (7398) (5758) (7252 7832) (5198) (6396 8110 7436 4078) (7034) (8364) (7704) (8396 7466 5578) (7862) (7798 8428) (7652 7032) (8266 7480 5942) (6688) (8090) (8498) (7418) (7794 8120) (8398 8238) (8550) (8102) (7560) (7146 8486) (8098 5878) (6300) (7796 7906) (7388 6658) (8366) (5736) (7030) (8434) (7410) (5848) (7946) (8348 7624 6314) (7264) (8066 8176 6696) (7790 7642 7624 8494 8212 5616) (6266) (6972) (7564) (7386) (4900 8440 7570) (6516) (7256) (8574) (7860) (4966) (8252 5922 4304) (8476 8140 8086) (7704) (6676) (7408 8432) (7226 8074 8560) (7034 7968) (7640 8262) (7410 8324) (4430) (8092) (8242 5572) (8572 8252) (8312) (4578) (7960 6678) (8460) (8090) (7430) (7418) (7780) (8152) (8378 6958) (7512) (7492) (7904 5818) (8012) (8486) (7214) (8578) (7876 5614) (6428 6722) (7272 8180) (7638 8384) (5006) (7974) (7418 8378) (8284 5902) (8192) (8474 8304) (7846) (8590 7018) (5994) (7988 6744 5576) (8252 7912) (7256 8438 8356) (7966) (8216 5954) (7794 4256) (7500 4380) (6532 8580 8224 7004) (8322 6246) (6692) (7252) (5938) (8410 8148 8016) (7402) (7642) (5612) (7192) (7514) (8390 6652) (8140) (8578 8164) (8460 8014) (7364 8324) (8568) (8424) (7280 7420) (7528) (7892) (5604) (8218) (4970 7718) (8400 7026) (7970 7502) (8248) (7942) (8496 7858) (8354) (8528) (6888) (8450 7702) (8520 8290 7104) (7448) (7416 6714) (7586 6980) (4956) (8536 5918) (8022) (7698) (8436 7534) (7218 5590) (8030 7018) (8514 8330) (8354) (8132 6266) (7416) (8198) (5836) (8586 7794) (8416 8208) (8350 7970) (8592) (8466 8426 7970) (8018) (7242) (8272) (7718) (8374 7366) (6696 8508) (4952 7570) (8440 7884) (8226 6950) (7608 5886) (8590 6246) (8406 8310 7790 7412) (7238) (8136 7022) (5622) (8550 8466) (8274) (6404) (7584) (4476) (7786) (7252) (8380 8046 7342 6984) (7444) (8590 6280) (7988 7906) (8460) (7042 5934) (8414 8192 7240 6408) (8574 5610) (7572) (8578 7724) (7404) (6982 7876 4592) (8212 8588) (5486 8324) (8474) (8222 7232 6166) (8584) (8112 7032) (5224) (7236 5720 7960) (8396 7488) (6968) (7912 6308 8564 7754) (8452) (8342) (6226 6548) (6818) (8212) (8392) (7122) (7420 5216 8466) (8146 7516) (4676 6318 6856) (8460) (7084 8276) (8148) (8454) (5726 7208) (8000 8294) (7818) (6430) (6792) (7498) (6928 8326 7110) (7416 8464) (6878 8342) (7974) (6206) (7414) (7686) (6354) (4796 8508) (7520) (5866) (7238 8474) (6808) (4804) (7978) (6566 5746 8336) (7056 7182) (8422) (6836 7686) (7332) (6154 7546) (8162) (5194 7980) (6384 8390) (7526) (6570 6796) (7278 8538) (7162 7528) (6552 5866) (7062) (8568) (7272 8388) (5996) (8048) (6060 7526 8546) (7006 7742 8302) (7160 8584) (8448) (8588) (5986 6792 8174 8078 8558) (7334) (7042) (7022) (8444) (6870 8254) (6474) (8440) (7306 7166) (7974) (7538 5784) (8096 7824) (5182 8316) (6358) (6888 8500) (8152) (7160 6402) (7268) (8270) (7326 6828 8388) (6570) (7068) (7674) (8506) (5706) (8518) (7520) (6828) (7076 8176) (7196) (7436) (6596 5774) (6942 7280) (7978) (5918) (8314 8132 8358) (7306) (6540) (8178 7158) (5164) (5986 8098) (6786) (7284) (6404 8002 7830) (8474 7500) (7284 8122) (8308 8578) (7764 8342) (6976 8048) (8308 8440) (7406 6258 8174) (7704) (8550) (7104) (8046 6532) (8268) (6490) (8066) (7954) (7238 6828) (8142 8600) (7456 8486) (7202) (7450 7738) (6820 8432) (5746) (7794) (8330 7704) (7516) (7060) (8424) (5150 8194) (8554) (5782) (7718) (7980) (6382) (5810) (7660 8426) (8218) (7340) (6862 8158) (6816 5748) (7514) (7208 8488) (6816 8498 8410 7776) (8166) (7050 8346) (7660 7252) (5150) (7972) (6970 7366 8408 8466) (7828) (7556) (7114 8350) (8224 7560 5206 5798) (7346) (8510 7770) (7110 7530) (7756) (7436 5166 6760) (8586) (7650 7692) (6904 7330 8444) (7818) (7450) (7120) (8196) (8096 7326) (8538 7742) (7058) (6790) (6386) (6898 8442) (8264) (8086) (7072 8542) (7744 8182) (5742) (7338) (8330) (6936 6348 8118) (7726) (8438) (5844 7840) (7300) (6700) (8332) (5578) (8530) (8112) (6792) (7274 7964) (7544 6018) (5108) (7700) (7676 8344) (4814) (5158 7568 7800) (8118) (5416) (8260) (7766) (6322 8462) (7240) (8198) (6948 8468 7678) (8134) (5600 7850 8506) (6752) (4964 8218) (7046) (8496) (7866 7684) (8300) (7794) (8110) (6920 6762) (8562) (6168 7586) (6358 8246) (8456 8286) (7048) (6614 8534 8140) (5828) (7708 8544) (5330) (6932 8368) (6648 8018) (8282) (5624) (6326 8352 5264 6778) (8492) (5768 8512) (4762) (6958) (6604 8476 8036 7736) (6166) (8556) (7644 6820) (8108) (8508) (6874) (5460 6738 7916) (7402 5724) (7752 7988 6142) (7558 8560) (7730) (8372 8450 8134) (8550) (7036 6828) (5926) (7318) (8398 6730 7942) (8550) (8126) (7048) (8430) (6676) (7692 4872) (8436) (7956) (7094 7888) (4732 6140) (7346 7624) (7766 8504 8254 7314) (8312) (8548) (6610) (7020) (7032 5714) (7604 8430) (5276) (6112 4138) (5080 8094) (6718 8582 6870) (7330) (6614) (6950 8258 8222 8596) (7994) (8444) (7598) (8048) (4644) (8528) (5096) (7974 8142) (7044) (5730 8416 8396) (7996) (7680) (8552) (6704) (7616) (6998 8474) (6724 5456 8498) (4638 8592) (8002 8278) (7652) (8150) (5294) (4630 8236) (7340) (8558 6896) (8164) (8430) (8166) (8542 8506) (4562 7002 8348) (6588 8152) (6852) (8034) (7772) (6138) (7772 8518) (8318) (5624 4014) (8468) (8298) (4600) (8530) (8072) (7048) (4884 8140) (7462 5346 8164) (7282) (6652) (4434 8350 8534) (6138 7942) (8104) (6922 8280) (8480) (5162) (7958) (5626) (8108) (7054) (5286) (7792) (6158) (4204) (8128) (5544) (6652) (8446 7022) (7444) (8302) (7812) (5674) (8202 8046) (6188) (7142) (4948) (6926 6826) (7480) (8516 8332) (7266 6754) (4904 8192) (8468 8156) (7430 8560) (6200) (7328 8342 8106 8048 6834) (5838) (5214 4012) (7148 7848) (8556) (8224) (8384) (5846) (4282 8212 6994) (5166) (8466) (7502 4398 8022) (6738 8124) (8526) (7424 8188) (7872) (5392) (8468) (8006) (6400 7090) (8408) (8322 7148 8600) (6732) (8000) (5178) (8250) (5878 6964) (6594 8238) (4668) (8462) (6734 7146) (8154) (8008) (7882 5434) (4430) (5698 8588) (6950 7508) (4078 6214 5516 8098) (7016) (8536) (7928) (5014) (5728 4560) (7160 6324) (7686) (7386 5518 7882) (8514 6874) (5862) (7456) (8054) (6720 6216) (4476) (8096) (8000) (7918) (5410 5596) (7788 6890 7732) (6472 8566) (8476) (8430) (5912 8304 8262) (6294) (7430) (7864 4772 7000) (4996 8116) (8416 8282) (7712 6732) (7982 8260 8108) (6348 8522 8080) (4556) (5656 7416 5960) (8546) (7922 8442 5222 7710) (6536 8414 6808) (4632 7028 8154) (7930 7488 7400) (8494) (7664) (8220) (7850) (6486 5922) (7696 7560) (4300 8256 8116) (6728 5504) (7542) (8304) (8590) (8514) (6494 8040) (7934 8420) (6274 8496 8312 8244) (7562 8536 8094 7876 6772) (7706) (7554 4172) (8462) (6514 7636) (6148) (8016 6766) (7514) (8594) (6426 6114 4684) (6860) (7554 8220 8066) (7876 8540) (5480) (5662) (6212) (4030) (8168) (4512) (8320) (7524) (5936) (7980) (7702 4686) (7890 7000) (4248) (6584) (7560 5288 4546 8240) (7310 8502) (5966 5132) (6288 7982) (8582 8276 4788) (6716) (8498) (7694) (6610 8378 8158) (7702 5766) (7996 4312 5414) (8218) (8572) (6600 7220) (8314 7852) (6428 7428) (8024) (8464 8420) (7630) (8062) (8582) (5478) (7890) (8244 7588 4874 8130) (6438 5546) (7404) (7614 4318 6762) (8496) (7500 5052) (8080 8168) (8596 8546 8302 7848) (6776) (5290) (7626 8030 6738) (5492 8536) (8404) (6648 7780) (7936 6846) (8288 5784 5378) (7684) (8476) (6462 8230 6962) (7890 7720) (8580) (8342 8022 8548 8092) (7492 6130) (5262 4560) (6740) (8290 7410 5528) (8142) (7346) (6582) (6140) (8198) (8516 4304 8564) (8038) (8422 5672) (5960) (7592) (6728) (7900) (7576) (7240 8436 8562 7022) (6262 5758) (4722) (8036) (8184) (7286 5724 5112 6728) (8594) (8402) (4624) (8398) (7730) (6654 8098) (7238 8192 6250 4092) (8472 8236) (8580 7564) (5546) (7098) (8286 6716) (5904) (8106 8054) (8220) (7400 6176) (8466) (5016) (8056 5790) (7542 4142) (8516) (6744) (6254) (5366) (7022) (8266) (7414) (6330) (4856) (8464 5934) (7544) (8162 7494) (6948 5428) (8514) (8058) (6182) (8456) (7722 4970) (7538) (6798 8208) (7174) (8446 6344 4924) (6418 8028 7360) (8118 5768 4148) (6708) (8486) (5940) (5048) (8062 7402 6828 8108) (6956) (8462 8216) (7568 5808) (6578) (8482) (7174 6278) (8250) (5316) (8518 7730 4958) (8284) (4258) (8454) (6394 6750 5560) (7930) (8046) (7406 6986) (7234) (6730) (8430) (4892) (7816) (4726) (7458) (7026) (8402 6732) (8454 6578) (6518 8448) (8036) (7916) (6538 7900 6864) (7430 8284) (5326 4452) (6420) (5876) (7502 7324 5758) (7054 7386) (8152) (7034) (8464 4046) (8162) (8580) (4258) (8152 7562 8266) (7156 6574) (8082 5108) (5670) (7378 5850) (8424 6934) (8174 5544) (8478) (5370) (8048) (8424) (7508) (7144 6988) (5156) (8484 6652) (6288) (8272 7382) (4644) (5552) (6398) (8044 6560) (8226 4620) (8432) (6670) (7538 7166) (8458) (8114) (7212 6438) (6714 4230) (8414 8272 7720) (7430) (7156) (4820) (8190 8088) (8226 7730) (4392) (5942 6930 5278) (8068) (7410) (6294) (8046 8512 6734) (8512) (8200 7176 6306) (8402 8270 7408) (8516 6956) (8046 7552 5870) (4674) (7400) (8234 5690) (7724) (8176) (8106 6294) (7154 8574) (5132) (7378) (8276) (8136) (8460 8042) (6288) (4992) (8512) (8462 5928) (7188 6296 4268) (8222) (7452) (8574) (8234 5916) (8402 7056) (7374 4174) (8038 8078) (8454) (7534 5068) (6774) (8250) (8580) (8474 7394) (7092) (7732 8426 8130) (8200) (5296) (6434) (4454) (7570 8174) (7054) (5928) (8052) (8240 5052) (6940) (8218) (5664 4710) (7720) (5834) (8460) (7142 8110) (5942) (8414 8064 7898 7396 5480) (4590) (8200) (8484 8118) (7552) (8372) (7722) (7106) (4740) (8072) (5830) (7516 6898 6310 4430) (5368) (8232) (5002) (5648) (7040) (8416 7546 7470) (8060) (4766) (6470 5944) (8120) (8466) (8410 5752) (6412) (8132 7492) (7164) (5030) (8510) (6298) (7176) (8174 5680) (8536) (7094) (8508) (5810) (6902) (8290 8160) (8524 5434) (7460) (8036) (7042 6296) (8104 6934) (8512) (8266 6866) (7444) (5172) (8062) (8472 7158) (4436) (8168 7404 5952) (6306) (8112) (8100) (8278 5542) (8448 6914) (8186 6280) (5166) (8132) (7514 5852) (8470) (6972) (8230) (5516) (8474 7528) (7708 6480 4002) (7738 6956 4762) (8506 7038) (8142 6218 5290) (8456) (7062 6774) (7024) (7722 6266) (5006) (7932 5760) (8472) (7490) (8192) (6490 5378) (8410 6272) (7046) (8192) (8328 6398) (8494 7564 5362) (4022) (7154) (5944) (8136) (7898) (8276 5550) (4918) (6518) (8498) (8266 5248) (7508) (8578) (8026 5776) (4556) (8156) (8412 7026) (6072) (7468 6762) (5316) (8194) (8468) (4082) (8218 8054) (6940) (7166) (5308) (6264) (5790) (8218 5898) (7894) (8580) (7722 6844) (7556 6862) (8186 5538 4270) (7954 7902) (7176) (6756 5126) (8512 8136 4884) (8036) (7126) (5916 5704) (7160 6484) (5408) (8178 7728) (8470 8330 7380 6884 5284 4572) (7034) (8206 8114) (7174 4368) (7438 6278) (4208) (7530) (7866 5326) (7152) (6852) (8210) (8100 5412) (8042 7728 5164) (6270 5900) (6966) (8116 7144) (8494 6492) (8410) (6824) (8184 7728) (8022) (6492 5834) (4690) (7554) (7906) (7926 6304) (4908) (8328 6314) (7152) (8220 5228) (8472 6716) (6960) (8102) (7428 6504 4314) (5136) (7718 7094) (5918 4670) (8044 6330) (7898 6852) (8376 8240) (8590) (6498) (7102) (5804) (7496 6806 6238) (7190) (8214 7712) (8040) (8548 7720 7422) (8468 8286 8118) (5848) (7898) (8510 6992) (7482 4434) (6264) (5846) (8020) (4472) (7366 6914 5530 5476) (8582 8244 6602) (6258) (7178) (8118 7516) (7028 5746) (8414) (4746) (6536) (5142) (8040 6800) (7500) (8100) (8170 5928 4064) (7480) (4868) (7400 5208) (7014) (6816 4068) (8592 7206) (6298) (7404) (4824) (5518) (8576 8512 5834) (8114) (7562) (8086) (7156) (8462) (6746) (8406 8128 5918) (8278 5466) (7900) (8036 4976) (6444) (6972) (7474 6938 6722 5304) (8582 8272 6250) (8194) (7722 7190) (8186 5676) (5088) (6866) (8040) (6316) (8510 6718) (6978) (8270) (5884) (5200) (7720 7104) (8576 7528 7012) (6424 6172) (6638 5144) (6914) (7368 4812) (7454) (6440) (8470) (8352) (7408) (6362 5526) (8048 7000 5024) (8194) (8418) (6188) (6726 5668) (8330) (8280) (7540 6156) (7396 6662 4516) (8596) (7896) (5978) (4990) (7148 5800) (4724) (7708) (8040 5306) (6512) (7062) (6620) (8506) (4518) (7724 6822) (4014) (8468 5356) (7000) (5228) (6372) (5746) (7910 7496 5544) (7716) (6462) (8034 5910) (5774) (4886) (7228 6358) (8260) (6718 5936 5206) (8416 7722 6550) (6450) (8346 6986 6872) (7168) (8288) (8524 7354 4444) (8396 6940) (5950 5546) (6598 4628) (6842) (8466 6738) (8034) (8490 7902 7056 6170) (6592 6004) (4532) (8448 7514 7254) (8556) (6774) (8206 5124) (8034 6364 5958 4830) (6066) (6974 6644) (8412 4192) (5202) (6212) (7500 6452) (8594 4650) (6812) (5338) (6672) (5472) (8432 7280 4008) (5880) (6940 5442) (7162) (8440 6286) (5726) (6058) (6920 6636) (8532) (8476 8232) (4440) (6880 6188) (6748 5124) (8550) (7066 6326) (8480) (6978) (7280 6682) (6768 4888) (6624) (7386) (5372) (8278) (5738) (7876 7546) (5266) (7382) (5614) (7102 4764) (6960 6796 6286) (8462 6908) (8518) (4242) (6950 4400) (4858) (5832) (6842) (7058) (5376) (6664 6950) (6292 6026) (8580) (6726 5112) (4046) (7438 6470) (8510) (7178) (5330) (6050) (6766 6120 4952) (7560) (6886) (5504) (6306 6038) (7376) (6668) (8512 8432) (7020) (7282) (8332 4644) (7534 6930 6602) (5824) (7128) (8582) (7322 5362) (6928 5762) (6352) (5054) (5676 7114 6876 6530 7320 8376) (7722 8172 8432 8248 7790) (7970) (8310 6934 5924 8492 7632) (8204 8102) (4296) (6690) (7402) (6950) (7130) (8290) (7002) (8266 8370 8196 7636) (7794 6816) (7276) (7320) (8424) (6868) (6716) (7636) (7224 8494) (8242 7900) (8592) (6956) (6792) (7826 5318 4646) (8248) (6692) (7444) (6308) (8050) (8472) (7606) (8586) (7068 5920 6956) (7754 8600) (7570) (8100) (8298) (8202) (7632 8592) (7214) (6968 5910) (6702 7460 7814) (8418) (7412) (8118) (5910) (7588) (8442) (7796) (7982) (7418) (8130) (7550) (4492) (7012) (5240) (8224) (7812) (6824 8424) (7276) (8264) (8594) (4746 6520 7932) (7876) (8438) (5344) (7370 8488) (6214) (8334) (7614) (7458) (7870) (7740) (8218) (8104) (8272) (7610) (7672) (8318) (7500) (6208 4858 8102) (8188) (7542) (6148 8368) (7886) (7940 8486) (4834 8002 7640) (8558) (7684 8236 8430) (6814) (4726) (7224) (7718) (8040) (7810) (7496 8378) (4366) (7902) (8454) (7426 8336 7658 6692 7342) (8034) (8394 7828) (7270 7760) (6840 8040 8496) (8404) (7196) (7568 8036) (8334) (7986) (7322) (7818 8242) (7174 8230) (7988) (7668 6732) (7970) (8102) (4450) (8368 7868) (8148) (7644 7990) (8164 6808 8428) (7398) (5374) (7746) (6788) (7994) (7592) (7168) (8172 7354) (4514) (7884 8112) (7146) (7708 8504) (7344 8524) (6192) (6830) (7964) (8586) (8462) (8182) (7208) (6774 8368) (8254 6686 8476) (8116) (6204 7916) (7208) (7666 8580) (7624) (4328) (7552) (7346 7876) (8274 7772 7650) (4024) (7960 8104) (8546) (8204) (7352) (7214 7758) (5588 8486) (4306) (6072 7870) (6874) (8318) (7888 8386) (4710 7668) (7582) (8308 7244) (7904) (7950 6618) (8456) (8250) (7228) (8588) (8486) (8220 8442) (5674 6820) (6204) (7390) (7196 8376 8068) (7608 8116) (8408) (6354 7368) (6018) (8358) (7980 7754) (6812) (8400 8048) (7894) (8358 7376) (7960 7190 8408) (5532) (8178) (5878) (7756) (7394) (4690) (7886) (6380) (7352 7076) (8446) (7166) (5708 7884) (4380) (7474) (8190 8370) (8460 8258) (7894) (6788) (8240) (5706) (6496 8148) (5018 7342) (8016) (8346 7748 7480) (7908) (8164) (6416 6182) (7340 8492) (8380) (8150) (7980) (7458 7530) (8412) (8064) (4508) (7950) (6510) (4670 8254) (7634) (8378 7508 8492) (8054) (7826) (7986) (8382) (6590) (8498) (8254) (7634) (8010) (6514) (5624 8530) (7308) (6522) (7946) (8254) (7470 8538) (7998) (7902) (8492) (5188) (8422) (8048 6812 6566) (7932) (7994) (8466) (7906 8432) (6336) (4678) (7964) (8428) (8228) (8346) (6528) (7850) (8338) (6334 8484) (7642) (5184) (8436) (6554) (4990) (6278) (7638) (8240) (8442) (6528 8006) (7346) (8464) (8454) (6520) (8534) (7476) (7348 8254) (7860) (5990) (8240) (6314) (8282) (7658 6580) (7410 7458) (7346) (8156) (7962) (7440 7896) (8418) (6418) (6556 8162) (8358) (8250) (8174) (6416) (7876) (6516) (7468) (7374) (8286) (7236) (8020) (8286) (7408) (8418) (8004) (7946) (8454) (8374) (8038) (5270) (6974) (8310) (8042) (8408) (7464) (4658) (8512) (7402) (8518 8296) (6504) (7414) (8256) (6930) (8010 6532) (7330) (7466) (5350 8008) (6286) (4682) (8126) (8480) (7958) (5194 6342) (8046) (6500) (8480) (7960) (7460) (6298) (7996 6574) (7462) (5154 5688) (4682 8326) (8404) (7334) (6334) (7328) (6354) (8290) (8172) (8088) (6322 8312 7696 7468) (7514) (7324) (7896) (5394) (7824) (8028) (7942) (7608) (7452) (6350 7312) (4660) (8470 8324) (6360) (6518) (7596) (8384) (8110) (8300) (8344 7460) (7986) (6502) (7994) (7498) (6016) (5274) (6278 8492 8392) (7936) (8020 7470) (7632) (7406 8360) (6564) (5188 8508 7488) (8256 7284) (6348) (7344) (8418) (8092 7522) (7552) (7958 8326) (8416) (6366 8582) (7450 7312) (8066) (8102) (8340 7934) (7982) (6224 8398) (6532 8474 8056) (8340) (4642 7920 6838) (4296) (8380 7292) (6336 7450) (8252) (8596) (5834 6378 7948 8584) (7694 8432) (8388) (7368) (7422) (7582) (7932) (7786) (7298 6928) (8528 8204) (8422) (8016) (8208) (7210 7436) (6314) (8270) (7942 8578) (8466) (5606 7860 6822) (7946) (6032 8064) (8148 7354) (7528) (5084) (7912) (5950) (8020) (4098) (6518) (7304) (8308) (8224 7804 8480) (6238 7112 8210) (7964 7496) (4238 5238) (8426 7662) (7790 7454) (8184 8120) (6286 7998) (4640 7734 7466) (8310 8088) (7270) (8450) (6300 8372 6754) (8356) (7754) (6636) (7808) (8166) (7538 7276) (8424) (8012) (5152 4322) (8408) (6464) (8254) (6650) (6232 7558) (4666 7896) (8198) (8060 8012) (6514) (6724) (8102) (7566) (6278) (4568) (7614 7290) (7502) (7426) (8040 7580) (8414) (6466) (6190) (8240) (7346) (7284) (7694 8400) (8276) (4728 6472 6782) (7424) (7536 7126) (4724) (7950) (7682 7226) (7740) (6254) (8248) (4550 5214 7490 8442) (7642) (8348) (6266 8016 7916 6578 8348 7964) (4588 8092 7348) (7690) (7794) (5022 8086 8482 8168) (7908) (6550) (7820) (6914) (6016) (5320) (7422 8172) (6276 7656) (7330) (8390) (7986) (8224) (7490) (6832) (7164) (7998) (7922 7700) (6284 7402) (7512) (8126) (7798) (7758) (7466) (7176) (7930) (6560 6938) (7626) (6320) (7792 7270) (6446 6922) (7938) (7396) (7900 7680) (8220 7792) (8162) (7482 7248) (7640) (4458 8452) (7106) (6290 7978) (7406 8026) (6838) (6274) (4620 6910) (7256 8284) (7940) (7988 7008) (6230 6854) (5166 6536) (7256) (4930 7424 8194) (8090) (8444) (6902) (7400) (7288) (6912 8064) (7266) (7388 8272) (7120) (7398) (8460 8408 8310) (7592 6538) (7264) (7362) (6830) (4074 6710) (6084) (6972) (8144) (6166 8362) (7072 6742 8474 7964) (7398) (6290 7182) (8398) (7696) (6130) (7602) (8326) (7296) (6256 6532) (6964) (7634) (6160 7854) (6824) (7972) (7594 7212) (6086) (8166) (7486) (7310) (6304) (7928 7824 7190) (6704) (6420 6922) (5796) (4786 6278 6708 5686) (8236) (8440) (7898 7310) (4914 6922) (7638) (6300) (4606) (7164) (7852) (8278) (6218) (7500 7946) (7594 8418) (8098) (6708) (6554) (8410 7184) (7556) (7810) (7286) (7792 6758) (6534) (7876) (7176) (6288 7276) (7384) (8226) (6826) (5124) (7938 6214 8360) (6692) (4264 6850) (7504) (7136) (6290) (8130) (7338) (6390 8334) (8056) (8306) (6242) (7392) (7626 6570 7442) (8450) (8112 7886) (5020) (6468 7548) (8462) (8386) (7434 8036) (6686) (7382 7244 6438) (8220) (7032) (7736) (8452) (6224 8034 7460) (8354) (8144) (4238 6578) (6898 8408) (8486) (4634) (5072) (8266) (7504) (6906) (6376 7232) (7734) (6756) (7428) (6920) (6696 7864) (7596) (8014) (6338 7516) (8234 7444) (4922 7242) (6898 7734) (7264) (4250 8326) (7878 7394) (6216 5970 8422 7250 7158) (7646) (6696) (7120) (6346 8392) (4416) (6546 7514) (8204 7844) (6438) (6882) (5044 7958) (6084) (8130 6826) (8466 7978) (8234) (7596) (6982) (6232) (4242) (7304) (4718) (7882) (8458 8334) (4602 6656 6510 5466 6832) (7886) (7632 7000) (8038) (7602) (7304) (6674) (4608 6448 7892) (7542 7246) (4966 7026) (8354) (7366 7238) (5948) (8224 6904 6688) (8288 8088) (8382 8132 7988 7418 7086) (7954) (6898) (4644) (8344) (7176 6448) (7984) (7690 6750) (7374) (6686) (8312 8190) (7520) (8120 7866) (4532 6878 5942) (8424) (6892 6538) (8354) (7956) (8436) (7382) (8288 7876) (7284 6740) (7090) (8142) (7626) (8248) (8450) (8292 5966) (7660 6996) (7984 7734 7174 6352) (4456 8334) (7854 7620 6810) (8092) (8018) (8276 7344) (7156 7040) (8486 6462) (8222 7618) (7506) (8106) (7484) (6242) (8290 7396) (4686) (7086) (8156 7904) (8362 7576 7314 6732) (8034) (7648 6662) (4222 8306 7508) (8176) (6898) (7264) (8016) (8148 7854) (8446) (8290 7702 6744) (7954 7374 7158 6358) (4512) (8068) (8578 7458) (8514 7688 6292) (7936) (8394 8322 8178) (7654 6082) (6526) (8576 7440 6430) (7910 5640) (8396) (7048 5160) (8210) (8010 7722 6690) (7266) (4592) (8050) (6920 6488) (7492) (7438) (5604) (8268 8132) (6812) (6584) (7040) (8302 8124) (7382 6996) (8154 7968) (7288 6876) (4570) (7158) (7864 7294) (8062) (8268 6228) (6894) (7620 6612) (7020) (4620 7878) (8226) (6410) (7056) (7346 6712) (4190 7638 6986 6420) (8068 5970) (8092 7700) (8346 7596 7272 6790) (6458) (5790) (8224 7078 6604) (4572) (8076) (5228) (8210 7916) (6878) (6276) (6726) (4606) (8050) (5236) (8140) (8298 8276 8022 7212) (7046) (7264) (6984) (8410) (7488) (6894 6678) (5820) (8408) (7506) (8042) (7868 6984) (7382) (8122 7314 6462) (5258) (4212) (6018 5852) (6888) (7982) (6816) (8268 7180 5188) (6062) (4610 7302) (7150) (7266) (6728 5824 5190) (7860 7650) (8168 8034 7076) (8406) (6772) (7356 6610) (4838 7548) (8292) (5698) (5066) (7932 7718 7160) (8356 6880) (8590) (8012) (7286) (6320) (8520 7714 6992 6228) (6826 5800) (8586) (7062) (6618) (6296) (6874) (7406) (4600) (5242) (7978) (5792) (8090) (7444 6758) (8400) (7712) (6128) (8272 8016) (7464 5638) (7062) (6610) (7242) (6732) (8220 5284) (8062) (7432) (6974) (8530 4596) (6350) (6274) (6806 4356) (7942 7112) (8578 5686) (7642) (8450) (5174) (4906) (6068) (8026 7192 6278) (8512 8114 7706 7562) (8214 8162 7484 7404) (6956 5598) (4604) (5238) (6584) (8314 7860 4582) (5378) (7088 5816 4192) (8070) (7310 6990) (7590) (6786) (6418) (7114 5318) (8454 7940 7662) (6182) (6662) (6078) (7388) (7296 6414) (8000) (8466 7860 7502 5704) (4556) (5086) (7190 6928) (8550 8352 5936) (8296 7712 4910) (8552 7852 7308 6612) (7194) (4240) (6512) (5496) (7002) (6726) (7154) (8438) (7974 7598) (7158) (6468 4590) (6578 5692) (7544) (6950) (7860 5164) (6172) (8000 7468 7342) (6270) (7480) (8532 5152 4528) (8030 7186 5862) (6898) (7318) (5304 4582) (5870) (7282) (7076) (6886 6514) (8598) (6256) (8490 7986 7318 6774 5702) (6344) (6764 6162) (7712 7680 6998) (7966) (7860 6618) (8556 7176) (5154) (5682) (7388) (7320) (8510) (6164) (7226 4858) (6378) (5250) (6794) (6486) (5828) (7554) (8532 8336) (8352) (6350 4670) (6644 5402) (7412) (6964) (5938) (8574 7460 7236 6908 4028) (5560) (6218) (4524) (7088) (8562) (8494 7214 7142 7120) (7976 7668) (8420 7870 6900) (6048 4894) (5354) (6710) (7324) (8370 6320) (7824 7032 6692 4620) (6574) (5594) (6452 4404) (6852) (8402) (5964) (6252 5548) (4992 4138) (7204) (7030 5718) (6776) (6368) (8356) (7490) (7430 7092) (6926 6484 6274) (5220) (8542 4904) (6878) (8494) (7246) (8594 7972 6124) (5758) (6992) (7340 6130) (8280 6448) (7820) (8434 7486) (8574 7984 6456) (7590) (6906) (5936) (6344) (4506) (5502) (7268 6642) (7038) (8362 5848) (6526) (7110 6250) (4552) (6890) (7146 6546) (8232) (5484) (8576 8512 7552) (7052 6476) (6736) (5258) (4346) (6848) (8446) (8278 7392 5588) (7982) (6762) (6494) (7322 7102 6840 6282 5816) (8362 6128) (7046) (4704) (5302) (5094) (4202) (7200 5546) (7416) (8420 6962 6574) (8588) (8550 8534 8348 6958) (7302 6954 5800 5662) (6678) (5290) (6124) (7342 6794) (7236 7026) (6284) (5888) (4528) (8254) (7972 6864 6346 4900) (5762) (6916 6372 6238) (8362) (7568) (7272) (5690) (6480) (7322 6624 5924) (7498 6930 6706 4482) (8456) (6036) (4994) (6494) (6380) (7018 4776) (5352) (8350 7264) (5768) (5932) (6372) (6600) (7076) (8284) (8578 8402) (8240 7534 6796) (6292) (6878) (4864) (6496 5168) (4698) (8488 6980) (7394 6242 5352) (7976) (6088) (7290) (8518 8464 6790 6598) (6244) (6322 5100) (5928) (8516) (7208 4370) (8374 6688) (5820) (4358) (7186) (6930) (5708) (8386 4986) (8564 6434) (5880 5398) (6642) (5214) (8328) (7316) (8272 6442) (8414 7114 6232 4188) (7974 6564) (5084) (5226) (4148) (6794 6642 6082 5754) (5934) (7242 7048) (6140 5940) (7288 6322) (6492) (5252) (8590 7118 6788) (6264 5906 4852) (8524 7984) (7322 6808) (5746) (7396 5704) (7008 4476) (8470 6722 5304) (5904) (6528) (4756) (6102) (8444 7396 6940) (8322) (6474 6252) (7204 5452) (8374 7416 6806 5472) (7076) (8542 5962) (5856) (8586 8436 6712) (4822) (6386 5626) (7242 6100) (6270 4220) (8528) (6372) (8446 6946 6680) (8516 8196 7576) (8300 6986 6594 4796) (7144 6328 5356) (6738) (5200) (4888) (6230) (4560) (6986) (6894 6724 6134 4776) (6254 4926) (7106) (5366 5202) (6016) (6550) (6604) (7306 5738) (5008) (6224) (6880) (5064) (6742 4582) (7376) (7164 6100) (7366) (6628) (6362) (5278) (4152) (6744 4910) (7396 7060) (7290 5468) (6460) (6212) (6982 5466) (6564 5908 4668) (6886) (7300) (6220) (5484) (5864) (7152) (7164 6394) (6990) (6720) (6270 4398) (7172) (4676) (6956) (5424) (5206) (6542 6096) (4336) (5906) (5378) (4544) (6742 5452) (7154) (6060) (5880) (6740) (6368) (6626) (7152) (6684 5152) (4504) (6254) (5514) (6732) (5956) (4208) (5768) (6272 5196) (5894) (6866) (6712) (6452) (5870) (6216) (6740) (6594) (5212) (4888) (5916) (6432) (6718) (6012) (6098) (5426) (6436) (4276) (5398) (6828 6626) (5904) (6286) (5588 5000 4422) (6404) (5744) (5182) (4260) (6098) (5840) (4740) (6372 5490 4616) (6102) (6406) (5210) (4942) (5648) (5038) (6108 5662) (6006) (6384 5168))) :lonset (quote (0 10 20 40 50 60 70 90 100 110 150 160 170 190 200 220 240 250 270 290 300 310 320 360 390 400 410 420 440 450 460 470 490 500 520 540 550 560 570 590 600 610 620 650 670 700 740 760 770 790 800 820 840 850 860 870 900 910 940 950 960 970 990 1000 1010 1040 1050 1060 1070 1090 1100 1110 1150 1170 1190 1200 1210 1240 1250 1260 1270 1290 1300 1320 1340 1350 1360 1390 1400 1420 1450 1460 1470 1500 1520 1550 1560 1570 1590 1600 1610 1620 1640 1650 1660 1670 1690 1700 1720 1740 1750 1770 1790 1800 1810 1840 1870 1910 1920 1940 1950 1960 1970 1990 2000 2010 2020 2060 2070 2090 2100 2110 2120 2140 2150 2160 2170 2190 2200 2210 2220 2240 2250 2260 2270 2290 2300 2320 2350 2370 2400 2410 2420 2440 2450 2460 2470 2490 2510 2540 2550 2560 2570 2600 2610 2620 2640 2650 2660 2690 2700 2710 2720 2740 2750 2770 2800 2810 2820 2840 2850 2860 2890 2900 2920 2940 2950 2960 2970 3000 3010 3020 3050 3060 3100 3120 3140 3150 3160 3190 3200 3220 3290 3300 3310 3340 3350 3400 3420 3440 3460 3470 3490 3500 3520 3540 3550 3590 3600 3610 3620 3640 3660 3670 3750 3760 3770 3790 3800 3810 3850 3890 3900 3910 3940 3950 3960 3990 4000 4020 4040 4050 4060 4070 4090 4140 4150 4190 4210 4220 4240 4250 4270 4300 4320 4340 4360 4370 4390 4400 4410 4420 4440 4470 4500 4520 4540 4560 4590 4600 4610 4640 4660 4670 4700 4710 4720 4750 4760 4770 4790 4800 4820 4840 4850 4860 4870 4900 4910 4920 4940 4960 4970 4990 5000 5010 5040 5050 5060 5070 5090 5100 5120 5150 5170 5190 5210 5220 5240 5250 5270 5290 5300 5310 5340 5350 5360 5370 5410 5420 5440 5450 5470 5490 5500 5510 5530 5550 5560 5580 5600 5610 5620 5630 5670 5700 5710 5730 5750 5780 5800 5810 5820 5830 5850 5870 5880 5910 5920 5930 5960 5970 6000 6010 6030 6050 6060 6080 6100 6110 6130 6160 6170 6180 6200 6220 6230 6270 6280 6300 6310 6320 6350 6370 6380 6400 6420 6450 6480 6500 6530 6550 6560 6570 6620 6650 6660 6670 6700 6720 6730 6750 6760 6770 6780 6800 6810 6820 6830 6860 6870 6880 6900 6910 6930 6950 6960 6970 7000 7010 7020 7050 7060 7070 7110 7120 7130 7170 7180 7200 7230 7250 7260 7270 7280 7300 7310 7350 7360 7380 7400 7430 7450 7460 7470 7500 7510 7520 7530 7560 7570 7580 7600 7620 7630 7650 7660 7670 7680 7710 7720 7730 7750 7760 7780 7800 7810 7830 7850 7870 7880 7910 7930 7950 7960 7970 7980 8000 8010 8030 8050 8060 8110 8120 8130 8160 8170 8180 8200 8210 8230 8250 8270 8280 8300 8310 8330 8360 8410 8430 8450 8460 8480 8520 8530 8560 8580 8610 8620 8650 8660 8670 8680 8710 8760 8770 8800 8820 8830 8850 8870 8880 8910 8950 8960 8970 9000 9010 9020 9030 9050 9060 9070 9100 9130 9150 9160 9170 9210 9220 9250 9270 9280 9310 9330 9350 9360 9420 9430 9450 9460 9470 9480 9510 9530 9550 9580 9620 9630 9650 9670 9700 9710 9720 9730 9760 9780 9800 9820 9830 9860 9880 9900 9930 9950 9960 9970 10000 10010 10020 10050 10080 10100 10110 10120 10130 10160 10180 10210 10220 10230 10250 10280 10300 10310 10320 10350 10370 10380 10400 10410 10420 10470 10480 10510 10530 10560 10570 10580 10600 10650 10660 10700 10720 10750 10760 10770 10810 10820 10830 10860 10880 10900 10910 10920 10950 10980 11000 11020 11030 11040 11070 11110 11120 11130 11160 11170 11180 11190 11210 11220 11230 11240 11260 11270 11290 11310 11320 11340 11360 11370 11380 11420 11430 11440 11460 11470 11480 11510 11520 11540 11560 11580 11590 11610 11620 11630 11640 11680 11690 11760 11770 11790 11810 11830 11840 11870 11880 11890 11910 11920 11940 11960 11970 11980 11990 12010 12060 12070 12080 12090 12110 12120 12140 12170 12180 12210 12220 12240 12260 12280 12290 12320 12330 12340 12360 12370 12380 12410 12420 12430 12440 12470 12490 12520 12530 12540 12570 12590 12610 12620 12660 12670 12690 12710 12720 12730 12740 12770 12780 12790 12810 12820 12840 12860 12870 12880 12910 12920 12930 12940 12960 12980 12990 13010 13020 13030 13040 13060 13070 13080 13090 13140 13180 13190 13210 13270 13310 13320 13330 13360 13370 13380 13390 13430 13440 13460 13470 13480 13510 13520 13530 13540 13560 13570 13590 13610 13620 13630 13640 13680 13690 13720 13740 13760 13770 13820 13840 13860 13890 13920 13930 13960 13980 13990 14010 14030 14040 14060 14070 14090 14120 14130 14170 14210 14220 14230 14240 14260 14270 14310 14320 14360 14370 14390 14440 14460 14470 14480 14490 14510 14520 14540 14580 14590 14610 14640 14660 14730 14740 14760 14780 14810 14830 14870 14880 14910 14920 14940 14960 14970 14980 14990 15010 15020 15030 15040 15060 15090 15110 15140 15160 15210 15230 15260 15270 15280 15290 15310 15320 15330 15340 15360 15390 15410 15430 15460 15470 15480 15490 15510 15520 15530 15570 15580 15610 15620 15640 15660 15670 15680 15690 15740 15780 15790 15810 15830 15860 15870 15890 15910 15930 15960 15980 15990 16010 16040 16060 16070 16080 16090 16120 16160 16170 16180 16210 16220 16230 16260 16270 16280 16320 16330 16360 16380 16390 16410 16430 16440 16480 16530 16570 16580 16600 16620 16630 16640 16650 16670 16690 16720 16740 16770 16780 16800 16820 16840 16870 16880 16890 16900 16970 16990 17030 17040 17050 17080 17090 17100 17120 17180 17190 17200 17220 17230 17240 17250 17270 17280 17300 17370 17380 17390 17440 17450 17470 17520 17540 17550 17600 17620 17630 17670 17690 17720 17740 17770 17780 17790 17800 17870 17880 17900 17930 17970 17990 18000 18040 18050 18120 18130 18150 18170 18190 18200 18220 18230 18240 18250 18280 18290 18300 18320 18330 18370 18390 18400 18430 18440 18470 18500 18530 18540 18550 18570 18580 18590 18600 18630 18640 18670 18680 18690 18720 18740 18770 18780 18790 18800 18820 18840 18880 18890 18920 18930 18940 18970 18990 19020 19030 19040 19050 19080 19090 19100 19120 19130 19140 19170 19190 19200 19220 19230 19240 19250 19290 19320 19330 19340 19380 19400 19430 19490 19520 19530 19580 19590 19620 19630 19640 19670 19680 19690 19720 19730 19750 19770 19790 19800 19820 19830 19840 19850 19870 19890 19900 19920 19930 19970 19980 19990 20000 20020 20050 20070 20080 20090 20120 20130 20140 20190 20230 20240 20270 20300 20330 20340 20350 20390 20420 20440 20450 20470 20480 20490 20540 20570 20590 20600 20620 20630 20650 20680 20700 20720 20730 20770 20790 20800 20830 20840 20870 20890 20900 20920 20940 20950 20980 21020 21030 21040 21070 21080 21120 21130 21170 21190 21240 21250 21270 21280 21330 21340 21370 21390 21400 21420 21430 21470 21490 21500 21520 21540 21550 21570 21580 21650 21670 21700 21720 21740 21750 21770 21800 21820 21830 21850 21870 21880 21890 21900 21930 21940 21950 21970 21980 21990 22040 22060 22080 22090 22110 22130 22140 22150 22160 22190 22200 22210 22250 22260 22280 22330 22340 22380 22390 22440 22450 22460 22500 22510 22550 22560 22580 22610 22640 22660 22690 22740 22750 22760 22840 22860 22880 22890 22950 22960 22980 23000 23030 23040 23050 23060 23080 23090 23110 23130 23150 23180 23190 23200 23210 23240 23250 23280 23290 23300 23330 23360 23380 23390 23410 23430 23440 23450 23460 23490 23500 23530 23540 23550 23580 23590 23600 23630 23640 23660 23680 23710 23740 23760 23780 23800 23810 23840 23850 23880 23890 23900 23910 23930 23940 23960 23980 24000 24010 24030 24050 24060 24090 24100 24110 24130 24150 24190 24200 24210 24230 24250 24260 24290 24300 24330 24340 24350 24360 24380 24400 24410 24440 24450 24460 24480 24490 24500 24530 24550 24560 24590 24600 24610 24630 24680 24690 24700 24710 24740 24760 24800 24810 24830 24840 24880 24890 24900 24910 24960 24980 25000 25030 25040 25050 25060 25090 25110 25140 25160 25180 25190 25200 25210 25230 25240 25290 25300 25310 25330 25340 25350 25380 25400 25410 25430 25440 25460 25480 25490 25510 25540 25580 25590 25600 25650 25660 25680 25690 25710 25740 25760 25800 25810 25830 25840 25880 25890 25930 25960 25980 25990 26000 26010 26050 26060 26080 26090 26100 26110 26160 26180 26200 26230 26250 26260 26280 26290 26360 26390 26410 26430 26440 26490 26500 26550 26660 26680 26690 26730 26740 26750 26790 26800 26830 26840 26860 26890 26900 26910 26960 27000 27030 27050 27060 27080 27100 27150 27200 27210 27250 27260 27280 27290 27310 27340 27360 27380 27400 27410 27450 27460 27480 27530 27540 27550 27570 27590 27610 27620 27640 27650 27670 27690 27700 27720 27740 27750 27760 27770 27790 27820 27840 27850 27860 27900 27920 27960 27970 27990 28010 28020 28040 28050 28070 28090 28100 28120 28140 28160 28170 28200 28220 28240 28250 28260 28270 28320 28340 28350 28370 28410 28420 28460 28490 28500 28510 28520 28540 28570 28600 28610 28640 28670 28690 28740 28760 28790 28800 28810 28820 28840 28870 28900 28920 28940 28960 29000 29040 29060 29070 29100 29110 29120 29140 29160 29210 29220 29260 29270 29300 29310 29320 29350 29370 29390 29410 29440 29460 29490 29500 29510 29520 29540 29550 29560 29590 29650 29670 29760 29770 29800 29840 29850 29890 29900 29950 29990 30000 30040 30060 30090 30110 30140 30160 30190 30200 30260 30270 30340 30350 30360 30400 30420 30450 30460 30500 30510 30520 30560 30590 30610 30640 30660 30700 30710 30740 30750 30770 30790 30800 30820 30840 30850 30870 30890 30900 30950 30970 30990 31010 31040 31050 31070 31100 31110 31160 31170 31190 31210 31250 31260 31290 31310 31350 31360 31390 31400 31410 31420 31490 31500 31510 31540 31550 31590 31600 31610 31640 31650 31670 31710 31720 31740 31810 31820 31840 31860 31870 31890 31970 31990 32000 32020 32060 32110 32140 32190 32240 32260 32300 32310 32320 32340 32350 32370 32390 32410 32420 32440 32460 32490 32500 32540 32560 32570 32600 32610 32650 32660 32690 32700 32710 32720 32760 32770 32790 32800 32810 32840 32870 32890 32900 32910 32940 32950 32960 32970 32990 33000 33040 33050 33060 33080 33100 33130 33150 33160 33170 33180 33200 33210 33220 33230 33250 33280 33300 33310 33320 33350 33360 33370 33380 33400 33410 33420 33430 33450 33470 33480 33500 33510 33520 33550 33570 33600 33610 33650 33660 33670 33680 33700 33750 33760 33770 33800 33810 33820 33830 33860 33870 33880 33900 33910 33920 33930 33960 33980 34010 34020 34030 34050 34080 34100 34110 34120 34130 34150 34160 34170 34180 34210 34220 34230 34260 34280 34300 34320 34330 34350 34360 34370 34380 34400 34410 34430 34450 34460 34470 34480 34510 34530 34560 34570 34580 34610 34620 34650 34670 34680 34700 34710 34720 34730 34750 34760 34780 34810 34820 34830 34850 34860 34900 34910 34920 34930 34980 35010 35020 35030 35050 35060 35070 35120 35130 35160 35170 35180 35200 35210 35220 35230 35260 35280 35300 35310 35330 35360 35370 35380 35400 35420 35430 35450 35460 35480 35500 35510 35530 35550 35560 35580 35600 35610 35620 35660 35670 35700 35720 35750 35760 35770 35810 35820 35830 35850 35870 35880 35910 35930 35950 35960 35970 35980 36000 36010 36020 36050 36060 36070 36110 36150 36160 36210 36220 36250 36260 36300 36320 36330 36350 36360 36370 36400 36410 36420 36430 36450 36470 36480 36500 36510 36530 36560 36570 36580 36600 36610 36620 36630 36650 36670 36710 36720 36750 36760 36770 36780 36800 36820 36860 36870 36880 36900 36910 36930 36960 36970 36980 37000 37010 37020 37030 37050 37060 37070 37080 37110 37120 37130 37150 37160 37170 37200 37210 37230 37250 37260 37280 37300 37320 37350 37370 37380 37400 37410 37430 37460 37470 37480 37510 37520 37550 37560 37570 37580 37600 37610 37620 37650 37660 37680 37710 37720 37730 37750 37760 37770 37780 37800 37810 37820 37830 37860 37870 37900 37920 37930 37950 37970 38000 38010 38020 38030 38070 38080 38100 38110 38120 38160 38170 38180 38200 38210 38220 38230 38250 38280 38310 38320 38330 38350 38360 38370 38380 38400 38410 38420 38450 38470 38520 38530 38570 38580 38630 38640 38660 38690 38710 38760 38770 38790 38830 38860 38870 38910 38920 38930 38940 38980 38990 39020 39030 39040 39060 39070 39080 39110 39120 39130 39140 39160 39170 39180 39210 39220 39230 39260 39270 39320 39340 39370 39380 39390 39410 39420 39430 39470 39480 39490 39530 39540 39560 39570 39590 39610 39630 39660 39670 39680 39690 39710 39730 39740 39760 39780 39790 39810 39820 39830 39840 39870 39890 39910 39960 39970 39980 39990 40010 40020 40040 40080 40090 40130 40140 40160 40220 40230 40240 40290 40320 40330 40340 40360 40370 40380 40410 40420 40430 40460 40470 40480 40530 40560 40570 40580 40610 40630 40640 40660 40680 40710 40730 40760 40770 40780 40790 40820 40830 40840 40860 40920 40930 40940 40960 40970 40980 41010 41020 41040 41060 41080 41090 41110 41120 41160 41170 41190 41230 41240 41260 41290 41330 41340 41370 41380 41390 41410 41430 41440 41460 41470 41510 41520 41570 41610 41620 41640 41670 41680 41690 41710 41740 41760 41840 41870 41880 41890 41920 41930 41960 41970 41980 42030 42040 42070 42090 42110 42120 42160 42180 42190 42210 42220 42270 42280 42330 42340 42380 42390 42420 42430 42440 42470 42480 42510 42530 42540 42570 42580 42590 42610 42630 42690 42710 42730 42760 42770 42810 42820 42830 42860 42870 42880 42930 42940 42970 42980 42990 43030 43040 43080 43110 43130 43140 43180 43190 43210 43240 43280 43290 43310 43330 43370 43380 43390 43430 43460 43470 43480 43490 43540 43580 43610 43630 43640 43660 43670 43740 43790 43820 43830 43840 43860 43870 43880 43890 43910 43920 43960 43970 43980 44010 44020 44030 44040 44070 44080 44100 44120 44140 44150 44170 44200 44220 44230 44240 44250 44270 44290 44300 44320 44330 44340 44350 44380 44400 44420 44450 44480 44490 44500 44520 44530 44540 44550 44570 44580 44590 44600 44680 44690 44700 44720 44730 44740 44750 44780 44790 44800 44820 44830 44850 44870 44880 44890 44930 44940 44950 44980 44990 45020 45030 45050 45070 45090 45100 45120 45130 45140 45150 45170 45180 45200 45220 45230 45240 45270 45290 45320 45340 45380 45390 45400 45430 45450 45490 45500 45520 45530 45540 45550 45580 45600 45630 45640 45650 45670 45690 45700 45730 45750 45770 45790 45800 45830 45840 45850 45890 45920 45940 45950 45970 45980 45990 46000 46020 46070 46080 46090 46120 46130 46150 46170 46180 46190 46200 46220 46230 46240 46280 46290 46300 46330 46340 46380 46390 46400 46430 46440 46450 46490 46500 46530 46540 46550 46570 46580 46590 46600 46640 46650 46680 46690 46700 46720 46740 46750 46770 46780 46800 46820 46830 46880 46890 46920 46930 46970 46990 47000 47020 47030 47040 47070 47090 47100 47120 47140 47170 47180 47200 47220 47230 47250 47270 47280 47300 47330 47350 47390 47400 47430 47440 47450 47480 47490 47500 47520 47530 47540 47550 47570 47580 47590 47630 47650 47670 47680 47720 47730 47750 47770 47780 47790 47800 47850 47870 47880 47890 47900 47920 47940 47970 47980 47990 48000 48030 48040 48080 48090 48120 48130 48140 48150 48170 48180 48190 48200 48230 48240 48250 48290 48300 48330 48350 48380 48390 48420 48430 48440 48450 48470 48480 48500 48520 48530 48540 48550 48600 48620 48630 48650 48680 48690 48700 48730 48740 48750 48780 48820 48830 48870 48880 48900 48920 48930 48950 48980 49020 49030 49050 49090 49100 49130 49150 49170 49180 49200 49220 49230 49240 49250 49280 49300 49320 49330 49370 49380 49400 49430 49470 49480 49490 49500 49530 49550 49570 49580 49590 49630 49640 49660 49690 49730 49740 49750 49760 49780 49790 49800 49840 49850 49860 49880 49890 49900 49910 49930 49980 49990 50000 50010 50030 50040 50060 50090 50150 50180 50190 50200 50210 50260 50290 50300 50310 50330 50350 50360 50390 50400 50410 50430 50440 50450 50480 50490 50500 50540 50550 50560 50600 50630 50640 50650 50660 50700 50710 50730 50740 50810 50840 50850 50900 50930 50940 50950 50980 51000 51040 51050 51100 51130 51140 51150 51190 51230 51240 51250 51260 51300 51310 51330 51350 51380 51390 51410 51450 51460 51480 51490 51510 51530 51550 51560 51580 51600 51610 51630 51650 51660 51690 51700 51710 51730 51740 51750 51760 51780 51810 51830 51840 51850 51860 51890 51930 51940 51950 51960 51980 51990 52000 52040 52060 52090 52100 52130 52180 52190 52200 52210 52230 52240 52250 52310 52340 52360 52380 52390 52400 52440 52450 52500 52510 52540 52550 52560 52580 52590 52600 52610 52650 52680 52690 52710 52730 52740 52750 52780 52790 52800 52840 52850 52880 52890 52900 52910 52940 52960 53010 53030 53040 53050 53060 53080 53100 53110 53140 53160 53190 53230 53240 53280 53290 53310 53330 53350 53360 53380 53400 53430 53450 53460 53480 53490 53500 53510 53550 53560 53580 53610 53630 53640 53650 53660 53680 53690 53700 53740 53760 53780 53810 53830 53840 53850 53860 53880 53900 53910 53950 53960 53980 54000 54010 54030 54050 54080 54100 54110 54130 54180 54190 54200 54210 54250 54260 54280 54290 54300 54340 54350 54360 54380 54390 54440 54450 54480 54490 54500 54510 54530 54540 54550 54560 54600 54610 54630 54640 54650 54660 54700 54710 54740 54760 54780 54800 54810 54830 54840 54850 54860 54880 54890 54900 54910 54930 54940 54950 54960 54990 55010 55030 55050 55060 55080 55090 55100 55110 55120 55150 55200 55210 55220 55250 55260 55290 55300 55310 55320 55340 55360 55390 55400 55410 55420 55450 55460 55470 55500 55540 55550 55560 55590 55640 55650 55670 55690 55700 55710 55720 55770 55790 55800 55840 55860 55870 55890 55900 55920 55950 56020 56050 56060 56090 56110 56150 56170 56190 56200 56210 56220 56240 56260 56270 56290 56310 56340 56350 56360 56370 56410 56420 56440 56450 56500 56520 56540 56550 56590 56600 56620 56640 56650 56660 56670 56690 56720 56750 56800 56810 56840 56860 56870 56910 56920 56960 56970 56990 57040 57050 57060 57070 57090 57120 57140 57190 57210 57220 57240 57260 57270 57290 57310 57320 57360 57370 57400 57410 57440 57460 57470 57490 57510 57560 57570 57590 57600 57610 57650 57670 57700 57710 57740 57760 57770 57800 57810 57820 57850 57870 57900 57940 57960 58010 58020 58040 58050 58090 58110 58120 58150 58160 58190 58200 58210 58220 58250 58260 58320 58340 58350 58390 58410 58420 58440 58450 58460 58490 58520 58550 58560 58600 58620 58690 58700 58710 58720 58740 58790 58800 58810 58840 58850 58870 58890 58900 58920 58940 58950 58970 59010 59050 59060 59070 59090 59160 59170 59190 59200 59210 59240 59260 59270 59290 59300 59310 59320 59340 59350 59360 59370 59400 59410 59440 59450 59460 59470 59490 59500 59510 59520 59550 59590 59610 59620 59650 59660 59670 59690 59700 59720 59750 59760 59770 59820 59850 59860 59870 59900 59910 59920 59950 59990 60010 60020 60040 60050 60060 60070 60110 60120 60150 60170 60190 60200 60210 60240 60250 60270 60290 60300 60320 60340 60350 60360 60370 60410 60420 60440 60460 60470 60500 60520 60550 60560 60570 60590 60600 60610 60630 60650 60660 60670 60710 60730 60750 60760 60770 60800 60820 60830 60850 60870 60880 60900 60910 60920 60930 60950 60970 60980 61000 61010 61020 61030 61050 61060 61070 61100 61120 61130 61150 61170 61180 61200 61220 61230 61250 61260 61270 61280 61310 61320 61330 61350 61400 61420 61450 61460 61480 61500 61510 61530 61560 61570 61610 61630 61650 61660 61670 61680 61700 61710 61720 61750 61770 61780 61810 61820 61830 61880 61900 61910 61930 61950 61960 61970 62000 62010 62020 62060 62080 62100 62120 62130 62150 62170 62180 62200 62210 62230 62270 62280 62300 62330 62350 62360 62370 62380 62400 62420 62430 62460 62470 62510 62520 62530 62550 62580 62600 62610 62620 62650 62670 62680 62700 62720 62730 62750 62760 62770 62780 62800 62810 62820 62830 62850 62860 62880 62900 62910 62950 62960 62970 62980 63020 63030 63050 63060 63070 63080 63130 63150 63160 63170 63180 63220 63250 63270 63280 63350 63360 63410 63420 63430 63450 63500 63510 63630 63650 63670 63680 63710 63760 63820 63910 63930 64050 64310 64350 64370 64470 64550 64570 64600 64610 64630 64680 64700 64730 64760 64770 64780 64820 64830 64870 64880 64900 64910 65020 65110 65120 65130 65150 65160 65170 65180 65200 65220 65230 65260 65270 65280 65300 65310 65320 65350 65370 65450 65470 65480 65520 65530 65580 65630 65700 65710 65720 65730 65750 65780 65800 65810 65820 65830 65870 65880 65900 65920 65930 65950 65960 66000 66050 66060 66070 66100 66120 66130 66140 66160 66170 66190 66210 66260 66320 66370 66390 66460 66470 66480 66520 66530 66570 66580 66620 66660 66690 66710 66720 66740 66760 66770 66780 66820 66840 66860 66870 66930 66960 66980 67020 67030 67060 67070 67110 67130 67140 67160 67170 67180 67210 67240 67290 67320 67330 67340 67360 67370 67390 67410 67430 67470 67480 67540 67560 67570 67580 67610 67630 67640 67660 67670 67680 67690 67720 67740 67790 67810 67820 67870 67890 67910 67920 67940 67970 68010 68030 68040 68070 68110 68160 68170 68180 68210 68220 68230 68260 68270 68280 68290 68310 68320 68340 68360 68370 68380 68390 68420 68440 68460 68470 68480 68490 68510 68520 68540 68560 68580 68590 68630 68640 68660 68670 68680 68690 68710 68730 68760 68780 68810 68820 68840 68860 68880 68890 68910 68920 68930 68960 68970 68980 68990 69010 69030 69060 69070 69080 69110 69120 69130 69160 69170 69180 69190 69210 69220 69240 69270 69310 69320 69330 69340 69360 69370 69380 69390 69430 69440 69460 69470 69480 69490 69510 69520 69530 69540 69560 69580 69610 69620 69630 69640 69660 69670 69690 69710 69720 69730 69740 69760 69780 69810 69820 69830 69860 69870 69890 69910 69920 69930 69960 69970 69990 70010 70020 70030 70040 70060 70070 70080 70090 70110 70120 70130 70140 70160 70170 70190 70210 70220 70260 70270 70280 70290 70310 70320 70330 70340 70370 70380 70390 70410 70420 70440 70470 70480 70490 70520 70530 70540 70560 70580 70590 70620 70630 70640 70660 70680 70690 70710 70720 70740 70770 70780 70790 70810 70820 70830 70840 70880 70890 70910 70920 70930 70940 70960 70970 71020 71030 71040 71060 71070 71080 71120 71140 71160 71170 71190 71220 71240 71260 71270 71290 71310 71320 71330 71360 71380 71410 71430 71470 71480 71520 71530 71540 71560 71570 71590 71610 71620 71640 71650 71670 71680 71730 71750 71770 71780 71790 71830 71840 71850 71870 71880 71900 71920 71930 71950 71970 71980 72000 72020 72030 72040 72050 72080 72090 72100 72120 72140 72150 72180 72190 72200 72220 72230 72240 72250 72270 72280 72290 72300 72330 72340 72350 72370 72400 72420 72430 72450 72470 72490 72500 72520 72530 72550 72570 72580 72590 72620 72630 72640 72650 72670 72680 72690 72720 72730 72740 72750 72780 72790 72800 72830 72840 72870 72880 72890 72920 72940 72950 72970 72980 72990 73000 73020 73030 73040 73050 73070 73080 73090 73100 73120 73130 73140 73150 73170 73180 73190 73220 73230 73250 73280 73290 73320 73330 73340 73370 73380 73390 73400 73420 73430 73440 73470 73480 73490 73500 73520 73530 73540 73550 73580 73590 73600 73620 73630 73640 73650 73690 73700 73730 73740 73770 73780 73790 73800 73820 73830 73840 73850 73890 73900 73930 73940 73950 73970 73980 73990 74030 74040 74070 74090 74100 74120 74170 74180 74220 74230 74270 74280 74290 74300 74320 74340 74370 74390 74400 74430 74470 74480 74520 74570 74590 74600 74630 74640 74650 74680 74700 74730 74770 74780 74790 74800 74820 74840 74850 74890 74920 74930 74950 74970 74980 74990 75020 75080 75090 75100 75120 75130 75180 75190 75200 75220 75230 75270 75280 75290 75300 75320 75330 75340 75350 75380 75390 75400 75430 75450 75470 75480 75490 75520 75540 75570 75580 75600 75620 75630 75640 75650 75670 75680 75690 75700 75720 75740 75750 75770 75780 75790 75870 75890 75900 75930 75940 75950 75970 75990 76050 76070 76080 76130 76150 76170 76180 76220 76240 76250 76270 76280 76290 76320 76340 76380 76420 76440 76470 76480 76490 76520 76540 76550 76570 76590 76630 76640 76680 76690 76700 76720 76780 76790 76800 76830 76880 76900 76920 76930 76940 76970 76980 76990 77000 77020 77030 77070 77090 77100 77140 77150 77160 77180 77200 77210 77250 77260 77280 77290 77300 77330 77340 77380 77400 77410 77430 77440 77460 77480 77500 77510 77530 77540 77580 77610 77630 77640 77650 77660 77700 77730 77740 77750 77780 77790 77800 77810 77830 77850 77880 77890 77900 77950 77980 77990 78000 78010 78040 78050 78090 78100 78110 78140 78160 78180 78190 78200 78210 78230 78280 78290 78300 78310 78360 78380 78390 78440 78450 78460 78480 78500 78540 78590 78600 78610 78640 78650 78680 78700 78710 78730 78740 78750 78760 78790 78800 78810 78840 78860 78900 78910 78930 78940 78950 78960 78990 79000 79060 79080 79090 79110 79130 79150 79200 79210 79230 79240 79250 79260 79280 79290 79300 79360 79400 79410 79430 79460 79480 79490 79530 79540 79550 79560 79580 79590 79630 79640 79660 79700 79710 79740 79780 79800 79810 79830 79890 79900 79940 79950 79960 80000 80030 80060 80080 80100 80130 80140 80150 80190 80200 80210 80240 80250 80260 80290 80300 80310 80330 80380 80410 80440 80460 80490 80500 80560 80580 80590 80610 80630 80640 80650 80690 80700 80730 80740 80750 80760 80780 80800 80810 80840 80850 80880 80930 80960 80980 80990 81000 81010 81030 81040 81050 81080 81130 81140 81150 81160 81180 81200 81210 81230 81240 81250 81290 81310 81330 81340 81350 81360 81390 81430 81440 81460 81490 81500 81510 81540 81580 81590 81610 81630 81640 81650 81680 81710 81750 81800 81830 81850 81880 81890 81930 81940 81950 81980 81990 82030 82080 82090 82100 82110 82130 82140 82150 82160 82180 82200 82240 82250 82280 82300 82340 82350 82360 82400 82410 82430 82460 82480 82490 82540 82550 82560 82580 82600 82610 82630 82640 82650 82660 82670 82700 82750 82770 82810 82840 82860 82870 82890 82900 82950 82970 82990 83010 83040 83070 83100 83110 83140 83170 83200 83220 83260 83270 83300 83320 83340 83390 83400 83420 83440 83450 83460 83510 83540 83550 83560 83570 83690 83710 83720 83770 83800 83810 83820 83840 83850 83900 83910 83950 83960 83970 84020 84040 84050 84090 84120 84140 84170 84200 84240 84250 84260 84270 84300 84320 84340 84390 84400 84410 84460 84470 84500 84510 84520 84540 84570 84590 84610 84620 84650 84660 84700 84710 84720 84770 84800 84810 84820 84840 84870 84890 84900 84960 85020 85050 85060 85090 85100 85160 85170 85190 85210 85220 85250 85260 85270 85320 85340 85360 85410 85440 85460 85490 85500 85550 85590 85600 85620 85650 85670 85760 85800 85810 85860 85870 85900 85910 85920 85940 85960 85990 86050 86060 86070 86090 86100 86120 86160 86170 86200 86210 86220 86260 86270 86340 86360 86440 86450 86490 86510 86520 86550 86600 86640 86650 86670 86690 86700 86720 86750 86810 86950 86960 86990 87000 87010 87020 87040 87050 87070 87100 87110 87150 87190 87200 87250 87270 87310 87340 87390 87410 87420 87460 87500 87540 87560 87570 87590 87600 87610 87620 87670 87710 87720 87750 87760 87770 87800 87820 87840 87850 87860 87870 87890 87900 87950 87960 87990 88010 88020 88060 88070 88150 88160 88170 88180 88200 88210 88220 88260 88270 88280 88330 88350 88360 88380 88470 88480 88510 88520 88550 88570 88580 88610 88620 88650 88670 88710 88750 88760 88770 88780 88820 88850 88860 88870 88910 88920 88930 88950 88960 88970 88980 89010 89020 89060 89080 89100 89110 89120 89150 89160 89170 89200 89210 89250 89270 89280 89300 89320 89350 89380 89400 89410 89420 89430 89450 89460 89470 89520 89530 89560 89570 89580 89620 89630 89650 89680 89720 89730 89780 89800 89810 89860 89950 90060 90070 90100 90110 90120 90130 90150 90170 90180 90260 90270 90280 90400 90450 90460 90520 90530 90550 90660 90730 90810 90830 90870 90880 90900 90920 90960 90970 90980 91030 91060 91120 91130 91160 91220 91270 91320 91350 91360 91450 91470 91480 91610 91650 91860 91880 91950 91970 92010 92160 92250 92320 92380 92460 92470 92480 92500 92520 92600 92670 92780 92810 92920 92950 92960 93000 93010 93030 93060 93070 93170 93250 93310 93370 93410 93420 93430 93520 93620 93650 93660 93670 93860 93880 93980 93990 94010 94120 94230 94240 94310 94470 94620 94670 94810 94830 94880 94930 94990 95060 95240 95360 95410 95460 95520 95610 95630 95670 95680 95720 95730 95920 95970 95990 96010 96160 96230 96270 96460 96510 96540 96640 96690 96730 96770 96790 96830 96840 96910 97030 97040 97060 97080 97120 97170 97220 97270 97310 97330 97360 97430 97440 97460 97560 97610 97670 97690 97740 97920 97940 97960 97980 98030 98040 98060 98090 98160 98210 98280 98320 98340 98360 98390 98420 98470 98530 98590 98620 98660 98710 98730 98790 98930 98990 99010 99020 99030 99060 99090 99130 99140 99160 99170 99180 99190 99220 99250 99280 99320 99370 99420 99480 99500 99540 99590 99620 99640 99650 99690 99700 99730 99740 99750 99770 99900 99950 99990 100000 100020 100050 100070 100090 100100 100170 100200 100240 100250 100270 100290 100320 100340 100370 100380 100390 100430 100440 100470 100480 100490 100550 100570 100590 100600 100620 100630 100680 100690 100700 100740 100750 100780 100790 100800 100820 100830 100880 100900 100920 100930 100940 100970 100980 100990 101000 101020 101040 101070 101080 101090 101100 101130 101140 101170 101200 101230 101240 101250 101290 101300 101320 101330 101340 101380 101390 101430 101440 101450 101480 101490 101500 101520 101540 101570 101590 101600 101620 101630 101650 101670 101680 101690 101700 101730 101750 101770 101780 101790 101800 101820 101840 101870 101880 101890 101900 101940 101950 101970 102000 102020 102040 102050 102070 102090 102100 102120 102130 102140 102150 102190 102230 102250 102270 102280 102320 102330 102340 102350 102380 102400 102420 102430 102450 102480 102490 102530 102540 102570 102580 102590 102630 102640 102650 102670 102680 102690 102700 102720 102730 102740 102750 102780 102790 102800 102820 102840 102850 102880 102890 102920 102940 102980 102990 103000 103020 103030 103070 103080 103090 103120 103130 103140 103180 103190 103200 103270 103280 103300 103320 103330 103340 103350 103380 103420 103450 103480 103500 103520 103550 103580 103620 103640 103670 103680 103690 103700 103720 103770 103780 103790 103800 103830 103840 103850 103870 103880 103890 103900 103930 103940 103950 103970 103990 104070 104090 104100 104130 104140 104150 104180 104190 104200 104220 104250 104270 104300 104320 104330 104370 104380 104390 104420 104440 104450 104470 104520 104530 104540 104550 104590 104600 104620 104630 104640 104680 104690 104700 104710 104730 104790 104800 104830 104840 104850 104860 104900 104910 104930 104940 104960 104980 104990 105030 105040 105050 105060 105100 105130 105140 105230 105240 105250 105330 105340 105350 105360 105390 105410 105440 105450 105510 105560 105590 105600 105610 105630 105640 105650 105660 105690 105740 105750 105780 105790 105800 105810 105830 105840 105890 105900 105930 105980 105990 106000 106030 106040 106050 106080 106110 106140 106180 106200 106230 106300 106310 106330 106350 106360 106380 106390 106410 106440 106460 106480 106490 106510 106530 106590 106610 106630 106640 106650 106680 106730 106800 106840 106850 106910 106930 106940 106960 106980 106990 107010 107030 107040 107080 107110 107140 107150 107190 107200 107280 107300 107310 107330 107340 107350 107360 107380 107410 107430 107450 107460 107480 107550 107560 107590 107600 107610 107660 107680 107690 107700 107730 107790 107800 107810 107840 107860 107890 107910 107930 107950 107960 107990 108000 108030 108040 108060 108080 108090 108100 108110 108140 108160 108180 108200 108210 108230 108240 108280 108290 108310 108340 108380 108390 108400 108460 108490 108510 108530 108560 108580 108590 108610 108630 108640 108650 108700 108710 108730 108740 108750 108810 108860 108890 108900 108910 108930 108940 108950 108980 109010 109050 109060 109110 109140 109150 109190 109240 109260 109280 109310 109350 109360 109380 109410 109440 109450 109460 109490 109510 109530 109540 109550 109560 109580 109590 109610 109650 109680 109690 109700 109710 109740 109750 109790 109800 109830 109840 109860 109900 109940 109990 110000 110010 110040 110050 110060 110090 110100 110110 110130 110140 110160 110190 110200 110210 110220 110240 110250 110260 110290 110300 110320 110340 110350 110360 110400 110410 110450 110460 110470 110490 110510 110550 110560 110590 110600 110620 110640 110660 110670 110690 110710 110750 110760 110770 110790 110800 110840 110870 110890 110900 110910 110920 110940 110950 110960 111000 111010 111020 111040 111050 111070 111100 111110 111140 111150 111170 111190 111200 111210 111220 111240 111250 111260 111290 111300 111310 111320 111340 111350 111370 111390 111400 111410 111420 111440 111450 111500 111510 111520 111540 111550 111560 111570 111600 111610 111620 111640 111650 111670 111690 111700 111720 111740 111750 111760 111770 111810 111820 111850 111870 111890 111910 111920 111950 112000 112010 112020 112040 112060 112070 112090 112100 112110 112120 112160 112170 112190 112210 112220 112240 112250 112260 112290 112300 112310 112340 112350 112360 112370 112410 112420 112440 112450 112460 112490 112500 112520 112540 112560 112590 112600 112610 112670 112690 112710 112740 112750 112760 112770 112820 112840 112850 112860 112870 112890 112920 112960 112970 112990 113000 113010 113020 113090 113100 113110 113120 113140 113160 113190 113210 113220 113290 113300 113310 113320 113370 113400 113450 113460 113470 113510 113520 113560 113590 113610 113620 113650 113660 113670 113720 113750 113790 113800 113810 113820 113840 113860 113900 113910 113970 114020 114060 114070 114090 114100 114110 114120 114200 114210 114240 114250 114260 114270 114310 114320 114370 114390 114420 114440 114460 114510 114520 114550 114560 114570 114590 114600 114610 114640 114650 114660 114670 114690 114700 114710 114740 114760 114800 114810 114820 114840 114850 114870 114890 114920 114940 114970 115000 115020 115040 115100 115120 115150 115170 115200 115210 115240 115250 115260 115290 115300 115310 115320 115370 115390 115410 115420 115440 115500 115510 115520 115540 115560 115570 115590 115640 115650 115690 115700 115710 115720 115730 115760 115770 115780 115800 115810 115850 115860 115870 115900 115930 115950 115970 116010 116030 116050 116060 116080 116100 116120 116150 116160 116170 116220 116230 116260 116300 116320 116330 116350 116360 116370 116380 116420 116460 116470 116520 116570 116580 116620 116650 116680 116700 116720 116750 116760 116770 116800 116810 116860 116900 116910 116920 116970 117000 117050 117060 117070 117080 117100 117120 117130 117150 117170 117180 117210 117250 117260 117270 117300 117310 117330 117360 117370 117380 117400 117410 117430 117450 117460 117500 117550 117560 117570 117580 117610 117660 117670 117700 117730 117750 117770 117780 117800 117810 117850 117870 117920 117930 117960 117970 118000 118020 118030 118050 118100 118110 118130 118150 118160 118180 118200 118250 118300 118320 118330 118360 118400 118410 118430 118460 118500 118550 118560 118570 118580 118600 118710 118720 118750 118760 118780 118810 118820 118830 118850 118860 118870 118880 118900 118930 118960 118980 119000 119010 119020 119030 119050 119170 119180 119210 119260 119320 119330 119350 119380 119420 119450 119470 119530 119560 119600 119620 119650 119710 119720 119760 119770 119830 119860 119870 119900 119910 119920 119930 119950 119980 120020 120030 120060 120070 120100 120120 120130 120160 120170 120210 120220 120230 120270 120300 120310 120360 120370 120410 120430 120500 120510 120520 120550 120570 120580 120600 120660 120700 120710 120780 120800 120830 120860 120870 120900 120920 120930 120950 120980 121010 121020 121030 121050 121060 121070 121080 121100 121110 121130 121160 121170 121180 121210 121220 121240 121270 121290 121340 121360 121370 121380 121390 121410 121430 121460 121470 121480 121510 121540 121570 121580 121590 121630 121660 121680 121710 121720 121730 121760 121770 121820 121840 121870 121890 121920 121930 121960 121990 122010 122020 122030 122070 122090 122110 122120 122130 122160 122180 122190 122210 122220 122240 122260 122270 122310 122320 122340 122360 122370 122410 122420 122430 122440 122470 122480 122490 122520 122530 122590 122630 122640 122670 122680 122710 122720 122760 122770 122780 122790 122810 122830 122870 122880 122940 122990 123020 123030 123040 123060 123070 123080 123110 123120 123130 123140 123170 123180 123210 123230 123260 123270 123280 123330 123340 123360 123380 123390 123410 123430 123440 123470 123480 123490 123510 123520 123530 123570 123580 123590 123610 123620 123630 123670 123710 123730 123760 123780 123810 123820 123830 123840 123860 123870 123890 123910 123930 123940 123960 123990 124010 124040 124060 124070 124120 124130 124170 124180 124210 124220 124270 124280 124290 124310 124340 124370 124380 124420 124460 124470 124510 124560 124570 124640 124660 124690 124720 124730 124760 124770 124780 124820 124830 124860 124890 124910 124920 124930 124960 124980 125010 125020 125040 125060 125070 125090 125110 125130 125140 125190 125230 125240 125260 125270 125280 125290 125310 125330 125360 125370 125410 125430 125440 125460 125470 125480 125490 125510 125520 125530 125590 125610 125620 125630 125640 125670 125690 125710 125720 125730 125740 125760 125770 125780 125790 125810 125840 125860 125870 125880 125910 125920 125930 125960 126060 126070 126080 126130 126210 126240 126270 126310 126360 126370 126380 126390 126420 126430 126440 126470 126530 126540 126570 126580 126610 126630 126670 126720 126750 126780 126790 126820 126830 126850 126870 126880 126890 126920 126950 127000 127020 127030 127040 127050 127070 127180 127190 127200 127220 127230 127240 127280 127290 127340 127370 127380 127390 127400 127480 127490 127520 127530 127540 127550 127570 127600 127690 127700 127720 127740 127750 127790 127820 127850 127870 127880 127890 127920 127980 128030 128050 128070 128100 128120 128170 128190 128270 128290 128350 128370 128380 128390 128400 128430 128530 128540 128580 128620 128640 128690 128720 128750 128830 128840 128870 128900 128970 128980 129000 129020 129050 129070 129090 129100 129120 129140 129150 129170 129180 129190 129200 129230 129270 129280 129290 129320 129340 129370 129380 129390 129420 129430 129450 129470 129480 129520 129530 129540 129570 129580 129600 129620 129670 129690 129700 129720 129740 129750 129770 129780 129790 129800 129820 129830 129840 129850 129880 129900 129920 129930 129950 129970 129980 130000 130020 130030 130050 130080 130090 130100 130150 130170 130180 130190 130200 130250 130270 130280 130290 130300 130320 130330 130340 130370 130380 130390 130400 130420 130430 130440 130470 130480 130490 130500 130540 130550 130570 130580 130600 130620 130630 130680 130720 130740 130750 130770 130780 130820 130840 130850 130880 130890 130920 130950 130970 130980 130990 131030 131040 131050 131070 131090 131100 131130 131140 131150 131170 131180 131190 131200 131220 131240 131250 131280 131300 131330 131340 131350 131370 131390 131400 131420 131430 131440 131450 131480 131490 131500 131530 131570 131580 131600 131630 131650 131680 131690 131700 131720 131730 131740 131750 131780 131830 131840 131870 131880 131890 131900 131920 131930 131940 131950 131970 131990 132020 132040 132070 132080 132100 132120 132170 132180 132190 132200 132220 132230 132240 132250 132260 132300 132310 132330 132340 132350 132360 132380 132390 132440 132450 132460 132480 132490 132500 132510 132540 132550 132560 132610 132630 132640 132650 132680 132700 132710 132730 132740 132760 132780 132790 132800 132830 132850 132860 132880 132890 132900 132910 132930 132940 132950 133000 133010 133030 133040 133050 133080 133090 133100 133110 133130 133140 133150 133160 133180 133200 133210 133240 133250 133290 133300 133310 133350 133360 133380 133390 133430 133440 133450 133460 133480 133500 133510 133530 133550 133560 133580 133600 133610 133640 133650 133660 133690 133700 133730 133780 133800 133810 133840 133850 133860 133890 133900 133910 133940 133980 133990 134030 134060 134080 134110 134130 134150 134190 134200 134210 134230 134240 134250 134280 134290 134300 134350 134390 134400 134410 134440 134450 134460 134480 134500 134510 134530 134540 134550 134580 134590 134650 134660 134680 134690 134700 134710 134730 134740 134760 134840 134860 134880 134890 134900 134910 134930 134940 134950 134990 135000 135010 135030 135060 135090 135100 135140 135160 135180 135190 135260 135280 135290 135340 135350 135360 135380 135390 135400 135410 135480 135500 135510 135530 135540 135560 135590 135630 135650 135660 135730 135740 135750 135780 135800 135810 135830 135880 135890 135900 135940 135950 135960 135980 135990 136000 136010 136060 136090 136100 136110 136140 136160 136180 136190 136200 136210 136240 136260 136300 136310 136340 136360 136390 136430 136440 136450 136500 136510 136540 136550 136590 136600 136650 136660 136690 136730 136740 136750 136790 136840 136850 136860 136880 136890 136900 136940 136990 137000 137010 137030 137040 137050 137060 137090 137130 137150 137180 137190 137200 137210 137230 137250 137260 137290 137300 137310 137400 137410 137430 137440 137460 137490 137500 137510 137530 137540 137560 137580 137600 137630 137650 137690 137700 137710 137750 137760 137790 137800 137860 137870 137890 137900 137910 137940 137960 137970 138010 138040 138050 138090 138100 138120 138140 138150 138160 138170 138200 138210 138220 138240 138250 138260 138270 138310 138340 138350 138360 138370 138420 138450 138460 138470 138500 138510 138520 138550 138560 138590 138600 138610 138620 138650 138670 138710 138720 138750 138770 138790 138800 138810 138820 138860 138900 138910 138920 138940 138950 138970 138990 139000 139010 139040 139060 139070 139120 139140 139150 139160 139170 139190 139210 139250 139260 139270 139300 139310 139340 139350 139360 139390 139400 139410 139420 139440 139450 139460 139490 139500 139510 139520 139540 139550 139560 139570 139600 139610 139640 139660 139670 139700 139710 139720 139740 139750 139770 139790 139800 139810 139850 139860 139890 139900 139910 139940 139960 139990 140000 140010 140060 140070 140090 140100 140120 140140 140150 140160 140170 140190 140210 140220 140260 140270 140290 140300 140310 140320 140350 140360 140370 140390 140440 140460 140490 140500 140510 140520 140540 140550 140560 140570 140600 140610 140620 140640 140660 140690 140700 140710 140720 140740 140750 140790 140810 140820 140860 140870 140900 140910 140920 140940 140950 140960 140990 141000 141020 141050 141060 141070 141090 141100 141110 141140 141150 141170 141190 141200 141210 141220 141250 141260 141270 141290 141310 141320 141350 141360 141370 141390 141410 141420 141440 141450 141460 141470 141490 141510 141520 141540 141560 141570 141590 141610 141620 141650 141660 141670 141700 141710 141720 141740 141750 141760 141790 141800 141810 141840 141850 141860 141890 141900 141910 141920 141940 141950 141960 141990 142000 142010 142040 142060 142070 142090 142100 142120 142140 142150 142160 142190 142200 142210 142220 142240 142250 142290 142310 142320 142340 142360 142370 142400 142410 142420 142470 142490 142500 142510 142520 142560 142590 142600 142610 142620 142660 142670 142690 142710 142720 142740 142750 142760 142770 142810 142820 142840 142890 142900 142920 142940 142970 142990 143000 143010 143020 143050 143090 143100 143110 143120 143150 143170 143270 143300 143360 143370 143410 143420 143430 143450 143460 143500 143510 143530 143550 143620 143630 143650 143670 143680 143730 143760 143800 143810 143820 143830 143850 143900 143910 143920 143950 143970 143980 144010 144020 144030 144050 144070 144080 144100 144120 144130 144150 144160 144170 144180 144200 144230 144270 144280 144310 144330 144350 144360 144370 144400 144420 144430 144470 144500 144530 144570 144610 144620 144670 144680 144750 144770 144800 144830 144870 144920 144930 144950 144960 145030 145050 145070 145100 145110 145150 145170 145210 145220 145250 145260 145310 145320 145330 145380 145400 145420 145430 145450 145480 145510 145520 145550 145570 145600 145670 145710 145720 145730 145760 145800 145820 145830 145850 145860 145900 145920 145930 145980 146030 146080 146110 146130 146160 146180 146210 146230 146260 146280 146300 146320 146330 146350 146360 146370 146380 146420 146450 146460 146510 146530 146560 146570 146580 146620 146680 146700 146710 146730 146760 146780 146810 146820 146830 146850 146870 146880 146910 146950 146960 146980 147020 147060 147070 147080 147100 147110 147130 147180 147200 147210 147220 147250 147300 147310 147320 147330 147350 147360 147410 147470 147530 147550 147560 147580 147610 147650 147670 147710 147750 147770 147780 147820 147860 147900 147920 147930 147950 147960 147970 147980 148050 148060 148100 148130 148160 148180 148250 148260 148270 148300 148320 148360 148380 148420 148430 148450 148460 148480 148500 148510 148570 148580 148600 148610 148660 148670 148730 148750 148770 148780 148830 148840 148860 148880 148890 148910 148920 148960 148970 148980 149040 149120 149140 149160 149190 149210 149240 149260 149330 149340 149360 149370 149380 149420 149430 149440 149460 149470 149480 149490 149520 149540 149560 149610 149630 149640 149660 149720 149730 149740 149760 149790 149820 149830 149840 149880 149930 149940 149960 149990 150010 150020 150040 150060 150090 150110 150130 150140 150160 150170 150180 150210 150220 150230 150240 150260 150280 150290 150330 150360 150370 150380 150390 150410 150460 150470 150480 150510 150530 150540 150570 150580 150590 150610 150630 150660 150690 150710 150740 150770 150780 150830 150840 150860 150880 150890 150910 150930 150940 150960 150970 151010 151030 151040 151060 151070 151080 151090 151110 151120 151130 151160 151180 151210 151230 151270 151280 151310 151330 151340 151360 151370 151380 151410 151420 151430 151440 151460 151470 151480 151490 151540 151580 151610 151620 151640 151660 151670 151690 151710 151720 151730 151770 151780 151790 151810 151830 151840 151860 151870 151880 151910 151920 151940 151960 151980 152010 152020 152070 152110 152120 152130 152160 152170 152180 152190 152230 152240 152260 152270 152310 152330 152360 152370 152380 152390 152410 152420 152430 152480 152490 152510 152520 152530 152560 152570 152580 152590 152620 152640 152660 152670 152690 152710 152720 152740 152770 152780 152820 152830 152840 152870 152880 152890 152910 152920 152930 152940 152970 152980 152990 153010 153030 153080 153090 153120 153140 153160 153170 153180 153190 153240 153260 153270 153280 153310 153320 153330 153340 153360 153410 153420 153430 153440 153470 153480 153490 153540 153570 153590 153620 153630 153640 153670 153680 153710 153720 153760 153770 153780 153790 153820 153860 153870 153890 153910 153940 153980 153990 154010 154030 154060 154070 154080 154090 154110 154130 154140 154160 154170 154190 154230 154260 154280 154330 154380 154390 154400 154450 154470 154500 154520 154530 154540 154580 154650 154750 154780 154790 154800 154820 154830 154840 154850 154870 154890 154940 154950 154970 155000 155040 155100 155120 155130 155140 155150 155240 155270 155280 155330 155340 155390 155420 155430 155440 155450 155470 155480 155500 155540 155550 155580 155590 155620 155630 155680 155730 155750 155790 155820 155840 155850 155870 155890 155900 155930 155940 155970 155980 155990 156000 156050 156070 156080 156090 156130 156150 156180 156230 156270 156290 156320 156390 156400 156420 156430 156440 156470 156490 156520 156540 156550 156580 156620 156640 156650 156700 156740 156800 156820 156850 156870 156880 156940 157000 157050 157070 157130 157150 157170 157180 157240 157290 157300 157330 157340 157350 157370 157390 157420 157470 157480 157490 157500 157520 157540 157570 157580 157640 157670 157690 157700 157730 157740 157780 157830 157880 157890 157930 157950 157980 158000 158020 158040 158050 158070 158080 158130 158170 158180 158200 158230 158280 158320 158330 158370 158430 158470 158480 158500 158550 158580 158590 158630 158650 158780 158820 158880 158890 158900 158930 158940 158970 158990 159020 159030 159070 159080 159090 159130 159140 159170 159190 159200 159220 159230 159240 159250 159270 159280 159290 159300 159340 159350 159400 159430 159450 159480 159490 159530 159540 159570 159580 159590 159600 159620 159630 159650 159670 159680 159690 159700 159730 159770 159780 159790 159800 159810 159830 159850 159860 159880 159890 159900 159930 159940 159950 159990 160000 160010 160030 160050 160060 160090 160110 160130 160140 160160 160180 160200 160210 160230 160240 160250 160260 160290 160300 160310 160330 160340 160350 160360 160380 160390 160400 160410 160430 160440 160460 160480 160490 160500 160510 160540 160550 160560 160580 160640 160650 160660 160680 160690 160700 160710 160730 160760 160780 160790 160810 160830 160860 160880 160890 160900 160910 160950 160960 160990 161000 161010 161030 161040 161050 161060 161080 161090 161100 161110 161130 161140 161160 161180 161210 161230 161240 161250 161260 161290 161330 161340 161350 161360 161380 161390 161400 161440 161450 161460 161480 161490 161510 161530 161550 161560 161580 161590 161600 161610 161640 161660 161680 161690 161710 161730 161740 161760 161780 161790 161800 161810 161830 161840 161850 161860 161880 161890 161900 161930 161940 161950 161960 161990 162000 162010 162030 162050 162060 162080 162090 162100 162110 162130 162140 162150 162160 162180 162190 162200 162230 162240 162260 162280 162290 162300 162310 162330 162340 162350 162360 162380 162390 162400 162410 162430 162440 162450 162480 162490 162500 162550 162560 162580 162590 162600 162630 162640 162660 162680 162690 162700 162710 162730 162750 162760 162780 162790 162810 162830 162850 162860 162880 162890 162900 162910 162930 162940 162950 162960 162980 162990 163000 163010 163030 163050 163060 163090 163110 163130 163140 163160 163180 163190 163200 163210 163230 163240 163250 163260 163280 163290 163300 163310 163330 163340 163350 163360 163390 163400 163410 163450 163460 163480 163490 163530 163550 163560 163580 163590 163610 163630 163640 163650 163660 163680 163690 163700 163730 163740 163750 163780 163790 163800 163810 163830 163840 163860 163880 163890 163900 163930 163940 163950 163960 163980 164000 164010 164040 164050 164060 164080 164090 164100 164110 164130 164140 164150 164180 164190 164210 164230 164250 164290 164300 164310 164330 164340 164350 164380 164390 164410 164430 164440 164450 164460 164480 164530 164540 164550 164560 164580 164610 164630 164640 164650 164660 164680 164690 164710 164730 164740 164750 164760 164780 164800 164830 164860 164880 164890 164900 164940 164990 165000 165010 165050 165060 165080 165110 165130 165180 165190 165240 165250 165290 165310 165320 165340 165360 165390 165400 165410 165420 165440 165450 165460 165470 165490 165510 165520 165540 165550 165560 165590 165600 165610 165620 165640 165650 165670 165690 165700 165720 165750 165760 165800 165820 165850 165860 165870 165910 165940 165950 165960 165990 166000 166010 166050 166070 166120 166150 166160 166190 166200 166210 166250 166290 166300 166340 166350 166360 166400 166420 166440 166460 166500 166520 166550 166620 166640 166660 166670 166690 166710 166720 166740 166750 166760 166770 166800 166810 166840 166850 166890 166900 166940 166950 166960 166970 167000 167010 167050 167070 167090 167120 167200 167210 167240 167270 167290 167310 167340 167390 167400 167440 167450 167500 167510 167520 167550 167570 167590 167610 167640 167650 167660 167690 167700 167710 167720 167740 167750 167790 167800 167870 167890 167900 167910 167920 167960 167990 168010 168020 168040 168050 168060 168090 168110 168120 168150 168160 168210 168220 168250 168260 168300 168310 168320 168340 168350 168370 168410 168440 168450 168460 168470 168520 168550 168560 168590 168640 168650 168660 168710 168720 168750 168770 168790 168800 168810 168820 168840 168850 168860 168870 168910 168940 168950 168960 168970 168990 169000 169050 169070 169100 169120 169150 169160 169170 169190 169210 169240 169260 169270 169290 169360 169370 169400 169410 169450 169460 169470 169540 169550 169560 169590 169600 169610 169640 169690 169710 169720 169740 169750 169820 169840 169850 169860 169870 169890 170000 170010 170020 170040 170050 170140 170150 170160 170170 170190 170210 170300 170310 170320 170340 170350 170360 170410 170450 170460 170470 170490 170590 170600 170620 170670 170690 170720 170750 170760 170800 170810 170850 170880 170900 170910 170920 170930 170950 170960 170970 171050 171080 171130 171200 171210 171230 171280 171350 171360 171370 171410 171500 171510 171520 171530 171550 171570 171650 171660 171680 171800 171810 171820 171930 171950 171960 171970 172000 172010 172020 172050 172060 172070 172080 172100 172120 172130 172150 172170 172180 172200 172210 172220 172230 172260 172280 172330 172350 172360 172380 172420 172450 172460 172470 172480 172510 172520 172530 172560 172570 172600 172610 172620 172630 172650 172660 172670 172680 172700 172710 172750 172770 172780 172800 172810 172820 172850 172870 172880 172900 172910 172930 172960 172980 173020 173030 173060 173070 173080 173100 173110 173120 173160 173170 173200 173210 173220 173260 173280 173300 173310 173320 173350 173360 173370 173420 173430 173470 173480 173530 173550 173560 173570 173580 173630 173650 173670 173680 173710 173720 173730 173750 173760 173770 173780 173800 173820 173830 173850 173860 173870 173880 173900 173910 173920 173960 173970 173980 174000 174010 174030 174050 174060 174070 174080 174100 174110 174120 174130 174160 174170 174180 174210 174220 174230 174260 174270 174280 174310 174320 174350 174380 174400 174410 174430 174450 174460 174510 174520 174530 174550 174560 174570 174580 174610 174630 174650 174670 174700 174710 174720 174750 174760 174780 174800 174810 174830 174860 174870 174880 174910 174920 174930 174960 174970 175010 175020 175030 175050 175060 175070 175100 175110 175120 175130 175160 175170 175180 175200 175210 175220 175260 175270 175280 175300 175310 175330 175350 175360 175380 175400 175410 175430 175470 175480 175500 175510 175520 175530 175550 175560 175580 175610 175620 175630 175650 175660 175680 175710 175720 175730 175750 175760 175810 175820 175830 175850 175860 175870 175880 175900 175910 175920 175930 175950 175960 175980 176000 176010 176020 176030 176050 176060 176070 176080 176100 176110 176120 176150 176170 176180 176200 176210 176230 176250 176260 176270 176300 176310 176340 176370 176390 176420 176430 176460 176470 176480 176490 176520 176530 176560 176570 176580 176670 176710 176720 176730 176740 176770 176790 176830 176840 176870 176890 176910 176960 177010 177020 177070 177090 177120 177130 177140 177170 177230 177290 177320 177330 177360 177370 177390 177410 177430 177440 177480 177510 177520 177530 177540 177560 177590 177610 177640 177670 177720 177730 177770 177810 177820 177840 177860 177870 177890 177910 177920 177970 178010 178020 178030 178040 178070 178080 178090 178110 178130 178160 178170 178180 178190 178220 178230 178240 178260 178280 178290 178320 178360 178370 178410 178430 178440 178480 178490 178510 178530 178560 178570 178580 178590 178630 178670 178680 178690 178720 178730 178760 178780 178810 178840 178860 178880 178910 178920 178930 178960 178980 178990 179010 179020 179030 179040 179090 179110 179120 179170 179190 179210 179230 179270 179280 179330 179340 179370 179380 179390 179410 179420 179470 179480 179490 179510 179540 179580 179590 179620 179630 179640 179670 179710 179720 179740 179760 179780 179790 179830 179860 179880 179890 179910 179930 179960 179970 179980 179990 180010 180030 180040 180060 180080 180090 180120 180130 180160 180170 180180 180190 180210 180220 180270 180280 180340 180360 180370 180390 180410 180440 180460 180470 180480 180510 180520 180540 180590 180630 180670 180680 180690 180740 180760 180780 180820 180840 180860 180870 180890 180910 180930 180960 180980 180990 181010 181040 181090 181110 181120 181170 181180 181210 181220 181230 181240 181270 181280 181310 181330 181360 181370 181380 181410 181420 181430 181460 181470 181480 181490 181530 181560 181570 181590 181610 181620 181630 181640 181660 181680 181690 181740 181770 181780 181790 181810 181840 181870 181880 181890 181900 181920 181950 181970 181980 181990 182030 182080 182100 182130 182140 182170 182180 182200 182220 182230 182270 182280 182320 182340 182350 182370 182380 182390 182400 182420 182430 182440 182450 182470 182480 182500 182530 182540 182550 182570 182600 182620 182630 182670 182680 182690 182730 182780 182790 182850 182880 182890 182900 182950 182980 183050 183080 183090 183100 183120 183130 183140 183190 183200 183220 183230 183240 183290 183300 183320 183370 183400 183420 183430 183440 183470 183480 183500 183520 183530 183550 183580 183620 183640 183680 183720 183730 183740 183750 183790 183820 183830 183890 183920 183980 184090 184120 184130 184180 184190 184200 184220 184240 184290 184380 184400 184440 184480 184520 184620 184630 184650 184700 184730 184740 184820 184880 184890 184900 184930 184940 184990 185030 185070 185080 185090 185130 185140 185180 185220 185240 185300 185350 185380 185390 185420 185470 185480 185640 185670 185700 185740 185800 185830 185850 185870 185930 185940 185970 186080 186130 186190 186300 186350 186430 186450 186480 186550 186570 186680 186790 186800 186870 186920 186930 187000 187020 187030 187040 187050 187070 187080 187130 187140 187150 187180 187190 187200 187220 187240 187290 187330 187340 187350 187380 187410 187440 187450 187510 187530 187540 187560 187580 187610 187630 187640 187650 187660 187690 187730 187790 187810 187840 187850 187880 187890 187950 187960 187980 188000 188030 188050 188130 188160 188190 188280 188290 188310 188330 188360 188380 188390 188410 188440 188450 188460 188530 188540 188550 188560 188580 188590 188600 188610 188640 188650 188680 188690 188700 188710 188740 188760 188780 188790 188800 188830 188840 188850 188860 188880 188890 188950 188960 188980 188990 189010 189030 189080 189090 189130 189150 189160 189190 189200 189210 189250 189260 189280 189290 189330 189340 189350 189390 189400 189410 189430 189460 189480 189490 189500 189510 189540 189550 189600 189610 189630 189640 189650 189680 189690 189700 189710 189730 189740 189750 189780 189790 189800 189810 189830 189840 189850 189860 189880 189890 189910 189930 189940 189950 189960 189980 190000 190010 190040 190060 190080 190090 190100 190130 190140 190150 190180 190190 190200 190210 190230 190240 190280 190300 190310 190340 190350 190360 190380 190400 190410 190430 190440 190460 190510 190530 190540 190550 190560 190590 190640 190650 190660 190680 190690 190700 190710 190760 190780 190810 190830 190840 190850 190880 190890 190900 190910 190940 190950 190960 190980 190990 191010 191060 191080 191100 191110 191140 191150 191210 191240 191250 191280 191290 191300 191340 191350 191360 191390 191400 191440 191450 191480 191500 191510 191530 191550 191560 191580 191630 191640 191660 191680 191710 191730 191750 191790 191840 191850 191880 191890 191930 191940 191960 191980 191990 192000 192010 192040 192050 192060 192080 192090 192100 192110 192140 192160 192200 192230 192240 192250 192260 192290 192300 192310 192340 192350 192360 192380 192400 192410 192450 192460 192490 192500 192510 192530 192540 192550 192590 192600 192610 192660 192680 192690 192710 192730 192750 192780 192790 192800 192830 192850 192860 192890 192900 192920 192940 192960 192970 192990 193020 193040 193060 193090 193120 193140 193150 193190 193200 193210 193220 193270 193290 193310 193340 193350 193360 193410 193420 193440 193460 193470 193520 193540 193560 193590 193620 193640 193650 193660 193720 193760 193770 193790 193800 193810 193840 193860 193890 193900 193910 193920 193940 193950 193970 194010 194020 194040 194050 194090 194100 194110 194140 194160 194190 194200 194240 194250 194300 194320 194340 194370 194400 194410 194440 194460 194470 194510 194520 194540 194560 194570 194640 194650 194660 194670 194690 194710 194720 194770 194790 194800 194810 194820 194850 194860 194920 194940 194950 194990 195000 195050 195070 195100 195110 195150 195170 195210 195220 195260 195270 195290 195310 195370 195440 195450 195460 195510 195540 195550 195570 195620 195640 195660 195670 195690 195710 195720 195760 195810 195820 195840 195860 195900 195910 195950 195960 195990 196010 196020 196040 196050 196120 196140 196190 196200 196210 196260 196270 196290 196300 196310 196320 196350 196360 196390 196420 196450 196460 196470 196490 196540 196570 196590 196600 196610 196660 196740 196750 196790 196800 196840 196870 196890 196910 196940 196990 197020 197040 197050 197060 197070 197100 197110 197140 197150 197160 197200 197210 197250 197270 197310 197320 197340 197360 197370 197390 197490 197500 197520 197540 197550 197560 197590 197620 197640 197650 197670 197690 197710 197750 197760 197800 197860 197890 197910 197920 197940 197950 197960 197970 197990 198000 198010 198050 198060 198070 198090 198100 198110 198120 198140 198150 198160 198200 198220 198250 198260 198290 198300 198310 198320 198350 198360 198370 198400 198420 198430 198460 198470 198520 198530 198550 198560 198570 198580 198620 198630 198650 198680 198700 198710 198750 198800 198860 198880 198910 198920 198950 198970 198980 199000 199010 199050 199070 199080 199100 199110 199120 199150 199160 199180 199200 199220 199230 199250 199260 199270 199310 199320 199330 199350 199370 199380 199410 199420 199430 199450 199460 199480 199500 199510 199520 199530 199570 199580 199600 199620 199660 199670 199680 199700 199720 199750 199760 199770 199780 199800 199810 199830 199860 199880 199900 199950 199960 199970 200000 200010 200020 200030 200050 200070 200080 200100 200110 200120 200170 200180 200200 200210 200220 200230 200260 200310 200320 200330 200350 200360 200370 200400 200410 200450 200460 200470 200480 200510 200610 200620 200630 200660 200700 200730 200760 200770 200800 200810 200820 200830 200870 200910 200930 200950 200960 200970 201000 201050 201060 201070 201100 201110 201130 201150 201200 201220 201230 201260 201280 201300 201310 201320 201330 201350 201360 201370 201420 201430 201450 201460 201470 201520 201530 201550 201560 201570 201580 201600 201610 201630 201650 201660 201670 201680 201700 201710 201720 201730 201750 201760 201780 201800 201810 201830 201850 201870 201880 201930 201950 201960 201970 202000 202010 202030 202050 202080 202100 202110 202120 202130 202150 202160 202220 202230 202250 202260 202270 202310 202370 202400 202420 202430 202460 202470 202510 202550 202560 202600 202630 202650 202680 202700 202720 202750 202770 202780 202810 202820 202850 202880 202900 202910 202930 203000 203030 203070 203080 203100 203120 203160 203210 203220 203250 203280 203310 203320 203330 203360 203410 203450 203460 203500 203530 203570 203580 203600 203630 203660 203710 203720 203730 203750 203760 203780 203800 203920 203940 203970 204040 204060 204090 204180 204210 204230 204260 204270 204330 204370 204390 204410 204430 204460 204490 204510 204520 204530 204560 204630 204640 204670 204720 204730 204770 204780 204790 204820 204830 204860 204880 204910 204920 204990 205010 205060 205090 205130 205140 205170 205230 205240 205260 205270 205320 205390 205410 205430 205440 205470 205480 205490 205530 205580 205590 205620 205640 205680 205690 205730 205740 205810 205830 205860 205870 205880 205960 205970 206030 206070 206110 206130 206140 206170 206190 206220 206260 206270 206290 206320 206330 206360 206420 206440 206490 206520 206530 206570 206580 206590 206610 206630 206660 206680 206690 206740 206770 206790 206840 206910 206930 206940 207070 207080 207120 207130 207170 207190 207210 207260 207270 207280 207290 207330 207360 207420 207430 207440 207470 207480 207640 207670 207710 207730 207740 207760 207770 207780 207790 207880 207890 207930 207990 208010 208020 208030 208060 208080 208110 208140 208160 208190 208230 208280 208290 208370 208390 208430 208440 208520 208530 208540 208570 208610 208620 208670 208680 208690 208760 208820 208860 208910 208970 208980 208990 209010 209030 209040 209060 209130 209140 209160 209170 209180 209210 209220 209230 209240 209260 209270 209280 209290 209310 209320 209380 209390 209400 209430 209440 209470 209480 209500 209520 209550 209590 209600 209620 209630 209640 209650 209700 209720 209740 209770 209780 209800 209820 209840 209850 209880 209900 209920 209940 209970 209990 210000 210030 210040 210050 210070 210080 210090 210100 210120 210150 210170 210240 210250 210270 210280 210290 210320 210330 210340 210350 210430 210450 210480 210490 210500 210520 210530 210540 210550 210570 210590 210600 210620 210630 210670 210680 210700 210720 210730 210740 210790 210800 210820 210840 210850 210870 210890 210900 210920 210940 210990 211000 211020 211040 211050 211070 211080 211090 211100 211120 211130 211140 211150 211170 211190 211200 211220 211230 211240 211280 211290 211300 211330 211340 211350 211380 211390 211400 211420 211430 211450 211490 211500 211530 211540 211550 211570 211580 211590 211600 211620 211630 211640 211650 211690 211700 211740 211770 211780 211790 211800 211820 211830 211870 211890 211900 211920 211930 211940 211950 211970 211990 212000 212030 212040 212050 212090 212120 212130 212150 212170 212180 212200 212220 212240 212250 212280 212290 212300 212350 212370 212390 212400 212420 212440 212450 212470 212480 212490 212540 212570 212590 212600 212620 212630 212640 212650 212690 212700 212720 212730 212740 212770 212780 212790 212830 212850 212870 212880 212890 212900 212930 212940 212950 213000 213020 213030 213050 213070 213080 213100 213120 213140 213150 213190 213200 213220 213230 213240 213270 213340 213350 213370 213380 213400 213420 213440 213450 213470 213480 213490 213520 213530 213540 213570 213580 213590 213600 213640 213650 213670 213680 213700 213720 213740 213770 213780 213830 213840 213870 213880 213930 213940 213970 213980 214030 214040 214050 214070 214080 214090 214100 214120 214140 214170 214180 214220 214240 214250 214280 214290 214300 214330 214340 214350 214370 214390 214400 214420 214430 214450 214470 214480 214490 214500 214530 214570 214580 214590 214600 214620 214640 214690 214700 214720 214730 214740 214750 214770 214780 214830 214850 214870 214890 214910 214930 214940 214950 214960 214980 214990 215000 215010 215050 215090 215100 215130 215150 215160 215190 215200 215210 215230 215250 215260 215280 215290 215300 215340 215360 215380 215410 215450 215460 215480 215500 215510 215530 215540 215550 215560 215590 215610 215630 215640 215650 215680 215690 215710 215730 215740 215750 215760 215790 215800 215840 215850 215860 215880 215900 215910 215930 215940 215950 215990 216000 216050 216080 216090 216100 216110 216130 216140 216150 216200 216230 216280 216340 216500 216680 216740 216760 216790 216890 216910 216930 216950 216960 216980 216990 217000 217040 217050 217080 217090 217100 217110 217140 217160 217190 217200 217230 217260 217280 217310 217330 217380 217390 217460 217490 217500 217510 217530 217540 217560 217600 217660 217750 217790 217840 217860 217890 217990 218010 218050 218080 218090 218100 218130 218140 218150 218160 218180 218190 218200 218230 218240 218250 218290 218300 218340 218380 218390 218490 218590 218600 218630 218660 218810 218840 218850 218860 218900 218980 218990 219050 219060 219090 219100 219130 219160 219180 219190 219200 219210 219230 219240 219250 219260 219330 219350 219360 219380 219530 219550 219590 219600 219610 219640 219650 219680 219740 219790 219800 219810 219840 219860 220000 220010 220050 220060 220080 220090 220130 220140 220150 220160 220180 220190 220200 220230 220240 220250 220260 220280 220290 220300 220330 220350 220380 220420 220460 220470 220500 220510 220520 220550 220570 220590 220620 220650 220670 220690 220700 220740 220750 220770 220800 220850 220860 220870 220890 220900 220910 220920 220970 221000 221010 221020 221040 221050 221060 221100 221110 221160 221240 221250 221270 221310 221320 221350 221360 221370 221390 221400 221410 221440 221450 221460 221470 221500 221540 221550 221560 221590 221610 221620 221640 221650 221690 221720 221740 221750 221760 221770 221790 221800 221820 221850 221860 221870 221910 221920 222000 222010 222020 222040 222050 222060 222090 222110 222150 222170 222190 222200 222210 222220 222240 222250 222260 222290 222300 222310 222360 222370 222390 222420 222440 222470 222490 222500 222510 222540 222550 222570 222590 222600 222610 222620 222640 222650 222660 222690 222700 222710 222740 222760 222770 222790 222800 222810 222840 222850 222860 222870 222890 222910 222940 222960 222970 223010 223020 223070 223090 223100 223110 223120 223140 223160 223210 223220 223260 223270 223290 223340 223360 223370 223390 223400 223420 223460 223470 223490 223500 223510 223560 223590 223610 223640 223650 223660 223670 223710 223740 223750 223770 223800 223820 223850 223860 223890 223910 223920 223940 223950 223970 224010 224020 224050 224060 224070 224100 224110 224120 224200 224210 224220 224250 224270 224300 224310 224320 224340 224360 224400 224410 224460 224470 224490 224500 224510 224550 224560 224570 224610 224650 224660 224670 224690 224700 224710 224740 224750 224760 224770 224800 224810 224820 224860 224890 224900 224920 224940 224950 224960 224970 225000 225010 225020 225040 225050 225060 225070 225100 225110 225120 225160 225190 225210 225250 225260 225290 225300 225320 225340 225350 225360 225370 225390 225400 225410 225420 225440 225450 225460 225470 225500 225510 225540 225550 225560 225570 225600 225620 225700 225710 225720 225740 225770 225790 225800 225810 225840 225850 225860 225890 225910 225920 225930 225950 225960 225970 225980 226010 226050 226060 226070 226080 226100 226110 226120 226130 226150 226170 226180 226200 226220 226250 226270 226300 226310 226320 226330 226350 226360 226370 226400 226420 226430 226450 226470 226480 226500 226550 226560 226570 226580 226600 226610 226620 226630 226660 226700 226720 226750 226760 226770 226800 226810 226820 226830 226860 226870 226880 226910 226930 226950 226960 226980 227000 227010 227020 227030 227050 227060 227070 227110 227120 227150 227160 227170 227180 227200 227220 227230 227250 227260 227270 227300 227320 227330 227360 227380 227400 227410 227450 227460 227470 227500 227510 227530 227550 227570 227580 227600 227610 227620 227630 227650 227660 227680 227750 227770 227780 227820 227830 227860 227870 227880 227900 227920 227930 227950 227980 228000 228020 228070 228080 228100 228120 228130 228150 228180 228200 228210 228230 228250 228260 228270 228280 228320 228330 228350 228360 228370 228380 228400 228410 228420 228430 228450 228460 228470 228480 228500 228520 228550 228570 228580 228600 228610 228620 228650 228660 228670 228700 228720 228770 228780 228810 228820 228850 228860 228870 228880 228900 228910 228920 228950 228970 229000 229010 229020 229030 229060 229070 229080 229100 229110 229120 229130 229150 229160 229180 229200 229220 229230 229250 229260 229270 229280 229310 229320 229330 229350 229360 229370 229400 229410 229430 229470 229500 229550 229560 229570 229580 229610 229650 229660 229680 229700 229750 229760 229770 229780 229810 229850 229860 229870 229900 229910 229950 229970 229980 230000 230010 230030 230050 230080 230110 230120 230130 230150 230160 230170 230180 230200 230210 230260 230270 230280 230330 230370 230380 230410 230450 230460 230470 230500 230510 230520 230530 230560 230570 230580 230600 230630 230650 230660 230670 230710 230720 230730 230750 230770 230780 230820 230830 230860 230870 230880 230900 230910 230920 230930 230960 230970 231000 231010 231020 231050 231060 231080 231100 231110 231120 231150 231170 231200 231210 231230 231250 231260 231310 231350 231360 231370 231380 231410 231430 231440 231460 231470 231510 231520 231530 231560 231580 231590 231610 231630 231660 231670 231680 231710 231720 231740 231760 231790 231810 231820 231830 231860 231880 231890 231910 231930 231940 231960 231970 231980 231990 232010 232020 232030 232040 232060 232080 232090 232110 232130 232140 232180 232210 232220 232260 232270 232280 232290 232310 232320 232330 232340 232380 232390 232460 232480 232490 232510 232520 232530 232540 232570 232580 232590 232630 232660 232670 232680 232690 232710 232740 232760 232770 232780 232790 232820 232830 232840 232860 232870 232880 232890 232910 232920 232930 232940 232980 233010 233030 233040 233060 233070 233080 233090 233110 233160 233170 233180 233190 233210 233220 233260 233280 233290 233310 233320 233340 233360 233380 233390 233410 233420 233430 233440 233460 233470 233480 233490 233520 233530 233540 233560 233570 233580 233610 233630 233660 233710 233720 233740 233760 233770 233810 233840 233860 233870 233880 233910 233920 233930 233940 233960 233980 234010 234030 234060 234070 234080 234110 234120 234130 234140 234170 234190 234210 234270 234280 234290 234310 234320 234330 234340 234360 234390 234410 234420 234430 234440 234460 234470 234490 234510 234530 234540 234560 234570 234590 234610 234620 234640 234660 234670 234680 234690 234720 234760 234770 234810 234820 234830 234840 234860 234870 234880 234910 234920 234940 234980 234990 235010 235020 235060 235070 235110 235120 235130 235140 235170 235180 235210 235220 235230 235240 235280 235290 235320 235330 235340 235360 235370 235380 235390 235410 235420 235430 235440 235480 235510 235520 235540 235570 235580 235610 235640 235660 235670 235690 235760 235770 235810 235820 235880 235910 235940 235960 235970 235980 236060 236070 236080 236130 236140 236160 236170 236180 236190 236210 236220 236230 236240 236260 236290 236310 236320 236330 236360 236370 236420 236430 236470 236480 236510 236520 236540 236560 236570 236590 236610 236620 236640 236670 236680 236690 236730 236740 236760 236820 236830 236840 236860 236870 236880 236890 236920 236930 236940 236970 236980 237030 237070 237120 237130 237150 237180 237200 237240 237270 237280 237290 237320 237330 237370 237390 237400 237440 237450 237480 237500 237520 237530 237540 237570 237580 237620 237640 237650 237670 237680 237700 237720 237740 237750 237770 237790 237820 237830 237850 237870 237890 237900 237920 237930 237940 237990 238020 238050 238070 238080 238090 238120 238140 238150 238170 238180 238190 238200 238230 238270 238280 238300 238320 238340 238350 238370 238380 238400 238430 238470 238480 238490 238500 238540 238570 238580 238590 238600 238680 238700 238730 238740 238770 238780 238790 238800 238820 238830 238840 238880 238890 238900 238920 238930 238970 238980 239000 239030 239080 239090 239120 239140 239150 239180 239190 239200 239220 239250 239270 239280 239290 239320 239340 239350 239370 239390 239420 239430 239440 239450 239480 239500 239530 239540 239550 239580 239590 239600 239630 239650 239670 239700 239720 239730 239740 239750 239770 239790 239800 239820 239840 239850 239880 239890 239920 239940 239950 239970 239980 240000 240020 240030 240040 240050 240080 240090 240100 240120 240130 240150 240170 240180 240200 240220 240230 240240 240280 240290 240300 240320 240330 240340 240350 240370 240400 240420 240480 240490 240520 240530 240540 240550 240570 240590 240600 240620 240630 240650 240690 240700 240750 240770 240790 240800 240820 240830 240850 240870 240890 240920 240930 240950 240970 240990 241020 241030 241050 241090 241100 241120 241130 241140 241180 241220 241230 241240 241250 241270 241290 241300 241330 241340 241350 241400 241420 241430 241440 241470 241480 241500 241520 241530 241540 241570 241580 241600 241620 241640 241650 241670 241680 241690 241700 241720 241770 241780 241800 241830 241850 241890 241920 241930 241940 241950 241970 241990 242040 242050 242070 242080 242090 242100 242120 242130 242140 242170 242180 242190 242200 242230 242240 242250 242280 242290 242300 242320 242330 242340 242350 242370 242390 242420 242490 242500 242510 242530 242540 242550 242580 242590 242600 242610 242630 242650 242680 242690 242710 242740 242750 242760 242780 242790 242800 242810 242830 242840 242850 242880 242910 242930 242980 242990 243030 243040 243090 243100 243150 243190 243230 243250 243260 243330 243340 243350 243360 243400 243410 243430 243440 243450 243490 243500 243530 243540 243560 243590 243650 243700 243740 243750 243760 243780 243790 243800 243840 243880 243910 243930 243960 243980 243990 244010 244030 244040 244060 244080 244090 244100 244140 244180 244190 244200 244210 244230 244240 244280 244290 244300 244330 244350 244400 244410 244440 244450 244460 244480 244490 244500 244510 244530 244550 244560 244580 244630 244640 244650 244710 244750 244760 244780 244790 244810 244830 244840 244850 244860 244900 244910 244930 244960 244990 245000 245010 245030 245040 245090 245100 245160 245180 245210 245230 245290 245300 245310 245330 245340 245360 245380 245410 245440 245480 245510 245540 245550 245560 245600 245610 245630 245650 245660 245690 245710 245730 245740 245750 245780 245790 245800 245810 245830 245850 245860 245880 245890 245900 245910 245930 245940 245950 245980 245990 246000 246010 246030 246040 246060 246110 246130 246150 246160 246180 246190 246200 246210 246240 246250 246260 246280 246290 246300 246310 246330 246350 246380 246400 246410 246430 246440 246450 246500 246510 246540 246550 246560 246590 246610 246630 246650 246680 246690 246710 246740 246750 246760 246800 246840 246860 246880 246890 246910 246940 246960 246980 246990 247000 247040 247050 247080 247090 247110 247130 247150 247160 247180 247190 247200 247210 247230 247240 247260 247280 247290 247300 247330 247340 247350 247360 247380 247390 247400 247430 247440 247450 247460 247500 247510 247530 247550 247560 247580 247590 247600 247610 247630 247660 247680 247690 247700 247740 247750 247760 247780 247790 247800 247810 247830 247840 247850 247860 247890 247910 247930 247950 247960 247990 248010 248020 248060 248100 248110 248120 248150 248170 248200 248210 248250 248260 248270 248290 248310 248320 248340 248350 248360 248400 248410 248420 248440 248450 248460 248470 248490 248500 248520 248540 248550 248560 248610 248640 248650 248660 248670 248690 248710 248720 248770 248790 248800 248820 248840 248850 248860 248890 248900 248940 248950 248960 248970 248990 249020 249050 249070 249090 249100 249110 249150 249160 249170 249220 249260 249300 249340 249350 249360 249370 249400 249420 249440 249450 249460 249470 249510 249520 249540 249560 249570 249590 249600 249620 249640 249650 249660 249670 249690 249700 249710 249740 249760 249790 249800 249810 249820 249850 249860 249870 249890 249900 249920 249940 249950 249960 249970 249990 250000 250020 250050 250070 250090 250100 250110 250120 250140 250150 250160 250210 250220 250240 250250 250270 250290 250300 250320 250340 250350 250390 250400 250410 250420 250440 250450 250460 250470 250500 250510 250540 250550 250560 250570 250600 250640 250660 250670 250690 250710 250720 250750 250760 250770 250800 250840 250850 250860 250870 250900 250910 250920 250940 250960 250970 250990 251040 251050 251060 251090 251100 251110 251120 251160 251170 251190 251220 251240 251260 251270 251290 251300 251310 251320 251340 251350 251410 251420 251440 251450 251460 251490 251500 251520 251540 251550 251560 251570 251590 251610 251620 251640 251660 251670 251710 251720 251740 251760 251790 251800 251810 251820 251840 251850 251860 251870 251890 251900 251920 251950 251960 252000 252010 252040 252050 252060 252070 252090 252100 252120 252150 252160 252170 252200 252220 252240 252250 252260 252270 252290 252300 252310 252320 252340 252370 252390 252400 252410 252420 252450 252470 252500 252520 252540 252560 252570 252590 252620 252650 252660 252670 252700 252710 252750 252760 252790 252800 252850 252860 252890 252900 252910 252920 252940 252960 252970 252990 253000 253020 253040 253050 253060 253090 253120 253150 253190 253200 253220 253250 253260 253290 253310 253320 253340 253360 253420 253440 253450 253460 253470 253480 253500 253510 253530 253560 253570 253610 253620 253660 253680 253710 253720 253760 253770 253780 253800 253810 253830 253850 253860 253880 253920 253950 253960 253980 254000 254010 254030 254050 254100 254120 254130 254160 254180 254210 254220 254270 254280 254300 254310 254320 254360 254380 254400 254410 254420 254430 254460 254470 254480 254510 254530 254550 254570 254580 254600 254620 254630 254650 254680 254700 254730 254750 254770 254780 254800 254820 254830 254850 254860 254870 254880 254910 254920 254930 255010 255020 255030 255070 255100 255110 255130 255160 255170 255180 255200 255210 255220 255230 255280 255300 255310 255320 255350 255380 255400 255420 255430 255470 255480 255500 255520 255530 255550 255560 255580 255610 255620 255630 255650 255660 255670 255700 255720 255770 255800 255810 255850 255870 255900 255910 255920 255950 255960 255970 256000 256020 256050 256070 256080 256100 256110 256120 256130 256150 256160 256180 256200 256210 256260 256270 256300 256310 256330 256350 256360 256380 256400 256430 256450 256460 256480 256500 256530 256550 256570 256580 256600 256610 256630 256650 256660 256670 256700 256710 256720 256730 256750 256760 256770 256780 256800 256850 256860 256870 256880 256900 256910 256920 256950 256960 257000 257010 257020 257060 257080 257100 257120 257130 257150 257160 257210 257220 257230 257250 257260 257280 257300 257310 257320 257370 257380 257400 257410 257420 257450 257470 257480 257500 257520 257570 257580 257620 257630 257650 257660 257670 257710 257730 257750 257760 257780 257800 257810 257830 257850 257860 257900 257910 257930 257950 257960 257970 258000 258010 258030 258050 258080 258100 258110 258120 258130 258150 258160 258180 258200 258220 258250 258270 258310 258320 258360 258380 258420 258450 258460 258480 258520 258530 258550 258570 258580 258600 258620 258630 258660 258670 258680 258700 258760 258780 258800 258810 258820 258850 258860 258870 258910 258920 258930 258960 258980 258990 259020 259040 259060 259080 259110 259120 259140 259160 259170 259180 259220 259230 259240 259260 259270 259290 259320 259330 259340 259390 259420 259430 259440 259460 259470 259490 259540 259570 259580 259610 259620 259640 259660 259680 259690 259720 259730 259760 259770 259780 259790 259830 259840 259860 259890 259910 259930 259940 259980 259990 260030 260060 260070 260080 260110 260120 260140 260160 260170 260180 260260 260280 260310 260320 260330 260340 260360 260370 260380 260430 260460 260480 260490 260510 260560 260570 260580 260590 260630 260640 260660 260670 260680 260690 260740 260770 260780 260820 260830 260840 260870 260880 260890 260910 260920 260930 260940 260960 261010 261020 261040 261060 261070 261080 261090 261120 261130 261140 261170 261180 261210 261230 261240 261260 261270 261320 261340 261360 261370 261380 261420 261430 261470 261490 261520 261530 261560 261570 261610 261630 261640 261660 261690 261720 261770 261780 261790 261810 261840 261860 261880 261890 261910 261970 261980 262010 262020 262030 262080 262090 262120 262130 262140 262160 262170 262230 262240 262260 262270 262290 262310 262320 262330 262370 262380 262390 262410 262460 262470 262480 262510 262530 262560 262590 262610 262620 262640 262690 262710 262740 262760 262770 262780 262820 262830 262840 262860 262870 262890 262910 262980 263020 263030 263110 263130 263160 263170 263180 263230 263260 263270 263280 263290 263330 263340 263370 263390 263440 263460 263470 263480 263490 263520 263570 263590 263620 263640 263660 263670 263720 263740 263760 263770 263780 263810 263860 263880 263890 263930 263940 263960 263970 263990 264010 264020 264060 264080 264110 264120 264140 264160 264170 264180 264240 264260 264270 264330 264380 264410 264420 264440 264450 264470 264480 264490 264500 264540 264550 264570 264590 264600 264620 264640 264670 264700 264740 264750 264780 264790 264820 264830 264880 264890 264900 264920 264940 264950 264990 265020 265030 265040 265050 265070 265080 265100 265120 265130 265150 265170 265180 265190 265200 265230 265240 265270 265290 265300 265350 265370 265420 265430 265440 265450 265470 265480 265500 265520 265550 265580 265620 265630 265640 265650 265670 265680 265740 265750 265770 265780 265820 265830 265850 265870 265900 265940 265970 265980 266000 266020 266030 266070 266080 266130 266140 266150 266170 266230 266270 266280 266290 266320 266350 266380 266390 266400 266420 266430 266440 266450 266470 266490 266500 266530 266550 266570 266590 266620 266630 266640 266650 266680 266700 266730 266750 266780 266800 266820 266920 266940 266970 266980 266990 267000 267020 267090 267100 267140 267150 267170 267180 267190 267200 267240 267250 267290 267300 267330 267370 267380 267390 267400 267420 267430 267440 267480 267490 267540 267550 267570 267580 267600 267630 267650 267670 267680 267720 267780 267790 267850 267870 267880 267890 267900 267920 267930 267990 268030 268050 268080 268090 268100 268120 268150 268170 268180 268190 268200 268220 268230 268240 268250 268280 268300 268350 268380 268400 268420 268480 268500 268530 268540 268580 268590 268600 268630 268640 268650 268670 268690 268720 268740 268780 268790 268800 268820 268840 268850 268890 268900 268950 268970 268990 269000 269040 269070 269100 269120 269140 269170 269180 269190 269230 269270 269280 269290 269320 269350 269370 269420 269440 269470 269520 269570 269590 269600 269620 269640 269720 269730 269740 269750 269770 269780 269790 269820 269830 269840 269880 269890 269920 269960 269980 269990 270040 270110 270140 270160 270190 270210 270230 270280 270290 270310 270380 270410 270440 270450 270490 270530 270560 270590 270610 270630 270640 270690 270700 270730 270740 270750 270780 270840 270890 270930 270950 270990 271050 271060 271100 271110 271140 271150 271160 271190 271200 271210 271250 271290 271350 271360 271380 271390 271410 271430 271440 271480 271490 271510 271530 271540 271560 271590 271610 271690 271700 271730 271780 271790 271810 271830 271850 271880 271900 271910 271930 271940 272030 272050 272060 272080 272100 272210 272230 272260 272310 272330 272360 272380 272450 272560 272630 272660 272740 272750 272790 272800 272880 272900 272990 273000 273040 273050 273090 273130 273140 273230 273240 273250 273280 273300 273340 273350 273380 273390 273440 273490 273540 273590 273600 273610 273630 273640 273680 273700 273710 273740 273790 273840 273850 273880 273890 273900 273930 273940 273990 274000 274030 274050 274090 274130 274140 274180 274190 274210 274240 274280 274290 274340 274350 274380 274390 274400 274410 274430 274450 274480 274490 274500 274510 274550 274590 274600 274660 274680 274690 274730 274750 274760 274790 274830 274840 274850 274880 274890 274910 274930 274940 274950 274960 274980 274990 275010 275030 275060 275080 275090 275100 275110 275190 275200 275230 275240 275250 275260 275310 275330 275340 275360 275400 275440 275450 275460 275490 275520 275550 275560 275590 275600 275640 275670 275700 275710 275720 275740 275760 275770 275790 275810 275820 275840 275850 275860 275870 275890 275900 275910 275940 275950 275970 275990 276010 276050 276070 276090 276120 276140 276170 276190 276200 276210 276250 276260 276290 276340 276370 276420 276500 276510 276520 276540 276560 276590 276610 276620 276650 276660 276670 276700 276710 276750 276790 276810 276820 276850 276860 276890 276920 276960 276970 276990 277000 277020 277040 277050 277090 277100 277110 277150 277160 277170 277190 277200 277210 277260 277300 277340 277360 277400 277410 277450 277460 277470 277500 277540 277560 277590 277600 277660 277690 277700 277740 277770 277790 277820 277850 277860 277890 277950 277960 278000 278010 278040 278050 278090 278100 278150 278160 278170 278210 278220 278240 278270 278290 278300 278310 278320 278340 278390 278440 278520 278540 278570 278600 278620 278640 278650 278660 278690 278750 278840 278860 278910 278920 278940 278950 278960 278990 279020 279050 279070 279110 279140 279150 279170 279200 279220 279240 279250 279300 279320 279340 279350 279390 279400 279420 279450 279490 279540 279550 279620 279640 279690 279710 279720 279740 279810 279820 279840 279850 279870 279900 279940 279950 279990 280020 280050 280060 280070 280090 280110 280120 280150 280190 280210 280240 280250 280260 280270 280290 280300 280310 280350 280360 280370 280390 280410 280420 280450 280460 280470 280510 280520 280550 280560 280570 280590 280610 280640 280650 280670 280700 280740 280750 280790 280800 280810 280840 280850 280870 280890 280910 280920 280970 280990 281000 281040 281060 281070 281080 281100 281110 281150 281200 281230 281250 281260 281270 281320 281350 281360 281370 281400 281420 281460 281480 281510 281570 281580 281610 281620 281660 281720 281730 281760 281770 281780 281800 281820 281830 281860 281870 281930 281950 281960 281980 282000 282010 282020 282030 282050 282060 282070 282080 282100 282120 282130 282150 282160 282180 282200 282210 282220 282230 282250 282260 282270 282300 282310 282330 282360 282380 282400 282420 282430 282450 282470 282480 282500 282510 282520 282550 282560 282570 282600 282610 282620 282630 282660 282670 282680 282710 282720 282730 282750 282760 282800 282810 282820 282830 282860 282880 282900 282910 282920 282930 282950 282960 282970 282980 283000 283010 283030 283050 283080 283100 283120 283130 283160 283170 283180 283200 283210 283260 283270 283310 283320 283330 283350 283370 283400 283410 283420 283460 283470 283520 283530 283560 283570 283580 283600 283620 283630 283680 283700 283720 283730 283750 283760 283770 283780 283800 283810 283830 283850 283870 283880 283900 283950 283970 283980 284020 284030 284060 284070 284080 284100 284110 284120 284200 284210 284230 284250 284260 284300 284330 284360 284370 284380 284410 284420 284430 284450 284460 284470 284500 284520 284530 284550 284560 284580 284620 284680 284710 284730 284750 284770 284780 284800 284810 284820 284830 284850 284860 284870 284880 284910 284950 284980 285000 285010 285030 285060 285070 285120 285130 285150 285160 285170 285200 285210 285250 285270 285280 285300 285350 285360 285380 285400 285410 285420 285450 285460 285470 285480 285510 285560 285580 285600 285650 285660 285680 285720 285730 285760 285770 285780 285820 285830 285870 285900 285910 285920 285930 285950 285970 286020 286030 286050 286070 286080 286100 286110 286160 286170 286180 286200 286220 286230 286250 286270 286280 286310 286330 286350 286370 286380 286450 286460 286480 286520 286540 286560 286580 286590 286620 286630 286640 286660 286670 286690 286730 286780 286790 286810 286830 286840 286860 286880 286920 286930 286940 286960 286970 286980 286990 287020 287040 287060 287080 287090 287120 287130 287160 287180 287190 287230 287240 287280 287330 287340 287370 287380 287390 287410 287420 287440 287460 287510 287530 287540 287580 287590 287630 287670 287680 287690 287720 287730 287740 287760 287780 287810 287820 287830 287840 287880 287890 287910 287980 287990 288010 288020 288030 288090 288120 288130 288140 288160 288170 288180 288190 288210 288220 288240 288260 288270 288280 288290 288330 288340 288380 288410 288420 288430 288440 288470 288480 288510 288520 288540 288570 288580 288590 288620 288630 288670 288710 288720 288730 288760 288770 288780 288820 288830 288860 288870 288880 288920 288930 288970 288990 289010 289020 289060 289080 289090 289130 289140 289180 289220 289280 289320 289330 289360 289370 289390 289420 289490 289510 289520 289560 289570 289590 289620 289660 289670 289680 289690 289710 289720 289740 289760 289770 289780 289790 289810 289820 289830 289880 289910 289920 289960 289980 290020 290060 290080 290130 290160 290190 290210 290220 290270 290280 290290 290340 290360 290370 290380 290430 290440 290480 290510 290520 290530 290540 290560 290570 290580 290610 290670 290680 290710 290720 290760 290790 290820 290830 290860 290870 290880 290890 290970 291010 291020 291030 291040 291060 291090 291110 291130 291140 291160 291170 291270 291310 291320 291370 291410 291420 291440 291460 291470 291480 291540 291570 291580 291640 291690 291710 291720 291730 291770 291810 291840 291860 291870 291880 291930 291940 291960 291980 292050 292090 292100 292140 292170 292200 292240 292280 292290 292320 292340 292350 292380 292400 292450 292470 292530 292570 292620 292690 292720 292750 292780 292800 292820 292840 292930 292940 293000 293020 293040 293050 293080 293100 293120 293190 293220 293270 293280 293300 293340 293350 293370 293420 293430 293450 293490 293520 293540 293600 293620 293640 293730 293750 293770 293780 293820 293830 293840 293850 293980 293990 294000 294050 294080 294130 294150 294170 294200 294220 294230 294280 294290 294300 294320 294340 294350 294430 294440 294450 294470 294490 294520 294650 294670 294690 294770 294830 294940 294950 294970 295040 295050 295140 295180 295270 295280 295290)) :ldur (quote ((5580 2010 560 2020 1920 5800 660 420 2870 460) (130 230 390 40 40 110 40 11170) (80 40 130 80) (110 100 30) (340) (40 700) (80 80) (1170 70) (170) (60 260 50) (390) (210 50) (70) (80 50 60) (60 40 370) (70) (30 80) (70) (400 840) (130) (70) (360) (90) (250 150 80 60 50) (120 120 80) (100) (50) (1390) (160) (110) (290) (140) (50) (150) (70) (760) (70) (260 100) (120 1830 100) (50) (870 140) (60) (130) (370 40) (170 120) (340 350 70) (60) (160) (40) (60 200 60) (1420) (490 40) (60) (70 70) (140 60) (80) (60) (840 60) (60) (570) (1260 80) (70 80) (60 130) (150) (40) (2270) (100 70) (1330) (50) (210 100) (190 60 90) (50) (100) (40) (50) (860 40) (190 150 150) (780 30) (40 160 50) (180) (180) (70 30) (120) (100 40) (50 30) (40) (210) (250 30) (110 190) (230) (400) (80) (280 140 80 170) (140) (80 90) (560 170) (980) (120) (170 30 70) (60) (50) (170) (310) (90 60) (950 510) (90) (100 70) (170) (40) (60) (40) (140 170 90 300) (80 30 30) (810 610 50) (290 60 340 60) (180) (100) (110 200) (50) (100) (50 60 90) (340 40) (220) (210 730) (190) (130) (40 50) (100) (40 140 50) (70 30) (110) (60 50) (800) (130 120) (60 260 640) (1460) (40 220) (960) (70 60) (40 200 50) (50 50 520) (120) (190 100) (290 1810) (120) (80) (90 50) (80 40) (390) (790 1770 750 150 40) (40) (850 80 80) (1020) (100 130) (60 110) (150) (7690 650) (80 100) (230) (150) (360) (90) (70) (40 50) (80) (80) (60) (250 190) (60) (130) (100 70) (2110 100) (40) (150) (40 40 50) (70) (70 590) (60) (370 190) (1410 570 1170 330) (120 40) (40) (50) (90) (690 90) (470) (40) (50) (50 170) (90 100 90) (540) (40 70) (550 290 40) (60) (40 970) (2440) (460 60) (70 40) (40 110) (320) (90) (80 80 530) (70) (90) (40) (760 660 270) (1240 70) (60) (300 70) (450 50 300 50) (60) (50 90) (320) (40 40) (70) (60) (50 40) (60) (220 60) (1050 60) (200) (50) (290) (170 70 100) (40) (60) (270 90) (60) (440 40) (480) (40 70 50) (70) (90) (940) (180 100 60) (40 1300) (90) (400) (500) (80) (30 420) (790) (110 40) (250 40 90) (100) (60) (300) (100) (190) (290) (550 570 70) (70) (180) (40 260) (40) (50 50) (100) (70) (260) (470 110) (80) (240) (810 50) (220 100) (1920) (40) (100 360) (150 60 290) (470) (40) (80) (560) (40 110) (200 150) (100 70) (390) (40) (710) (610 400) (70) (400) (210) (1160) (670 30) (730) (130 60 100) (50) (260 60) (190) (40) (80) (90) (170) (70) (630) (440) (50) (150 210) (40) (130) (520 260) (2850) (70) (60) (50 70 70) (60 830 30) (110) (1760) (760 60 1120 130) (40 220) (550 220) (30 30) (520) (90 80) (560) (180) (150) (1250 80 1800) (50) (40) (60) (60) (40) (110 110 780) (100) (650) (50) (270 30) (1310) (140) (70) (290 70) (130) (300) (100) (180 70) (40 70) (140) (60 250) (40 120) (4500) (60) (40) (540) (300 2200) (340 60) (800) (750) (50 40) (90 70) (220 90) (40) (260 30) (200 90 100) (90 80) (400) (90) (100) (830 60) (250) (240) (60 90) (180) (100 40 750) (2680 960 30) (410 50) (80) (130 110) (70) (120) (40 50 90) (130 40) (270) (190 60) (230) (200) (140) (360 60 80 2570) (80 2500) (30) (330) (50 180) (210) (80 50 60 330) (40) (3170 70) (70 110) (3810 110) (120 100) (80) (50 200) (50) (270 40) (340 40) (120) (50) (1020) (60) (170) (740 100 610) (360) (120 220) (80) (40) (770 90) (710 50) (70 200) (80) (250 680) (70) (40) (50 50) (420) (110 80 40) (50 460 840 50) (160) (70) (60) (530) (1460 320 510) (80) (60) (70) (130) (50) (60) (120) (200 70 30) (100) (400) (30 30 100) (70 50) (30) (240) (130) (70 370) (240) (40) (740 280) (90) (190) (40) (1850 380) (210) (350) (50) (70 190) (40) (140 140) (50) (280) (120) (50 410) (200) (120) (2380) (90 410) (480) (230 110 160 70) (60) (40) (60) (1540) (150) (270) (50) (130) (60 50) (90 350) (80 350 70) (1770) (550) (50 60 40) (60 180 140 50) (1970 320 50) (90) (160) (1680 550 80) (150) (140) (100) (410) (800) (700 70) (110 110 100) (90 240) (190 40 90) (50) (840 70) (190 70) (110) (440) (90) (450 240 90) (120) (60) (40) (40) (100) (150 160) (50) (100) (220) (1320 800) (70) (60 150) (860) (890) (70) (160) (110 80) (2350) (490 950) (70) (2470 190 90) (60 260) (110) (110 60) (180) (120) (130) (50) (1180) (80) (50) (170 100) (40) (40) (100 40) (590) (60 50) (150) (80 70) (90 90 40) (490) (200 160) (660) (40) (130) (620) (170) (160) (130 100) (70 40) (50) (230 60) (120 540 130 80) (110 440) (70 90) (70 110) (50) (780 30) (4600) (90 50) (50 480) (390 1040) (70 40) (250 670) (130 160) (70) (70 40) (120 70) (60 130) (180) (360) (110) (330) (8490) (90) (340) (160 70) (1440) (360) (60 40) (330 60) (1330 90) (120 70) (2580) (340 60) (60) (80) (60) (750 50 40) (30 30 70) (120 700 400) (440 680) (150) (2640 500 390) (70) (6290 210) (70) (60) (110) (290 120) (40 40) (1440) (40 100) (2250 40) (90) (350 120) (100) (70) (30) (190 40) (260) (200 140 60 70) (100 210) (60) (60) (690 120 90) (60) (150 80) (140) (4810 210) (440 190) (30) (290 110) (260 80) (850 110 50 40) (80) (890 1840 80) (70) (210 250 80) (120 350) (160) (7480 70 30) (50) (140) (40) (50) (200 270) (910 110 330) (180) (30 310) (70) (70) (30) (1610) (80) (70) (840 160 50 120) (40) (120) (4200 2030 80 100 700) (50 70 80) (310 50) (50) (100) (50 50) (210) (120 290 450 40) (1250) (80 180) (80) (260) (200 260 100) (50) (130) (90) (120) (270) (110) (80) (160) (2400) (200 40) (90) (260) (570) (250) (210 40 350) (170) (150) (140) (190 290 40) (120) (60 3260) (60 60) (90 290) (50 440) (400 140) (110 60) (60) (70) (350) (430 240 60) (30 270) (50 40) (50 40) (160) (180 230 450 40) (40) (3490) (40 110) (100) (60) (100) (80 80 80) (260) (60) (410) (70) (1100 70) (1680 70 90) (60 820 70) (80 160 110) (130) (240 790) (70 80 70) (50 80) (160 250 110) (100) (70) (580) (80 260) (70) (660 80) (40) (60) (550) (540 130 170) (70) (110) (690) (100 450) (140 170) (350 50) (70) (60 40 40) (100) (40) (60 150) (500) (350) (100 60 100) (140) (110) (350 180) (50 170) (90) (350 150) (140) (4110 40 800) (90) (40) (130 620) (90 1240) (1220) (210 250) (260 90) (30) (160 60) (90) (40 90) (600) (50) (750 250) (90) (180) (1310 1460 130) (890) (1080 190) (90) (60 70) (1360) (80) (2030 110) (260 270 410) (80) (80) (290 60) (140 40 370 50) (200) (70) (160) (70 90) (40 40) (630 40 130 500 70) (50) (170 40) (60) (150) (100 30 30) (140) (480) (1280) (180 60) (40 50) (500 100 100) (70 160 8560) (130) (40 620) (60 100) (200 50) (60 1280) (150) (60) (230 40) (250 30) (220 210) (1680 50) (2020) (70 70) (70) (50) (320) (460 80 70 30) (450) (600 530) (340) (30 30) (150 2280 620) (390) (80 240) (50 120) (80) (40) (30) (50) (1020 590) (80 50) (60 100) (130) (40 510) (40 690) (80) (200) (50 60) (1120 70 70) (150 60 450) (290) (300) (140) (210) (40) (90 80) (500 90) (130) (140) (30 30) (580 100) (100 60 1480) (270) (350 40) (220 150) (100 50) (610) (230 180 70) (300) (1350 60) (130 1060) (80) (80) (100) (300) (60 430) (1260) (60 190) (90) (340) (650 800 60) (90) (60) (820) (80) (200 60) (70 70) (140) (150) (210) (530) (530) (120) (1210) (1030) (60 70 80) (240) (110 70 100) (520) (620 220 50 70) (110) (430 60) (50) (130 40) (140) (30) (540 70) (1130 120) (90) (280) (90 750 70) (1080) (210) (70) (40) (3540 80) (90 610) (40) (1020) (420) (80 160) (120) (40) (150) (60) (50 200 40 1610) (30 360) (40 2470) (240 70 90) (110 70) (270 50) (30 110) (140) (590) (630 100 50) (390) (2630 3560) (1130) (30) (80) (420 160 30 50) (310 50 180) (120) (70) (1330 220 50) (220) (40 740) (2100) (160) (130 90) (150 1440 80) (380) (80) (390 100) (110) (90) (350) (660) (1120 1150) (50 60) (490) (3040) (1170) (260) (60 40) (2850 90) (40) (70 30) (210) (150) (510 50) (40) (40) (60) (250) (70 180) (570 100) (50) (220) (400) (360) (40 50) (70) (140) (250) (130 40) (180 720) (310) (180) (420 70) (30 60) (100) (40) (140) (2910) (940 90 50) (880 80) (260) (170 40) (230) (150 150) (730 70) (160) (130) (300) (420) (3060) (240) (70) (210) (180) (650 40) (30) (60) (30 280) (40 60) (140) (160) (150 80) (30) (200 590 70) (160) (300 50) (70) (250) (90) (90 590) (190 80) (110) (2230 100) (80) (970 90) (110) (80) (100) (120 200) (510) (130) (200 100) (230 50) (710 130) (220 60) (2540) (770 60) (40 1620) (640 390 100) (100) (80) (30 80) (160) (500 60) (40) (70) (40) (100 90) (610) (40) (150) (130) (650) (470 200) (160) (40) (190) (80) (210) (80) (70) (50) (170 90) (780) (290 120) (50 950) (360 230) (50) (100 220) (240 40) (3680) (1570 310) (80) (160) (70) (210) (80) (40) (70) (280) (180) (40 70) (100 220 50) (260 340) (1010) (100 40) (60 50) (90 100 1600) (70) (120 120) (150 290) (110) (290 60) (40) (100) (260 1030) (720 550 250 80) (110) (100) (210) (930 30) (90) (510) (810 80 90) (60) (230) (100) (500 430 70 1730) (340) (630) (40) (110) (80) (60 40) (50) (50) (120 70) (40 50) (400 110) (4530 1110 350) (80) (120) (100 80) (640) (120) (110) (530 650) (80 80) (350) (100) (5110 40 50) (140) (460) (50) (210) (2170 940) (4810 1680) (300) (80 210) (40) (40 190) (880) (70) (80 1170) (60) (170) (200) (100) (360 60) (340) (970 130) (100) (460) (50 110 70) (150) (5720 60) (600 330 460) (720) (90) (70) (120) (110 50) (100) (80 150) (150) (40) (120 80 40) (80 690 60) (60) (540) (370 70 60 100) (180) (150 310 50) (80) (40) (1510 200 310 70) (80 40) (310) (60 60) (40) (540) (70) (1000) (40 160) (7260 150) (1070 40 40) (110) (2760) (260) (40) (1400 120) (1990 70) (2260 110) (470) (940 120 80) (380 70 70) (40 60) (360) (70) (70) (660 110 90 790) (250) (100) (220 80 50) (850 100 60) (950 120 150 30 100) (500 40) (30) (550) (1060 100) (140 150 1180 150) (220) (440) (320) (240) (5150 80) (320) (480) (90 40) (50) (50 90) (260) (60) (40 350) (160) (330) (30 120 450) (100 250) (60 130) (70) (250) (200) (50) (90) (380 600 1680 110 80) (420 80 50 80) (80) (2340 60) (90 80) (110) (950) (30) (120 210) (210 60 90) (920 870) (70) (3260 100 160 100) (3630) (60 60) (50) (100 370) (150) (1310) (170 160 100) (130 240) (80 50 80 30) (40) (40 200) (90) (1640) (90) (180) (220) (1460 40) (260 170) (250 250) (300) (120) (40) (500) (60 50) (340) (270 140) (190 40 40) (550) (40) (230) (420) (90) (80) (100) (130) (40) (50) (40 90) (50) (50 30) (2710 60) (280 40) (180 60) (60) (40 40 200) (190) (60 60) (3420) (310) (250) (40) (50) (280 80 630) (80) (990 90) (90 40) (120) (240) (100) (400 60 50) (180) (290 250) (30 260) (50) (50) (370 110 40 90) (80) (90) (70 120 110) (420) (40) (50) (40) (170 300) (100 1590 200) (1310) (50 350) (220) (330) (1400) (160 40) (150) (120) (40) (60 50) (80) (1410) (190) (210) (100 50) (750 90) (200 5300 930 40) (70) (1010 30) (40 160) (300) (100 350) (210) (40 70) (40 90) (140) (390) (80) (30) (1170) (40 90) (80 70) (230 210) (60) (200) (800 90) (40) (150) (90) (60) (780) (110) (70) (2880 420) (290) (70 230 80 120) (250) (70) (2980) (40) (130) (100) (160 100) (80 150) (40) (100) (170 620) (50) (90) (80 1740) (260 110) (80 3750) (80) (1930) (160 60) (1050 60) (970 70 100) (100) (210) (50) (60) (90) (80) (300) (280) (160) (190) (70) (400 1040) (180) (40 60) (50) (3160 210 50) (40) (60 180) (70 170) (130) (590) (90) (1270 60) (350) (50) (1590 300) (90) (230) (780) (60 60) (300 60 50) (60) (150) (90) (250) (30 760) (140) (280) (110 40) (500 60) (80 700) (70 130) (200 40) (790) (50) (140 350) (210 410) (80 660) (60 1050) (60) (150) (130) (270 70) (560) (670) (410) (1160 60) (120) (50) (370) (300 560) (90) (200) (70) (30 130 90) (120) (60) (40) (50) (100 510) (80) (70) (170) (220) (30) (60) (5400) (230 450 520) (470 290) (730 40 60) (90) (880 70 50) (90) (70) (240) (380 80) (140 40 90) (250) (140) (340) (50) (180 80) (1550 40) (30) (360) (40) (3860) (550 520) (70 270) (80 60 60 980 3000) (40) (340) (310 50) (50 140) (50 150) (160) (60) (130) (190 2070) (330) (100) (150 320) (260 1930) (70) (80) (370 60) (910) (100 500 110) (80) (250 30 50) (490) (350) (980 90 850) (310 180 100) (150) (60) (60) (160 210 50) (550) (50 110) (40 180) (90 280) (200 70) (50) (60 200) (1900 130) (180 480 60) (60) (270 70 60) (110 180 100) (4850) (50 50) (100) (60) (90 70) (210 1320 30) (80 80 280) (100 740) (820 150) (80 90 300) (370) (770) (160) (100) (1450) (300) (320) (210) (70) (40) (300) (70 40) (440) (320) (120) (370) (560) (110) (220 90 760) (830) (80 640) (40) (60) (1100) (700) (60) (70) (100) (120) (90 170) (550) (60) (210) (630) (80) (50 60) (60) (240 110 240) (60 180) (90) (170 710 170 1620) (60) (430 110) (150 410) (870) (1320 50 200) (100) (310) (300) (690 40) (680) (150 30) (60) (100) (110) (110) (150) (480) (50) (470) (730 150) (1560) (650 280) (580) (170) (40) (30) (240) (40 90) (70 80) (860) (110) (30 550) (770) (1270 40 70) (40 50) (90) (230 410 160) (400) (1270 60) (250) (90 50) (160 40 40) (60 30) (390) (7460) (100) (50) (140) (1740) (1790) (230 50) (70) (100) (180) (300 520) (230 100) (40) (60) (50) (900 60 1430) (70) (40) (1070 80 640) (30 120 450) (130) (250 300 40) (120) (280) (450 130) (130 130) (250) (200 430) (60) (470) (110 40) (90 80 50) (400 130) (60 110 510) (620) (150 60 60) (220) (300 90) (2150 90 400 70 350) (320 70) (1300) (4660) (350) (40) (200) (380) (560) (500 160) (60) (4660) (110 80) (40 1650) (240 110) (150) (140) (40 290 40) (880 320) (310) (80) (80) (60) (80 130) (60) (8170 140) (60) (180) (40) (1990) (620 40) (60) (6470) (60) (80 40) (290) (340 110) (4850 3220 210 160) (70 280 160 40 540) (210) (1760 40) (70 70) (80) (90) (210) (890 140 320 150 60) (180) (80) (60) (60) (110) (50 120 40) (130 1180 50) (80) (80 100) (60 650) (80 130) (1150) (5260) (40) (50 120 70 70 700) (80) (50) (60) (170 120) (70) (40) (90 80) (450 60 250) (60) (110 80 90 450 150) (30) (180 130 60) (330 400) (40 70) (30 120) (250) (140 280 50) (170) (70) (70) (120 40) (60) (60) (50) (1260) (620) (60) (100) (90) (380 220) (50) (190 2150 90) (450) (50 50) (80) (60) (210) (40 120 50) (150) (50 40) (550) (2040 1960 190 40) (210 230) (620 40) (70 30) (270) (2010) (40 80) (40) (110) (370) (40 110) (300) (60) (80 50 50) (70) (50) (70) (180) (140) (120) (60) (370 2100 120) (60 50 200) (100) (290) (370) (40) (40) (50) (60 90) (70 300 130 150) (300 60) (90 60) (50 200 80) (80) (1370) (150) (40) (1540 50 80) (130) (120 2450) (60 60) (100 600 1640) (100 60) (80) (7590) (70) (140 340 40) (210 130 30) (350) (60 40) (1130 70) (40 40) (70 50) (50 90 210 130) (570) (570) (110) (80 40) (40) (40) (60 90) (280) (70 80) (630 120 60) (70 90) (90) (330) (60 40 520) (120 70) (200 50) (90 100) (80) (90) (60 50) (70) (70) (60) (40 40 140) (60) (170) (120) (270 60) (90 460) (80) (400) (50) (70) (60) (50 40 120 70) (280 50 40) (820 50 60) (340) (100 100) (40) (200) (40 70 100) (60) (60 60 200) (40) (80) (110 60) (5520 200 80) (130) (70) (380) (50) (70 910) (50) (90) (310 650) (1450 90) (440) (220 150 180) (70) (240 50 60 150) (450 540 60) (60) (40) (50 40) (480 180 980 80) (100 200 80) (1450 840) (280 110) (1410) (70) (50) (100) (90) (110) (60) (40) (80 40 190) (380 60) (40) (120) (270 8020 50 80) (90 160 50) (50 40 80 90) (100) (80) (480) (620 30 950 30) (570) (290 80 110) (90 70) (310) (140) (40 250) (130) (30 70) (160) (60) (70) (220) (150) (90 50) (200 110) (430 1120 220 70) (70 30) (120 120 90) (2090) (290 40) (300) (640 40) (730) (260) (240) (100 50) (70) (40 440) (990) (150 50) (60) (40) (2550) (30 470 130) (40 1200 40) (2410) (330 220) (140) (90 70) (370 160 60 630) (310 50) (170) (110) (80) (60) (80) (130) (570) (140) (450 390) (310) (2090) (50 440) (50 70) (150) (60 260) (90) (3020 190 190) (380) (160 30) (150 90) (40) (100) (100 490) (70 720 490) (19010 210) (380) (200) (70) (290) (50) (90) (60) (550) (800) (100) (560 520 260) (100) (60) (50 40) (480) (360) (150 1570) (70) (120) (40) (90 220) (140 80) (170) (160 120) (50) (60 130 50) (240 60 40) (40 40) (50) (160) (40 40 120 70) (770 130 100) (240) (80) (130 70) (70 40) (670 390 270) (860 80) (440) (120) (700 60 50) (1830) (120) (510 90 230 50) (110 390) (160 60 210 220) (800) (60 140) (90) (150) (1060) (50 430 300 130) (120) (70) (70) (70) (110 130 70) (490) (40 50) (390) (30 210) (70) (280) (60 320 50) (110) (470) (100) (90 420 140) (60) (130) (50) (60 30) (90) (80 240) (900) (70 1860) (740 80 40) (620) (70) (60) (60 50) (30) (1700 160 340) (60 50 130 210) (650) (90) (840 60 110 60) (170) (490) (80) (130) (3160 80 30) (140) (390 2030) (60) (50) (370 40 170) (600 60 130 180) (80) (30) (190) (200 370) (30) (100 150) (60 60) (60) (140) (40 1190) (110) (110) (90) (70 630) (150 310) (820 80) (150) (50 250) (340) (580) (110) (280 100 240) (370) (60) (260) (200) (50 50) (60) (90) (40 100 640) (50 980 50 660) (280) (160 150) (70) (120) (650 390 90) (640) (290) (90) (50 70) (60) (530) (60 70 50) (60 100) (40) (510) (190) (180) (50 50 110) (100) (2410 60 110) (40) (70) (120) (360 140) (110) (280 80 60 190 150) (1970) (60) (60) (70 60) (1810) (510 110 60) (60 40 350) (140 730) (70 640) (60 40) (460 2740) (70) (400) (40) (1010) (50) (270) (1350) (100) (270) (60 190) (190) (60 60) (40) (70 890) (50 30 60) (1250) (50) (70) (550) (390) (500) (150 270 300 130) (790) (180 100) (130 150) (450) (210) (420) (70 310) (100 260) (80) (460) (40) (60) (40 90 40) (100 410 540) (60) (1890) (100) (1020) (60 60) (150 40) (820) (100 190) (550) (900) (70 400) (50) (250) (140 210) (60) (120) (40 150) (100) (60 60 80 110) (370) (700) (200) (80) (220 50 1150) (110) (80) (40) (100) (910 590 40) (1610 40) (2050 1260 830) (50 100 90 80) (170) (150) (40) (90 70) (500 110 100) (70) (50) (360) (760) (180 1390 60 1040 410 740) (40 40 100) (70 70) (150) (90) (100) (100) (230 230) (110 250) (690) (100) (1910 4460 290) (30) (70) (130) (50 200) (100) (180 80 60 210) (400) (40) (960 420) (310) (1190) (430 360) (40 130) (310 90 160 40 1060 130) (70) (40) (70 40) (1120) (130) (8170 60) (1740 180) (260) (150 70 80) (80) (680) (90 70) (480 60) (640 430) (40) (50) (150 250) (5710 150) (140) (50) (130) (80 110) (4270) (270) (120 70) (100 260) (120 70) (230) (40 210) (60 150 890) (70) (1590 70) (110 650) (90) (240) (30 460) (40 70) (120) (120) (350) (220) (3030 320) (2720 70 50) (60 110 40) (60) (3150 1000) (40) (30) (140 90 60 180) (120) (110 80 100) (1630) (430) (300) (50) (70 50 640) (110 70 150) (140) (70) (230 560 170) (140 70) (50 90) (150 130) (40) (570) (380) (230 40) (60) (790) (1180) (700 80 30) (150) (40) (100) (270) (70 60 60) (80) (140) (110 70) (50) (90) (60 60) (300) (100 40 90 40) (70 50) (600) (200 1090 230) (90) (60 310 60) (150 260 60 40) (50) (320) (60) (40) (50) (130 3030) (100) (1000 40) (210 110) (430 50) (40) (70) (50 180) (60) (40) (400) (60 390 50) (1100) (150) (30 570) (70) (70) (770 350) (70) (80) (110 60 30) (60) (1550 160 870 70 80) (330) (190) (1230 160) (500 120) (40) (70) (40) (70) (110 70) (70) (50) (50) (60 60 5730 70) (1070) (40 40) (2140 80 130 490) (100 80 90) (50 250) (60) (1350 100) (150) (100 90) (210 130) (1190) (70 50) (60) (80) (220 90 90) (300) (60) (40 50) (1270) (150 60) (760 90) (110) (90) (30) (30) (90) (400 60 50) (60) (490) (190) (130) (70 90) (160 100 560) (80) (170) (100) (40) (210) (50 240 60) (100) (60) (150 40) (70) (460) (320 70) (220) (60) (50) (60) (40) (110) (80) (270 40 80) (120 60 50) (5850 60) (80) (120 80) (650 630) (100 50 430) (510) (550 40) (90 40) (1110) (540) (250 70 150) (60 50 70) (90) (80 140) (50 110) (90) (40 120) (110 90) (50) (200 140) (60 200 80) (740 440) (50) (210 1050 980 100) (90) (330) (200) (90) (80 70 70) (80) (40) (370 300) (100 160 50) (70) (30 50 300 450) (110 290 50) (130) (5370 110 610) (140 120) (90 50) (170) (40 280 2480 130) (1390) (90 130) (60) (1350 110) (70) (40) (140) (240 50 70) (130 80) (40 40) (50) (1200 50) (130) (340) (60 60) (40 150) (140 170) (220) (550) (80) (360 140) (90) (460) (70) (100 40) (270) (2160 70 70 120) (360) (140 150) (890) (80) (670) (200 110) (70 80) (90) (750 40) (180 250 150) (100) (250) (100) (760 80 140) (620 30) (50) (1350) (200 290) (2840) (40 220) (90) (70 5630 80) (90) (80 450) (70) (60 80 60) (250) (90) (100) (50) (80 50 100) (60 60) (440) (1810) (120) (1370) (200) (40 70 170) (180 400) (1430) (60) (120) (90 250) (180 150) (50 220 40) (80) (140) (510) (220 70) (50 60) (40 760) (440 40) (250 90) (360 170 130) (1120) (50 50 280) (90) (140) (220 150) (70 850) (230 40) (70) (150 60 220) (70 2350) (40) (140) (220 580) (260 40 50) (290 40) (710) (60) (40) (420) (100 60 320) (330 230 40) (80) (50) (2310) (30 30) (70) (30 100) (2380 60 60) (130) (140 40) (660) (90) (90 170 50 50) (90) (80) (90) (380) (80) (40) (30 30 210) (140 940) (930) (1300 70) (60) (70) (750) (220) (570) (690) (240) (50 40) (1580 50 1500) (50) (60) (60 70) (40) (80) (550) (100) (50 150) (40 180 460) (140) (250) (200) (70 80) (1150) (530 700) (60 110) (50 50) (160) (120 50 40) (350 40 300) (100) (50) (290) (60) (80) (1500) (90) (160) (90) (30) (120) (6600) (70) (250 50 450) (1080 160 80) (90 70) (240 40) (70 240 250 70) (50 2610) (380) (50) (80) (120) (50) (230) (730) (120) (890 40) (70) (60) (980 40) (60) (2160) (250) (70) (40 630) (60 60 90) (250) (80 1540) (150) (60) (130 160) (260 650) (1660) (40) (8270) (80) (400 130 600) (80) (530 180 50) (50) (630) (120) (2100 70) (110) (120) (60 110) (190 50 160) (90) (70) (110) (240 130) (1930) (100 200 210) (640 40 720) (30 100) (280 50) (40) (60 40) (730 530) (40) (250 50) (70) (80) (1830 70) (50 30 170) (80) (1500) (220 4280 40 110) (40) (90) (220) (30 100 30 60) (110) (490) (40) (460 280) (70 50 170 1820 470) (100) (110) (50) (10230 210 140) (40) (30 120 100) (130) (410 60) (310 80) (100) (30) (2880 610) (130 60) (580 150) (2970 290) (200 180) (30) (50) (250 150 150 40) (210) (480) (50) (100) (40) (60) (70) (350) (50 350 50) (40 40 160 260) (150) (60 80 40) (50) (70 220) (820) (70) (340) (80) (100) (1170) (40) (170 860) (40) (410 270) (120 40) (260 400 100) (1100 120) (50) (40 90 90 90) (90 70) (130) (90) (610) (90) (150 50) (110 1250) (70) (200 420) (230) (150 70) (280 210 60) (970) (70 120) (60 60) (150) (70) (140) (40) (460 1620 70) (60) (320) (200) (100) (70) (350) (150 100 110) (40) (80 100) (80) (30 50) (140) (2890 7830) (6770) (90) (180 190) (210 270 150) (60) (200 160 60 150) (320) (280 50) (60) (80) (320 70 120 170 130) (490) (140 400 950) (7600 80) (60) (60 40) (440) (40 80) (90) (150 1000 370) (110 60) (70) (400 80) (250 60) (70) (60 480) (80) (110 60) (110) (100 920 90) (130) (340 130) (40) (150) (2010) (110 490 160) (180) (520 750 50) (50) (250 320) (380) (90) (50 60) (110) (210) (90 50) (50) (120) (50) (50) (80 80) (150) (60) (120 140) (150 50) (450) (40) (1000 40 100 100) (40) (80) (100 290) (360 50 40) (130 130 30) (90) (100) (30) (100) (80) (5490) (110 30) (1380) (3020) (120) (30) (1350 1250 100) (90 80) (4760) (40 40) (50) (1490) (40) (330) (830 280) (120 70) (150 100) (80 130 150) (280) (60 40) (40) (160 60 60) (70) (50 60) (60 40) (360 80) (940 190) (40) (4190 70 50) (70) (40) (60) (40) (90) (190) (50 120) (140 60 330) (180) (90 650) (230 60) (120) (9670 40) (60) (30 100) (40) (7340) (1170) (570) (50) (80) (70 80 70) (70 80) (100) (110 50) (80) (140) (60) (150) (1020) (210 40) (70) (50 60) (100) (270) (40 100) (2000 2950) (80) (520) (700) (90) (70) (50 30) (760) (70 70 70) (80 230 80) (60 260 50) (30) (40) (280 40) (40) (360) (650 40) (60) (190) (150 170) (40) (370) (40 70) (50) (270 60) (330) (260) (600) (80 100) (40) (120 70) (80) (70 90) (410) (1030 790 2380) (720) (150 1010) (50) (150) (50 120 170) (610) (480) (250) (30) (890) (90 160 300) (40 40) (50) (250 40) (80) (70) (210) (40) (680) (530) (40) (170) (90) (40) (1500) (140 50) (120) (750) (260) (60) (40) (30) (200) (400) (80 540 230) (50) (40 70) (90) (50) (90) (440) (90) (70) (200) (40 440) (70 1990) (250) (70) (3380) (490 130) (310 120 40) (160 200 60 920 60) (1280 80) (60) (90) (280) (100 60) (360) (450) (330 120) (810) (400 1300) (130) (70) (50) (190) (40 140) (60) (380 40 90) (60 80) (140) (60) (40) (300) (100) (110 50) (430) (100 30) (80) (60) (160 210) (140 110) (80 90) (9120) (60) (80 1610) (440 70 620) (100 370) (30) (60) (40) (60) (70) (240 70 620 330) (130) (110) (120) (250) (290 70) (90) (40) (40) (330) (550 290 190) (110) (790) (90 50) (160) (70) (300) (60) (110) (230) (2470 370 150) (90) (150) (880) (30) (40) (230 1820) (50 70) (50 90) (280) (100) (540) (80) (430 90) (520) (150 260) (1810 60) (390) (750) (30) (40) (90) (70) (1050 60 90 60) (940 120) (60 100) (110) (850 200) (820) (310 530) (120 120 90) (190) (40 170) (60) (150) (90) (160) (90) (40 110 250) (100) (280) (400) (160) (110 100 70) (80) (40) (60 240 40) (640 90) (90 40) (130) (230) (100) (870 290) (80 30) (100 40 1800) (90) (170 100) (110 120) (100) (30 510) (11130 50 430) (60 1060) (70 180) (210) (40) (110) (260 60 200 1300) (70) (40 40 200) (180) (50 40) (50) (40 150 480 40) (30) (270) (390 300 350) (70) (50 60) (1600) (60) (60 110) (70 130) (200 1220) (100) (80) (130 4700) (100) (40) (30 80) (100) (50 70) (60 220) (50 50) (140) (600) (50 60) (290 100 40) (70) (60) (50) (50 80 300) (1550) (710 30) (90) (150 690) (60) (40 4840) (40 220) (50 50 30) (410 90) (220 190) (250 50 70) (40 140 90) (150 40) (100 50) (200) (360) (40 40) (150) (90) (1780) (330 300 230) (1300 230) (230 150) (1250) (40 70 740) (120) (910) (40) (70 80) (70) (80 330 60 90) (300 240) (80) (230 60) (50) (130) (40) (160) (190 160) (110 330) (130 70 30 410) (700 740) (90) (60) (80 150) (440 240) (490) (30 110 50) (840) (70) (170 80 200 80 50) (70) (60) (230) (900) (140) (370 40) (720 190) (70) (50 60) (40) (70 300) (180 560) (400) (30) (40 420 50) (50) (40 50) (150 40) (50) (4210) (150 60 30) (670) (450 40) (70) (370) (280 300) (70) (310 40) (1560) (110) (40 150) (200) (370) (50) (110 50) (2740) (40) (50 30) (1240 540) (80 40) (150 210 570 70) (50 140 80) (1630) (60) (60) (110) (70 40) (200) (440 70) (890) (70 50 100 40) (430 80) (150) (180) (80 100) (320) (30) (60) (1910 180) (340 50) (160 660 50) (120) (60) (540) (110) (170) (240) (30 30) (110) (240) (390) (90 50) (60) (330 150 400) (180) (60) (40) (1310) (110) (40 440) (180 310) (50) (50) (120) (1330 60) (2450) (490 240) (720) (50) (80) (160 100) (50) (60) (590) (170) (310) (150) (70) (600 800) (310) (290 100) (50 90 40) (50) (720) (90) (60) (40 60) (250) (190) (420) (90 280 310) (3280 340 70) (230) (70 90) (600) (3770) (3710) (170) (710) (60) (250) (90 80) (220 870) (110) (520) (510) (950 300) (100 300) (710) (570) (380) (120) (80) (50) (4260) (480 220) (60) (140) (3350 100) (50) (70) (60 120) (130 90 290) (300 40) (3740 910 50 280 30) (40 180 70) (110 30) (760 60) (180) (80) (270) (50) (30) (2860 300) (80) (120) (60 90) (3330 2480 510 1410) (180 3510 30 50) (3070) (60) (180) (700 210) (360) (70) (2080) (150) (200) (210 210) (70 50 160) (50 140) (50) (130 800) (270) (60) (1110) (110) (60) (140) (1660 60) (100 470) (50) (150) (310) (190 370) (230) (60) (340 60) (50 80) (60) (80) (150 1230) (70) (60) (300) (90) (70) (230 860 60) (70 30) (490) (30 200 50) (140 130) (180) (60) (50) (80 50) (100) (70) (220 220) (910) (190) (420 220) (110 100) (240) (80) (60) (250 200) (90) (40) (180) (70) (70) (60) (570) (80) (680) (150) (70) (40 900) (100 320 50) (520) (50) (190) (7780 30) (890) (390 40) (80) (80 180) (50 40) (80 40) (60) (130 80) (1680 40) (70 400 1250) (300) (50) (160) (40) (60 50) (1410 70) (70 260) (60 240) (30) (70) (40 880 50) (130 250) (370) (340) (80) (80) (40) (180) (80 90) (320) (640 740) (50) (40 60) (40) (390 80) (110) (270) (600) (30) (80) (80) (40 60) (530 250) (510) (50 1460) (460) (340) (4290) (790) (50) (60 80) (60) (560 150) (40) (360 180 60) (40) (400) (50) (90) (490 490 50) (80) (60 100) (40 60) (40) (80 50) (1830) (60) (90 50 50) (60 60 310 3650) (60) (100 40) (50 300 940) (1250) (50 260) (1690) (70) (80 160 210) (350) (330 80) (60 50 240) (300) (50 110 60) (340 290 50) (90) (60) (50) (280 80) (900 340) (140) (1050 40 140) (430) (120 2230) (1060 140) (40) (250 30) (90) (760) (40 590) (80 80) (90) (660 150) (50 290 40 760) (40) (90) (170 60) (360) (70 380) (830 50 70) (70 210 520) (90 50) (330) (120) (50) (30 80) (410 260) (1690 40) (170) (250 110) (150) (150) (60 70) (80) (30) (50 60 40) (190) (30 70) (700 50) (110 90) (180) (30) (260 720) (50 180 90) (90) (580) (120) (90 50) (50 100) (270 1000 50) (70) (130 170 70) (2280) (540) (760 260) (650 60) (40 80) (80 270) (60 70 50) (220 50) (160) (340) (110) (2860 40 50) (70) (280 60) (110 350) (550) (90) (310 140) (1210) (70) (80 90) (180) (100) (160 1250) (1050) (610 40) (140) (2530) (50 710 230 30) (100 240) (50 130) (60) (60) (80 800) (620) (80 60) (50) (50 160 100 60) (100 150) (140) (550) (240 60) (140) (60 130) (50) (190 360) (80 340) (360 100 70) (160) (240) (40 90) (50 40 80) (50) (70) (50 40 240) (110 70) (150 1480 120 1630) (110 80 50) (40 440) (140) (320) (300) (3030) (150 50 70) (70 330) (70 50) (60 750 60) (60 90 60) (130 70) (40 40 410) (180) (210 1260 390) (970 140) (100 50) (6240) (200) (190 40 40) (290 230) (100) (330) (770) (200 260) (110 80) (180 70) (70) (40 60) (120) (480 50) (400 100 350) (1990 60 150 140) (810) (1360 110) (210 210) (80) (210 120) (50) (100 40) (100 430) (110 160 70) (80) (570 30) (60) (80) (150 170 1200) (40 50) (110) (130) (70 150) (50) (640 190) (270 50 60) (100 50 110) (100) (50) (130 90 480) (40 70) (70 30) (40 100 250) (40) (40) (30 160) (90 40) (1940 1810) (80) (360 40 700 140) (90) (70) (70 60 110) (340 50) (230) (60) (100 80 190) (130) (260) (90 70 100) (70 100) (300) (380) (150 100 820) (50) (90) (250) (2000) (60) (150) (70) (840 40 210) (1050 480 50 110) (30) (50 140) (60) (200 50) (550 60) (110) (840 250 70) (100 510) (210 80) (30) (110 250 100) (60) (720 150 60) (40 230) (80) (60) (90 470) (40) (100 790) (280 60) (120) (150 40 140) (90 70) (280) (1010 220) (260) (40) (30 60 110) (8180) (200) (170) (60) (60 70) (1840) (150) (140 170 260) (80) (70) (680) (120 550) (140 50) (190 90) (170 270 120 450) (310) (60 40) (40 70) (630 30) (110) (50) (30 130) (120) (90) (870 220) (1730 50 230) (3800 70 40) (40) (280 40) (550 50 70) (180 400 340) (70) (100) (400) (60 140) (1200 80) (900) (80) (250 190 870) (710) (110) (1490) (7360) (90 130) (110 500) (120) (200) (150) (900) (70) (60) (11470 250 60) (4540) (60 220) (50) (80 140) (3800) (650) (450) (140) (120) (130 120) (580 60) (300) (30) (420) (30 100) (60 110) (140 40 80) (50) (710 620) (540 2380) (620) (80) (90) (390) (60) (220 590 160) (50) (30) (60) (50) (140 300 120) (690) (70) (40) (100 90) (1200 40) (50 1680) (200) (250 60) (40) (820 80) (150) (470 540 480 80) (290) (380) (800) (70) (50) (190 40) (60 50 40) (120 80) (60 110 70) (50) (640) (780 100) (70) (150 200) (40) (1090 850) (50 50) (60 190) (200 80) (200) (40 290) (50) (60 100 160) (140) (150 100) (70 1190) (60) (50) (530 190) (160 160) (80) (30 700) (310) (50) (660 1760) (60) (30 1550) (140) (50 420) (50 70) (50 50) (100 250) (320) (120 30 30) (590 4200) (40) (40) (50 120) (190) (50) (130) (290 210) (300 110) (1030) (150) (50) (110) (1190) (170) (610 700 50 210) (60 280) (80) (700 50) (70 40 50) (60) (280) (320) (100 140) (80 220) (700 60 300) (730) (360 4030) (100) (5920) (130 330) (240 100 90) (710) (70) (60) (60) (40 50) (330 440) (360) (190) (1310) (200) (60) (40 60) (60 110) (7130 290) (80) (100) (100) (60) (80) (9340 50 70) (50) (1760 70) (640 200 1210) (490 110 100 200 180) (170) (100 150) (220) (50) (50 40) (280 230 80) (140) (60 40) (530) (2340 150 50) (40 490) (920 210) (80 80 260) (140) (60) (50 60) (40 150) (1000 60 90) (80) (1210 30 510) (60 40) (1540) (110) (50) (70) (40) (40 80) (100 110) (60 40) (50) (160) (190 80) (80 230) (70 160 130) (70) (150) (390) (270) (170) (40) (70 40 40) (90) (1620 160 310 170) (70) (50 40) (320) (70) (40) (330) (400 3450 360 1200 1300) (60) (70) (50) (80) (40) (70 550) (50) (80) (80) (300) (110) (60 220) (410) (70 100) (60 70) (120 70) (150) (100) (180) (440) (70) (620 60 30) (160 60) (5600 130) (170 420) (670) (1030 220) (1390) (60) (140) (150) (60) (340 100 100) (40 40 90) (40 60) (80 140) (31530) (100) (800) (300 150) (210) (40) (150) (120 40) (40) (90) (370) (1250) (4980) (350) (1300) (140) (80) (210) (90) (40 60 250) (70) (290 90) (80) (200 40) (80) (140) (1980 570) (100 150) (50) (190) (920) (300 50) (70) (1090) (80) (80 30) (150 100) (60) (440) (130 50) (140 40) (1270) (120) (50 80 80) (100) (3020 110 70) (60) (40) (100 50 80) (200 100) (140 440) (410) (500 160) (40 80) (60 60) (190) (90) (320) (80 110) (1280 70 100) (60) (70 5610) (90) (70 40) (80 60) (200 100) (330 40) (1300 800 60) (2520 90) (100) (510) (500 430) (300) (60) (460 200 60) (60 80 750) (90) (50) (80) (180) (50) (60 90 40) (80 90) (200) (610 670 70) (40) (90 50) (40) (50) (50 60 110 2670) (70) (80 220) (60) (80 80) (60 120) (270 100 90) (140) (90 110 100 890) (150) (110 50 80) (90) (60) (70) (70) (230) (40) (90 150) (110 180 380 3010) (30) (50 130 60) (390) (1100) (40 70 100) (360) (70) (80) (50) (490) (230 160 850 80) (1300) (40 940) (40) (100) (30) (300 130) (320) (150) (50) (350 800 50 60) (90) (170) (80) (70) (190 40 40) (530) (70 40 110) (250 110 70) (60) (770) (90) (630 330) (370 430) (90) (60) (140) (80) (370 50) (40 150) (60 150) (150 30) (120 70 100) (110) (900 50) (30) (60 110 40) (1810 160) (390 960) (30) (660 50 70 2650) (40 190) (50) (40 60) (80 30) (320 30) (360) (130) (450) (250) (70 270) (40 60) (80 660) (930) (40) (50 70) (23360) (160 30) (40) (400) (210) (80) (240 840) (70) (100) (100) (480 30) (1310) (50) (50) (2660 140) (840 290) (50) (40 40) (640) (30) (260 60) (50) (150 40) (40) (460 70 60) (70) (60) (150) (90 850) (80 70 300 150 130) (60) (160) (300) (120 100 250 70) (210) (50 60) (130) (800 380) (190) (130 40 110) (100) (470 170) (160) (390) (80) (290 120) (120 40 170) (280) (5620 100) (110 520) (60) (1830) (70) (1060) (50) (330) (200) (100) (240) (630) (100 160 2870) (360) (50) (180) (1240) (1080) (540) (800) (170 90 1340) (50 100 50) (40) (90 170 60) (110) (120) (40) (210 750 60) (360 170 140) (80) (200 120 620) (70 150) (40) (160 250) (50) (120) (140 40) (70) (210 270) (750) (180 210 180) (1160) (70) (450) (230) (220) (90) (160 140) (50 70) (100) (220) (60) (40) (140) (740 40) (20250) (70 470) (100) (80) (2190) (210 60) (130) (120 330) (70) (1600) (980) (190) (1090 100 50 90 140 60 50 60) (350 70 80 790 1380) (3480) (60) (750) (50) (240) (790) (60) (110) (40 130) (2190) (490) (1590) (100) (30) (50) (80) (30) (60 1060) (50 60) (220) (50) (70) (40) (300) (110) (120) (750) (120) (80 60 200) (8960) (150 90) (60) (50) (150) (20390) (180) (110) (360) (260 110) (2090) (120) (12730 2410 50) (150 300) (50 40) (90) (570) (60 60) (280) (60) (140 120) (110) (60) (70) (250) (2060 100 1070) (50 110) (390) (820 70 500) (40) (70) (100) (50) (60) (240) (2990) (70) (180) (40) (230) (150) (5350) (40 440) (40) (910) (190) (80) (60) (400) (190 100) (1070) (60) (60) (100) (160) (30 70) (80) (330) (240) (110) (90) (30 170 80) (40 140) (90 230) (30) (220 110) (60) (560) (70) (50) (430) (170) (40) (250) (50) (80) (170) (200) (290) (1300) (130) (40) (190) (80) (60 3770) (80 450 4950) (1540 760 140) (170 3750) (380 80) (180 50) (40) (130) (640) (1080) (40) (640) (590) (130 100) (240) (440) (170 60) (1340) (280) (100) (50 100 80) (890 460) (110) (110) (90 60) (100) (140) (250 130) (120) (40) (210) (370 480) (60) (40) (40 290) (20880 110) (170) (70) (60) (50 50 140) (50 1660) (40 90) (410) (60) (3680 90) (70) (140 70 220) (90 100) (160) (970) (60) (50 90) (100) (50) (110) (130) (80) (350 1660 140) (50) (60) (70 220) (110) (60 9870) (60) (50) (850) (50 520) (60) (70 100) (60) (140 50) (280) (50) (130) (40) (140) (50) (50) (120 1270) (500) (70 240) (180 60 980) (140) (40) (30) (70) (90) (130 80) (40) (150 80) (330) (1010 60) (210) (70) (50) (240) (300) (350) (140) (840) (220) (70) (750) (440) (270) (80 3100) (210) (540) (40) (430) (60) (80) (70) (60) (60) (80 40) (40) (40) (100) (4570) (1880 50) (750) (2140) (1630) (80 80) (110) (60) (50) (350) (80) (40 110) (30) (110) (40) (170) (480) (110) (750) (60) (5120) (100) (50) (90) (1130) (70) (60) (70) (3310) (50) (60) (110) (80) (60) (480) (1460) (220 540) (90) (80) (80) (30 70) (2320) (110) (60 2030) (60) (40) (80) (120) (70) (310) (4890) (50) (350) (40) (120) (60) (90 40) (80) (40) (300) (1210) (350 60) (40) (50) (40) (40) (6120) (300) (310) (130) (80) (60 30) (30) (600) (310) (11220) (1600) (980 490) (60) (1040) (410) (1110) (70) (230) (120 5320 5790 2600 7930) (500) (320) (100) (250) (70) (140) (950) (390) (270) (280) (40) (540) (70) (1060) (420) (300) (250) (260) (410) (110) (40) (210) (110) (680) (3500) (940) (480) (1680) (50) (650) (190 220) (40 80 480) (420) (120) (550) (260) (540) (240) (3210) (230) (220) (120) (1450) (200) (90) (310) (2310) (70) (110) (250) (570) (270) (70) (70) (350) (130) (50) (130) (5700 120 60) (110 480 620) (3200) (30 220) (80 90) (40 1070) (40) (220 110 120) (350) (150 70) (260 80) (30) (80) (1850) (1500) (70) (60) (90 440) (220) (60) (100) (400) (280 50) (80 430) (40 90) (1240 70) (440) (430) (190 70) (210 150) (100) (40 1170) (1530) (80) (250) (150) (80 60) (430) (130) (110 70 60 50) (100) (1310) (50 140) (110) (60 90) (60) (300) (30) (270) (200) (100 40) (330) (60) (70 40) (90) (600) (30) (50) (140) (30 50) (40 150) (100 70) (1540 100 90) (680 130) (60 40) (340) (60) (200) (100) (80 50 100) (40) (60 70 90) (40) (30) (150) (100 330) (210) (690) (190) (700 50) (60) (310) (1310 30) (350) (9460) (40 90) (40 140) (830) (1030) (180 40 50 180) (90) (40 60) (750 120 200 120) (110) (3170) (50) (310) (210) (100) (80 150) (120) (600 60) (120 40) (90) (100) (230 90) (430 110 30) (260 60) (120 100) (410 40) (80) (30 30) (140) (190) (180 60) (950) (50 60) (70) (70 220) (90) (70) (240) (80) (80 150) (450) (280 3690) (880) (70) (140) (150 90) (460 250) (80) (50 3190 80) (3060 40) (30 1900) (50 40 80) (220 180) (70) (130 60) (150) (30) (50) (100) (140 930) (180 110 130) (110) (240 170) (160 60) (50) (100 30 100) (700 90) (330) (50 240 90) (210) (140 50 150) (30 30) (40) (540) (150 110 40 60) (510) (210 90) (390) (60 120) (2650 40) (150 80) (70) (50) (90 150) (60) (100 90 220) (110 230) (190 40) (510) (150) (80) (80 50) (70) (60) (130 240) (700) (110 140) (90) (200) (60) (660) (60 100 130) (170) (1190) (1250) (100 530 150) (250 70 140 90) (50 120) (910 60) (340) (30) (60) (50 110) (40 110) (140 80) (430 180 90) (30) (90) (550) (50 110) (720 320) (60 50) (40) (40 40) (630 60 60) (80 300) (110) (150 150) (50) (50) (60 350) (280) (130 80) (260) (760) (80) (50) (110 130 60) (30) (50 150) (90) (280 70) (1570) (140 40) (70) (180) (1020) (2010) (250 50) (70) (310 150) (90) (60 120 60) (100) (60 70) (1340 50) (380) (40 200 100) (2450 60) (80) (60 100) (60) (50) (80) (2230) (230 410) (270 50 600 70) (80) (200 110 90) (30 100) (260) (300 440) (30 50) (80) (130) (30) (60) (70 5230 150) (40 50) (150 40 70) (60) (540 160) (70 70) (650) (100) (110 210) (260) (240) (80) (180) (40) (40 50) (80 930) (90) (280) (2020) (50) (40) (100) (60 510) (1100 1050) (2030 30 370 80) (60) (50) (850) (690 290) (50) (60 60) (60) (60 1270) (50 60) (100 500) (180 140 90) (60 880) (270) (110) (70) (260) (130) (240 110) (1560 90 100) (420) (40) (2650) (2230) (80) (50) (990 60) (260 40 240) (2330 40) (90) (210) (40) (30) (90) (110) (130) (320) (60) (450 40 90) (2250 650) (100 1130) (4610) (40) (60) (2230) (310) (210) (300) (140) (140) (120 110) (60) (110) (90 400) (650) (200) (450) (40) (80) (60 40 60) (250) (700) (80) (30) (90) (950) (100) (90 210) (550 1940 90) (480) (70) (340) (280) (70) (50 60 1100 40) (670 390) (50) (140) (200) (210 60) (90) (1160 470) (50) (630) (470 120) (620 210) (200) (130) (40) (140) (150) (1340) (60) (100 50) (730 50 90 280) (100) (110 410) (7400 1610) (70) (50) (70) (420 120) (240) (50) (50) (200) (230 520 350) (70 50) (90) (280) (120) (330 500 70) (90 100) (50) (130) (40) (40) (100) (220) (700) (220 170) (170 730) (60 30) (180 80 50) (180) (220) (50) (60) (120) (70 40) (100 980) (270 1750) (410) (90 340 1130 50) (110 70) (80) (160) (180 50) (1100 40) (1820) (90 350 70) (50) (60 710) (180) (460 350 110) (380) (140 150) (1200) (90) (250) (40) (70 60) (400) (170) (40) (140) (1120 70) (40) (60 350) (60) (100 280) (260) (620) (100) (120) (830) (110 90) (210) (170) (400 910) (110) (90) (180 100 150) (50 370) (90 60) (120) (40) (870 60 70) (340 60) (400 60) (240) (220 2150) (60 50) (40) (50 80 60) (100 170 230) (970) (70) (60) (360 50) (120) (100) (40 70 120 800) (310) (110 300) (1490) (200) (60) (40) (130 120) (100) (540 70) (3570) (500 2840) (2710) (310) (260) (530) (110) (70) (200 40 120) (130) (130) (150 90) (60 810) (140 100 1810 90 1150 100 80) (280) (110 60 970) (40) (40 40 150) (570) (150) (210 130) (360 540) (70 110 60) (390) (310 110) (170) (50 60 710) (250 130) (100) (50) (190) (110) (1400 40) (1420 130) (30) (40 2090 90 150 110) (50) (160) (40 80) (560 60) (390 40) (2030 130 40) (260 280) (100 60) (140 120 90) (11930) (120 160) (50) (290 50) (210 100) (390) (440 50) (50 50) (1540) (1140) (1080 200 50) (70 80) (80 120 30) (210) (60) (100 40) (420) (90 70) (440) (540) (50 30) (40) (40 460) (60) (1190 40 180 40) (390) (1060) (70 140 60) (150) (260 640) (40 80) (80) (140) (40) (50) (270 110 100 240) (180) (50 40 70) (60) (110) (90) (70) (50) (240) (750 70) (110 70 220) (440) (100 50) (80) (90) (250 300 360) (70) (50 60) (290) (250 360) (80 50 240) (130) (260) (120) (80) (380) (40) (60) (70) (50 30) (210) (70 150) (30) (150) (70) (30 1030) (4070 50) (240 40) (370 640) (160 180 50 190) (280 200 840) (110 150) (50) (80) (250 50 360 40) (170) (120) (70) (130 140) (170 80 230) (1350) (80 60) (2380 2880) (1200) (1170 70 100) (650) (190) (40) (40) (50) (50 110) (40) (150 50 30) (250 1010) (60 190) (30 800) (520 620) (40) (830) (160) (80) (170) (390 90) (200 130 50 70 50) (50) (120) (710 40) (30 80) (220) (240) (1110 30 30) (60 1610 310 140) (300 30 30) (540) (200) (100) (50) (90 50 990) (70) (1260) (80 200) (70) (70 120) (550 360) (40) (180) (280) (760 60) (50) (100) (70) (60) (40 2050 40) (480) (80) (30) (150 1340) (80) (150) (30 1060 620 170) (250 50) (910) (160) (70 80) (1980) (300 50) (460 3870 760) (1720 290) (50) (210) (60 420) (200 390) (170 40) (40) (130) (90) (100) (460) (270) (110) (90 190 40) (90) (90) (70 100) (350 270) (120 40 220 60) (50) (40) (230 30) (50) (370 240 40 90 50) (400 630) (130 650 290) (40) (100) (590 70) (200 150 1220) (450) (330 240) (140) (200 60) (1620) (70) (50) (100) (840 200) (590) (80 100 120) (40) (480 1230) (120) (160 120) (80 80) (150 1400 50) (50) (190 100 140 70) (600) (50) (30) (70) (60) (200 60) (60) (440) (250) (30) (150 100) (100 60) (200) (310) (70) (60) (820) (14710 1120 270 60) (70) (130 70) (930) (1440 140 90) (830) (200) (120) (620 200) (150 80 80) (360) (1600) (90 60) (4060 100) (40 360 60) (140) (410) (260) (100 100) (270) (50) (60) (50) (70) (100 60) (40) (1260) (70) (150) (210) (760 80) (1610 660) (110) (560) (70) (310 50) (420) (360 30) (160) (40 160 60) (380) (70 50) (1670) (180) (40) (60 70) (650) (60 130) (290 50) (280 630) (130) (70) (100) (250) (290 40) (170) (130 470 1010) (40 160) (2490 50) (260) (230) (1050) (450) (250) (230) (120) (100 570) (50) (1230) (50 480) (100) (40) (640) (50) (550 50 110) (1850) (200) (90 80) (990) (740 50 40) (300 160) (60 150) (50) (60) (50 90) (60 200) (40) (80) (130 80 170 60) (90 140 160) (340 700 60) (30 600) (410 110) (680) (900 100) (70) (180 210 70) (1940) (210) (100) (4640) (130 40) (1230 40) (600) (110) (50) (70) (60) (70 3260 220 610 810) (110 140 90) (60) (150) (130) (50) (310) (80) (1160 60) (300) (340) (160) (70) (1400) (2770) (140) (100) (470) (50) (70) (1150) (170 80) (40) (50) (60 150) (830 450 50) (210) (160) (60) (300) (60) (90) (290 60 40) (130) (310 430) (180) (330 70) (150) (100) (50) (40) (50) (50) (70) (60 180) (100 30 60 500) (500 2000) (80 80 1900) (80 170) (1440 520) (110) (40 100) (120) (100) (30) (110 70 260) (390 270) (140) (140) (60) (120 40) (1150 90) (180) (2770 250) (50) (60) (840) (380) (70) (60 2150 200) (150 2370) (140) (30 760 100 460 250) (930) (140) (40) (380 60) (140) (150) (70) (200) (660 60 90) (100) (90 170 140) (160) (50) (50) (120) (500) (50 330) (170 100 30) (50) (680 130 430) (170) (100) (50) (430) (6710 260) (600) (100) (360 40 60 40) (830) (220) (60 180 310) (1020 130) (50) (40 60) (390) (50) (70) (60 680) (70) (90 50) (550) (10130 130) (310) (3940) (190) (140) (60) (90) (120) (280 430) (100) (120) (120 40 440) (280) (70 70) (100) (600) (60 90) (490) (500 610) (10230) (6240 140) (60) (40 1210) (70) (760 150) (270) (110) (2160) (4880 90) (60) (1280) (40) (650 100) (30) (100 50) (260 120) (1770 40) (600 1260 1240) (15280) (180) (50) (350 40) (420) (270) (50) (70) (40) (130 130) (30) (150) (170 80) (40) (100) (100) (70 2510) (170 40) (60) (300) (170 160) (550) (70) (2190) (80) (80) (4550) (100 110 110) (200) (8280 290 40 40) (50 330) (60) (180 40) (30 120 30) (160 160) (430) (400) (40) (90 110 60) (150 230 40) (410) (140 70) (170 140) (80 90) (30) (1420 120) (450 600) (60) (80 100) (100 650 320) (120) (50) (50) (1330) (60 100) (160 90) (80) (30 580 260) (360) (190 90) (30 180) (100) (300) (40 50) (100) (30) (600 190) (50) (250) (3190 50) (1980) (90) (80) (100 300) (520) (730 80) (70 290) (110 50) (70) (70) (690) (70) (50) (80 70 830 70) (70) (90 340) (40) (120 150) (340) (370 210) (150 50) (190 50) (200) (370 70) (40) (40 170) (120) (70) (80) (60) (90 90) (1080 40) (40) (710 40) (60 260) (30 180) (40 280) (60) (140) (80) (150) (180 120) (70) (4160) (70) (50) (410 180) (70 180) (70) (90) (40 400 40) (130) (1710 250) (100) (40 150) (290 40) (80) (520 170) (90 150) (1980) (160) (110 60 650) (100) (220) (60 40) (60 70 30) (420 1070 100) (1560) (150) (60 60) (90) (280) (350) (5750 140) (50) (80) (130) (120) (250) (30 30) (110) (50 50) (50 60) (40) (110 90 130 150) (2640 270) (70) (190 4810) (680 2300) (180) (30) (440 270) (60 50 520) (50 50) (60) (60 180) (60 370) (770) (50) (190 60) (80 90) (250 170) (40 80) (160 60) (80) (70) (90) (480) (70) (130) (60) (130 300 100) (210) (240) (240) (60 50) (40) (30 180) (120) (80) (330) (150) (150) (220 520 180) (110) (40) (220) (50) (80 720) (30 100) (2310 140) (80) (170 2100) (460) (110) (70) (250) (80) (200) (5130) (70) (70) (310) (90) (70) (70) (60) (540) (70) (90) (80 100) (80 80) (100 90) (50) (100 820) (60) (60 80) (70 70) (270) (70) (80 550) (280 120) (80) (80) (570) (40 1180 370 70) (40) (260) (60) (40 50) (70 580) (350) (350 170) (80) (890 80) (50 230 280) (80) (70) (930) (110) (250 170) (90 60) (550) (70) (60 240) (80) (110 2500) (350) (1090) (40 60) (260) (30 110) (100) (780) (50) (550) (100) (360) (30) (40) (270) (80) (90 40) (90) (1120) (40 90) (130 150) (720) (240) (210) (70 180) (60) (170) (160) (220) (130) (670) (50) (50) (240 240) (100) (130) (2350) (80) (400) (140) (200) (1400) (40 450) (1000) (40) (150 150 480) (70 90) (90 1010) (1970) (1300 170 70) (50) (80 100) (490) (30) (90) (50 210) (150 110 110) (40 80 90) (30) (100) (420) (140) (220 30) (250) (80) (50) (90) (280) (790) (90) (720) (300) (90 40 90) (430) (60) (60 100) (740) (110) (3690 30) (50 150) (330 80) (150 60) (100) (190) (180) (70) (1430) (800 30) (2200) (5700 800 3560 780 250 90) (1650 30) (2320 370 120 90 120 70) (80 50) (80) (40 400) (220) (40) (100 300) (550) (260) (40) (70) (140) (70 130 30) (40 140) (200 40) (100 150) (540 60 180 60 160) (100) (6820) (40 100 40) (30) (150 260) (100 420 140) (70 300 60) (860) (30 110 130) (60) (110) (810 30) (150 120) (70 70) (580 130 80 30) (5780 170) (60) (1720) (50 80) (80) (180 290 590) (60) (40 70) (80 40) (50) (200) (1240 320 40 350 60) (100) (40 140 770) (120) (130 70 440 70) (160 60) (160) (50) (120) (140) (300 70) (360 60) (1940 100 60) (640 370) (160) (80) (70) (40 80 50) (320) (40 60 220 190) (80) (80 90) (330 570) (700) (620 60) (160) (50) (30) (40 120) (680) (60) (1400 90) (40) (380) (50 120) (1460 160 110) (360 60) (100) (150 60) (90) (70) (4400) (2730) (300 80 100) (5180 70) (70 190) (30) (1260 550 170) (50) (100) (60 90) (340) (100) (260) (130) (650 50) (5750) (100 60 40) (800 40) (30) (390) (120) (50 390 200) (60 60) (40) (60 100 60 410) (140) (530 200 50) (90) (90 330 70) (150) (2490 560) (40) (310) (70) (1660 50) (40 170) (30 110) (90) (3390) (60 40) (400) (110) (80) (900 280) (120) (60) (630 130) (70) (170) (50) (1880 50) (70) (130 380 50) (40) (140 40) (160) (120 50) (50) (40 710 140 60) (2760) (70) (90) (70) (3610 50) (440) (1400 40) (70) (250 50) (70 100 270 40) (50) (30) (40) (140) (40) (150 50) (140 40 110) (460) (40) (30) (160 140) (510 70 150 320) (90) (80 60 80) (110 100 40) (90) (30) (70) (110 130) (170) (80 50) (230 60 40) (130) (400 40 110) (40 40) (50 200) (40) (130) (470 150) (60) (50) (3780 100) (200 320 30) (100) (970 110 70) (40) (100) (60) (60 40 60) (310 260) (430) (90) (280 290) (70 90) (250) (220) (70) (60 40) (80 30) (150) (90) (120 230 50) (70) (70) (5690 70) (50) (850) (150 350 50) (2540) (50 130) (120) (70) (90) (90 150) (110 30) (140) (180 150) (6850 90) (50) (130 610) (70 100) (60) (250) (1360) (90) (90) (30) (50 100 40) (40) (370 90) (110 60 50) (60) (180 120) (220 40) (200 100) (400 140 540) (110) (50 80) (60) (220) (1350) (70) (430 30) (40) (1050 80) (180 130 40) (360) (50) (100) (70 30) (860) (1130 40 180) (120) (40) (50) (120 50) (40) (240) (70) (80 790 80) (80) (350 160) (80 60) (50) (70) (190 260) (440) (90 190 150) (110 50 90) (120 130) (60 60) (110) (60) (80) (80 90 50) (70 30) (1730) (30) (40) (40) (60) (140 300) (70) (240) (60) (4220) (170 290) (280 50) (80 710 50) (90) (40) (200 290) (160) (60 480 130) (100 80) (200) (80) (100) (100) (260) (2060) (1400 1170 30) (60) (40 410 90 90) (80) (400) (1620) (40 100 50) (190 80) (50) (90) (100 70) (60 1010 120 40) (40) (30) (50) (5500 60 60) (70) (30) (50 50) (80 60 460) (70 90) (100) (380 130) (50) (90 270 50) (40) (40 600) (170 70) (2120) (100 50) (100 50) (230) (780 210) (2220 70) (210) (600) (40) (50) (340) (300) (200 90 100 430 70 50) (70) (1760 90) (180 130 230 520) (70 60 60) (110) (120 90) (250) (120) (180) (430 150 100) (110) (340) (160) (100 30 170) (2360 5750 110) (120) (280) (160 130 60 60) (240) (1630) (120) (60) (2130 80 250 50) (3960) (170 40 40) (80 1230) (40 80) (50) (70) (2770 210) (14630 770) (70) (320 670 90 280) (100) (160) (60) (90 770) (200 60) (140) (540) (40 70) (60) (1370 120) (160) (30 160) (150 290 50 150) (1370 780) (50) (50) (50) (280) (50) (160 50) (60) (70) (170) (780 100) (420 100) (80) (300 40 40) (40 210) (100) (80 440) (1660) (1960 70) (790) (40) (50 60 1170 260) (80) (80) (70) (50) (40) (40) (70) (150) (50 60) (60) (420) (1250 190) (90) (130 400 110) (90 50) (80 190 50) (120) (100 400 50) (1630 80 40) (40 110) (940 680) (110 50) (120 60) (280) (120) (90) (50) (60) (1480) (180 590 1200) (30) (90) (30) (190 100 110) (870 2480) (70) (150 50 190) (40) (290 390) (170) (40 50) (50) (70) (210) (40 320) (210) (80 70) (40) (80) (60) (310) (290 120 3510) (130 6840) (40) (70) (220 80 400) (40 40 170 90) (60 230 50) (40) (590) (60) (40) (60 70 680 100) (60) (480 210) (780) (80) (30) (160 200 250 90) (740 100) (220) (90) (1090) (2580 380 90) (40) (60) (880 200 40 100 150) (50) (40) (40) (250) (70 40 300) (160 80) (50) (60 1650) (140) (580 180) (50) (670) (190 130) (80 2160 110) (1900 50) (3280) (130) (90) (40) (40 1180 660 60) (420) (200 180) (700 1240) (480) (80 120) (40) (130) (330) (300 90) (80) (150) (160) (1350) (50) (50) (400) (110) (70 60) (90) (120) (160) (50) (380) (40) (150) (60 1270 680) (70) (160) (4690 500 50) (920 110) (50) (40) (100) (110) (3310) (380 90 70) (80) (70) (450 60) (80 70) (70) (80) (50) (60 190 110) (40) (70) (160) (70 70) (30) (70) (50) (50) (550 1260) (40) (270) (660) (160) (110) (130 50 50) (450 130) (80) (100) (70 60) (140) (60 60) (1540) (50 80) (890 140 190) (120) (150 110 50) (90) (1350 110) (80) (300) (40) (90 90) (250 60) (470) (170) (5430 650 320) (110) (70) (220) (360 100) (80 50) (150) (80 30) (330) (60 30) (40) (150) (2320 120 40 130) (80 170) (140) (50) (90 40 1790) (50) (60) (140 80 150) (60) (130 60) (180 60) (340) (880) (12600) (6560 130) (340 110 60) (120 70) (110 180) (170 90) (50) (470 640) (150) (5800 3210 40) (70) (70 100 330 60) (290) (100) (270 130) (60) (50 80) (490 170) (50) (130) (400) (170 60) (60 140) (30) (110) (80) (120) (140) (60 80) (790) (60 140) (60) (90 280) (50) (200 250) (320 120) (50) (50) (170) (180 30) (150) (120) (300) (2310 50) (40) (130 140) (370 80) (21350 40 450 160) (1020 180) (210 100) (40) (150) (50 60) (340 140) (270 170 100) (40) (1180) (120) (150) (90) (80) (110) (100) (150 440) (250 120) (50) (90) (1020 50 150) (4510) (60) (70) (200 60) (150) (50 40 90) (50 30) (350) (310 110) (250) (60 60) (230 40 180 100) (60) (40) (9450 100 120) (50) (70) (90) (150) (60) (1490) (9020) (110 60) (90 60 160 140) (40) (30) (140) (60 50 150) (140 130) (1460) (12540 150) (60 180 1040) (130) (13120 60) (60) (40) (300) (160 360) (120 70) (60 60) (220 70) (40) (80) (60) (40 110) (90) (110) (100 50) (70 110) (240) (50) (60) (50 160) (180) (40) (1550 130 250) (500) (680 120) (360) (8510 90) (180) (30 1090) (50) (50) (40) (40) (40 140) (40 40) (410) (180 60) (80) (90) (50) (110) (950) (60) (60 70) (50 160) (70 60) (240) (70) (80 780) (390 50) (70) (100 50) (1020 70 120) (60) (840) (70) (30) (40) (100 70) (650 2730) (170) (30) (50 150) (50) (170 70) (50) (30 50) (70) (100) (110 80) (1410) (5940 250) (50) (50) (1220 40) (60) (110 80) (120) (950) (330 80) (120) (70) (340) (130) (40) (60) (1600) (560) (5750) (190) (40) (1070) (3110) (90) (30) (3800) (100) (530) (900 50 110) (1140) (150 80 60) (50) (80) (60) (180 70 50) (100 70) (40) (180) (90) (260) (400) (80) (150) (260 50) (40 40) (110 70) (1410 60) (1300) (40 690) (120 30) (50 80) (90) (60) (220) (160 60) (100) (1440) (90) (150) (110) (100 60) (100) (260) (140) (3730 90) (100) (100 30) (150) (850) (690) (40) (80) (290 70) (310) (170) (100) (120) (9330) (3610) (30) (110 50) (8690) (170 70) (70) (120) (70) (140 180) (60) (640) (50) (70 170) (120) (790) (70) (50) (80) (1200) (270) (90) (40) (50) (210) (190) (290) (330 40) (150) (80) (70) (100) (1780 180) (50) (60 60) (420) (60) (100 150) (70) (580 130 60) (130) (80) (910) (230) (90) (100 80) (60) (770 40) (50) (10370 50) (50) (70 130) (180 250 100) (40) (50) (100) (60) (60) (40 1150) (70) (270) (2400 60) (290 50 40) (1590) (60) (40) (320) (150 190) (180 50) (110) (70) (450) (50) (3320) (580 60) (100) (80) (130 130 80) (140) (100 110) (40) (70) (60) (80) (60) (70) (3490 50 80 260) (70) (160 80) (70 70) (30) (80) (50) (170) (80) (1730 140 120) (80 40 250) (30) (130) (2020) (100) (100 60 100) (70) (80) (120) (70) (410) (40) (100 150) (140 70) (60) (70) (90) (60) (50) (230 30) (60) (90) (90 110) (50) (1350) (200) (3580) (530 230) (60) (60) (100 120) (140) (150) (40 350) (90) (30) (140) (70) (80) (50) (40) (90 50) (50 30) (60) (80) (5460 90 40) (50) (70) (80) (50) (60) (330) (100) (70) (30 110) (180 380 60) (90) (420 40) (70) (140) (100) (70) (80) (180 70) (990) (110) (130) (100) (60 190) (840) (60) (380) (80) (110) (70 190) (70) (70 120 70) (60) (90) (40) (110 100) (60 990) (100) (60) (60 60) (80 160) (90 90) (130 250) (90) (70) (90) (350 70) (160 60) (740 60) (50 170) (60) (250) (110 4550) (160) (110) (60) (100) (60) (410) (100) (70) (60) (1950) (90 70 140 70 70) (200) (200 70) (320) (800) (40) (70 40 70) (120) (80) (680) (60) (160) (330 330) (60 30) (60) (30 60 110 60 70) (80) (200) (160 210 320) (60) (100) (80) (580 160) (60) (200) (80) (50) (1680 60) (190) (350) (110 830) (630) (90 60) (250) (350) (60) (110) (70) (160) (90) (220 300) (480 920) (620) (150) (680) (80 270) (60 2130) (60) (410) (250) (170) (60) (70 90) (30) (60) (210 900 50) (40) (980 60) (140 100) (30 160) (50 240) (100) (60) (160) (8300 200) (30) (300 1440) (70 280) (50 70) (200 480) (100 70) (100) (110) (400) (70 50) (80 100) (1200 200 80) (50 590) (80) (80) (4590) (220 80 330 70) (480) (260) (80) (1630) (80) (70 40) (60) (550) (60) (100) (50) (60 580) (80 100) (30) (150 50 150) (40) (60) (340 60) (130) (70) (770) (100) (470 30 60) (40) (1000 550) (180) (140) (90 120) (110 40) (300) (360 40) (200) (40 90) (150) (40 210) (90) (70 80) (300 90) (1420) (230) (40 120) (100) (90) (70) (80 80) (130) (190) (70) (40) (70 60) (9080) (60 150) (80 740 170 90) (40 80 1020) (70) (410) (360) (8240 210) (3150 150 470) (130) (300) (30 60 60) (110) (40) (40) (80) (170) (130) (40 40 80 70 740) (100) (2260) (140) (70 160) (430) (70) (50) (50) (120) (650 300 40) (80) (170) (1010) (80 300) (240) (70) (160) (240) (30) (150 90 90) (230) (40) (110 50) (50) (100) (8740) (50) (3990 130) (80) (50) (150 40) (30 30) (620) (1100 660 250 40) (3950) (30) (40) (1200 60 70) (1200) (290) (90 700) (40) (180) (800) (30) (90) (40 80) (540) (2520) (90) (70) (1340 60) (770) (520 30) (100) (60) (220) (60 70) (140) (4510) (3130) (30 30) (470) (1750) (80 390 130 120) (30) (360) (560) (80) (100) (80) (110) (1990) (110) (40) (100) (140 320) (90) (130) (80 30) (100 4720 420) (390) (1390) (1980) (90) (150 100 60) (80) (210 1090) (210) (90) (90) (50) (260) (1010 360) (50 40 140) (80) (60) (100) (70 40) (90) (110) (420) (60 40) (40 80 90 1170 80) (2780) (80) (60) (40 180) (50 110 360) (150) (210 110) (90) (70) (1650 110 790) (180) (40) (140) (710) (50) (40 290) (50) (290) (80) (100 40) (40) (40) (70) (440) (50) (590 50 50) (40 130) (190 670) (70 560 3790) (80 1370) (560) (70) (5070 90) (240) (140) (30 30) (350) (180 2130) (70) (70 50) (60) (80) (100) (210) (100 2860) (70) (200) (50) (210 80) (70) (220) (690) (1790 130) (60 260 410) (80) (80 400) (1490) (200) (120) (140) (40) (340) (1440) (5470) (40) (3430 40) (80 140 80) (110 40) (70 70 80) (240) (890) (120 60) (100 50) (70) (70) (60 1350) (110 1110 110 200 190) (200) (40) (90 90) (750) (190 40 390) (500) (120) (180 120) (300) (80 50) (40) (70) (390) (90) (530 240) (50) (80 120) (100) (2310 80) (120 100) (260 180) (120) (90) (40) (560 30) (90 90) (170) (1260 370) (50) (170 110) (1360 500 60 80) (1920) (60) (1180 30) (40 40) (80 50) (360) (250 390 220 40) (40) (600) (30) (60) (110 720 40) (80) (40 460) (600 2510) (100) (100 90) (350 40) (40 60 150) (90) (90 60) (40 90) (260 290 100) (90 60) (140) (90) (50) (60 100) (70) (410) (210) (40) (150 70) (420 70) (30 130) (30) (50) (210) (240) (80 30) (730 590) (50 70) (1530) (50 370) (90) (450 70) (60 550) (60) (120) (140) (180 50 100) (100) (50 60) (70) (60 60) (140 90) (60 610) (2590) (230 900) (60 70) (740 100) (50 320 50) (60) (50 340) (860) (100 290) (90) (40) (40) (60) (140) (40 600) (820 40) (110 70) (250) (40) (720) (30 110) (100) (230) (50 170 50) (170) (150) (130) (460 610) (240 330) (40) (60) (150 360 60) (200 50) (50) (50 80) (50) (140) (4300 70) (60) (90) (60) (40 70) (170) (120 60 70) (150 40 80) (270 220) (1300) (210 60) (40) (130 280 210) (50) (220) (60) (70) (1260) (290 420) (160) (180) (700) (100 70) (90 180) (290 140 150 270 50) (380) (40 250 320 160) (120) (300) (80 100) (430 50) (60 90) (60 80 110) (50) (1320 490 50 40 100) (60 60) (910 170) (60) (290) (550 30 160) (560 40 90) (150) (50 110 60) (60 50) (40 280 90) (70 30) (210 40) (100 140 40) (70) (210 50 40 130 60) (100) (330 110) (190 750 140) (40 110) (50) (260) (50 120 790) (120 160 80 60) (40) (40) (100 70 80) (1440) (840 270 50) (160 60 70) (40 220 110) (110 80) (40) (600) (60) (50) (140 140) (70 210) (60 60) (60) (610) (3140 70) (260) (220) (590 100 40 100) (160 40 60) (70) (150 30) (90 130) (270) (130) (170) (2050) (40 40 40) (710) (140 40) (680) (50 80) (630 60) (120 90) (50) (170 70) (350 50 450 90) (470 90 2190) (60) (320 70) (100 380) (70 430 320) (30) (270 50) (440 110) (590) (80 60) (120 110 100) (240) (70) (70) (370 320) (100) (250) (110) (50) (1060 50) (40) (70 100) (1020 7010) (2540) (460 130 280) (110 60 100) (540) (180 520 100) (240 90) (410) (170) (310 70 520) (60) (1280 40 480) (60 70) (600) (90 100 70) (50 30) (130 610 50) (70 140 50) (50 560) (340 100) (180 50 250) (130) (100 150 80) (90) (110) (130) (50 30) (40 1540) (50) (50) (260 70) (230 440) (250 40) (720 60 60) (70) (70 30) (320 110 170) (280) (170 920) (40 120) (40) (250 50) (1010) (40 150 540 90) (50) (420 70 140) (70 50) (200 60 50) (60) (70 540) (50 670 350) (60 70) (3370) (250 170) (210 140) (230) (70 1730) (60 300) (150 190 870 40) (50 110) (90 350 40) (80) (40 280) (4230 70 540) (60) (160 40) (290 80 150) (510 350 120) (200) (40) (300 80) (150 30) (100) (90) (30) (140 340 210) (430) (60) (50) (300 90 100 100) (80 70) (310) (120) (40 90) (1440) (70) (640) (30 70) (70) (240 100) (150) (250) (460) (130 200 40 320 1000) (50) (300) (11950 40) (110 310 60) (370) (1360 140) (140 140) (130 70 30) (40 540) (60 50) (130 50) (100) (2530 450 870) (200 380) (190) (210 160) (880 130) (140) (60) (440 70) (350) (50) (250) (4140 70 140) (360 170) (640 270) (60 80) (40 100) (980 60) (110) (250) (60 60 230 460) (250) (60) (100) (370 70) (40) (360) (170) (160) (170) (440 150 100 40) (1080 30) (140) (50) (3450) (60 510 170) (150) (70 170) (70) (60) (100 60 50) (3420 80 40) (50) (170 70) (2670 10530 21920 420 2870 90 60) (90) (440 1500 100) (40 6950 140 40) (180) (180) (60 120 130 80) (160 390 50 80) (120 70 70 120) (70) (700 200 50) (70) (40) (80) (480) (280 100) (50) (290) (90) (120) (70) (160) (50) (130 90) (110 60 160) (50) (50 100 620) (170) (90) (90) (150 70) (60) (60) (100) (230) (290) (50 190 120) (4130) (250 90) (50 200 300) (1220) (110) (40) (150 100) (100 60) (40) (120) (400 390) (70) (150 240) (460) (260) (100 50) (400 190 150) (70) (70 120) (80 130 40 170) (540) (60) (160) (240) (40) (1220 970) (3100) (400) (30) (1140 90 120 360) (100 80) (60) (3670 5310 40) (260 60) (160) (70 170) (200 90) (90 90) (100) (30 50) (110) (40 150) (410) (100 290 60) (500) (100) (100 120) (150) (90 120) (70) (460 40) (150 30) (60) (30) (40) (50) (560) (250 150 2130) (240) (110) (190 100 50) (70) (40 90) (50) (180) (120 1000) (80 80 450 80 80 200) (110) (540 40) (50) (330 90) (400 360) (120 130 460) (210) (70 220) (100 50) (40) (180) (90) (140) (80) (100) (90) (330) (70 110 50) (3710 1940) (310) (190 60) (540 110 100) (90 620 80) (210) (170) (120) (460) (230) (30) (70 90) (140) (520) (150 100) (130) (390 4360 40) (320 50) (130) (120) (60) (470 210) (180) (120 1120) (450 220) (630 50) (230) (80) (90) (140) (240) (540) (590) (30) (620) (150 40 90 70) (80) (100) (40 90) (100) (420 300) (650 140 70) (710) (430) (80) (160) (40) (80) (230 90) (100) (110) (200) (70) (40 70) (340 90) (100) (110) (50) (60 950) (240) (190) (80 430) (50) (100) (100) (200 630) (290) (160 450) (370) (250 120) (850) (140 60 250) (80) (500) (30) (230) (650) (80 100 550) (130) (110) (80) (80) (490 370 60 250) (50 230 160) (60) (40 60) (80 3100 2960) (60) (690 70 110) (60) (120 1940 150 710) (60 1420) (40) (70) (860) (2410 50) (80 850) (30 310) (90) (230) (470) (60 90) (610 60 40) (100) (60) (50) (40) (50) (200) (40 160) (70 1290) (270 460 40) (40) (140 70 70 80) (60) (650) (620) (90 300 110) (120) (2970 210 30 130) (40) (260) (80) (250 110 70 240) (40) (90 40 50) (80 60) (100 130 50) (100) (310) (190) (170) (140) (180 60) (210 250) (50) (40) (100) (420 190) (280) (1820) (590) (180 80) (400) (710) (180) (180 160) (320) (400) (220) (2890 190) (440) (2530) (60) (90) (40) (60) (350 300) (260 140 40) (500 280 80) (480) (30 220 60 30) (40) (370) (340 160 220) (330 40) (70) (60) (50) (120) (7520 400) (840) (60 60) (2120 7920 920 180 280) (50) (380) (1330 30) (150 750 90 40) (1050 180 40 50) (230) (30) (60) (40) (30 70) (660) (50 40) (380) (1690) (80 200 150) (140 70) (710 100 300) (80) (120) (50 60) (1140 90 70) (270) (390) (30 120) (160) (40) (650 70 130) (40 40) (40) (300) (350 60) (80 100) (2080) (50) (90) (90) (250) (2120) (590 60) (230) (70) (60) (170) (1030 60 90 60) (1000) (450) (90 70 40 60) (60 50) (1150) (1210 40) (50) (70 170 80) (470 70) (850 180) (220) (90) (80) (70) (50) (80) (40) (200) (300) (80 60 60) (500 50) (50 40) (110 160) (200) (60 650) (50) (430) (30) (170 650) (610 190 50) (60) (50) (150) (500 60 50) (70) (200 150 40 40) (200 1030) (4390) (60) (70) (390) (70 140) (130) (100) (210) (370 330) (90 60) (90) (80) (170) (100) (90 530) (40 50) (230) (80 1490) (50) (80) (70) (340 40) (100 100) (480 80 100 430) (200 510) (80 150) (150 100 50) (150 50 100) (190) (1180) (50) (900 150) (80 180) (6070 50 1090) (460) (2120 90) (210) (50 90) (130 110) (1440) (50 60) (100 890) (70 40) (100) (100 60) (140) (150) (160 1040) (70 300 350) (1160 200) (110 50) (30) (120) (160) (200) (530) (170 320 50) (70) (100 150 50) (250) (40 270) (70) (110 100) (40) (170) (270) (150 1270) (310 80) (40) (50 50 150) (100) (21600 660) (50) (260) (6560 70) (70) (50) (80) (300 2250 170) (40) (40) (120) (50) (90 230) (100) (40 100) (910) (110) (800 50 40) (60) (90) (130 260) (300 130) (120) (40) (90 40) (40) (330 50) (50) (30 110 130) (120) (560) (240) (190) (40) (80 1080 830) (490 40) (170) (30) (60 70) (90 50) (110 60) (40 70 50 60) (120) (40 200) (430 90) (150) (40) (90 100) (90 40) (120) (110) (150 3010) (60) (50) (80 90 150 80 270) (70 370) (60) (50) (680 170 40 120) (150) (2780) (1560 110) (60 90) (1680) (8370) (100) (11180 220 100) (60) (50) (50) (60 100) (160) (240) (70 100) (60 70 30) (150 50 60) (40) (30) (150 110 110 60) (11000 100) (360) (160) (700) (60 130) (40) (80) (150 120) (60) (1930) (270) (120) (1090) (60) (3630) (290) (100) (60 50) (80) (1010 60) (50) (120) (770 40 50) (320 40 40) (140) (60) (260) (280) (1550) (40) (60) (210) (110) (50) (150) (70) (940 60 400 110) (350) (70) (90) (380 1100 220 40) (90) (40) (40) (40) (60) (30) (100) (390) (90 110 60 720) (80) (100) (410 180) (40) (40 70) (900) (70) (60) (2280) (50 720 30) (100) (430) (100) (40 50 50) (190 40 70) (130) (80) (100) (610) (130 390) (4210) (50 290 90) (100) (50) (110 500 50) (50) (80) (50) (8980 30 60 70) (90 40) (90) (780) (570) (170) (60) (1910 90 60) (150 70) (200) (40) (80 60) (150 130) (220) (80) (40 7910) (50 50) (640) (80 60 60) (460) (1780) (80) (100) (60 150) (440) (170 130) (40) (230 70) (120) (50) (120 60) (70 50) (60) (40) (590 110 40) (50) (80) (1210 40) (80) (290) (210 100) (180 170) (330 160 50) (360 90) (60) (40) (260 5400 60) (110) (100 110 610) (150) (550 50) (50) (430) (60) (50) (90) (1280) (110) (280 80) (70) (30) (60) (460) (790) (80) (100) (60) (70 40) (50 340) (60) (630 80) (50 270 40) (50) (60) (80) (90) (100 40) (50 150) (70) (770) (60) (360 110 910) (190) (110) (80 3610) (90 1180) (280) (100) (60) (120) (70) (80 60) (140) (240 70) (30 80 350 30) (200) (12500 50) (100 760 90) (110) (150 40) (50) (30 60 280) (150) (70 860) (1970 70 90) (1250) (70) (120) (60 40) (40 70) (60 180 3440) (60) (120 300 90) (110) (60 40) (50) (50 40) (2650) (190) (260) (320 3050) (240 190 100 140) (80) (1150) (50 60) (60) (40 90) (170 60) (80) (130) (250) (1720 330 80) (310 30 70) (120) (1310) (180 530) (90 110) (100) (260) (50 40) (500) (100) (50 190) (90 60 60) (80) (100 60) (70 110 90 60) (70) (30) (230 80) (150 420 50) (100) (770) (60) (80) (520 120) (30) (170) (160) (60) (50) (90) (40 60) (450) (40) (560) (70 70 50) (290 60) (520) (100) (150 60) (60) (160) (100) (150) (120 90) (260) (130) (60) (60) (610) (740 120) (70) (160 40 100) (460 60) (130) (4490) (40) (80 130) (40 2450) (70 130) (100 350) (110) (290) (150 60) (260 80) (60) (40) (70) (5100) (40) (200) (900 50) (140 80) (60) (870 250 320) (70) (40) (240) (150 150) (470 60 200 50) (40 40 640) (100 30 60) (70) (100) (40) (50) (40 60) (240) (210) (660) (150) (170) (610) (920) (40 180) (50) (300 260) (4540) (80) (100) (730) (70) (70) (300 70) (30) (70) (320) (90) (150 50) (320) (110 50 70) (630 160) (280) (170) (210) (100) (3300 50 250) (160 60) (40) (490) (360) (130 100 50 240) (500) (140) (100) (100 80) (1500 40) (420) (690) (460) (90) (120 1550) (200) (100) (230) (300 50) (40) (40) (30 360) (440) (3520) (220 670) (60) (40) (50 160) (80) (50) (1100) (1310 50 30) (200) (3560) (40) (50) (300 560) (1020) (60) (160) (360 90 40) (1330) (50) (190 60 1250) (70) (100) (250 250) (370) (250) (80) (490) (50) (790 200 200) (60 100) (50) (150) (70) (50) (230) (270 1060 220) (110) (70 30) (770) (80 710) (80) (190 50) (80) (160 250) (290) (30) (290) (690) (70) (130) (60 450) (170) (650) (130) (40) (360) (230) (550) (100) (470) (680 60) (500) (40) (140) (180) (2560) (320) (200) (890) (50) (900) (360 70) (260) (90) (570) (40) (120) (40) (60) (70) (110) (560) (3260) (1290) (130) (100) (1780) (2580 1560 140) (2720 1730 570 570) (630 90) (5460 2590 540 800 60 50 50) (2380 270 350) (160) (90 200) (470 1180 70) (100) (140) (60 280 50 220) (40) (260) (30) (50) (50) (60 60 70) (60 70 400) (100 100) (1160) (90 140) (40) (200 80 660) (270) (150 70) (490) (800) (70 70) (550) (60 360) (70) (60) (230) (90) (70 160) (190) (740 220 150 50) (270 540) (2790) (100) (40) (40) (190) (760 280) (310) (580) (280) (410 7220) (170 250) (90) (200) (150 40) (6330 2670) (30) (190 40) (720) (190 340) (80 80) (90) (90) (150) (250 130) (60) (1050) (100) (70 160) (190 90) (40) (70) (3550) (260 790) (470) (440) (60 510) (90) (120) (70) (60 80 80 30) (40) (440) (150) (100) (50 540) (530) (110) (40 9130 60 100) (380 140) (70) (270 80) (100) (40) (100 160) (30 180) (260 40) (30 60) (340) (120 300 80 70) (2110) (60) (100) (410) (130 40) (70) (60 70 60 460) (1420 6760) (120 90) (1090 50) (160 60) (60 40) (190 40) (80 60 2050) (590) (110 30) (200) (160) (80 90 70) (40 40) (50) (250 40 310) (320 400 50) (160) (220 350) (50) (30) (150) (100) (90 90) (80) (1350) (110) (380) (40) (40 330 240) (430) (160) (70 40) (250 60) (70) (60) (260) (40) (60) (70) (60) (50) (50 460 370) (280) (7060 90) (110 1100) (80 40 50) (200 60) (90) (210) (170) (140) (480) (30 130) (120 40) (750) (120) (120 870) (60 60) (100 70) (60) (50) (940 210) (310 110) (70) (230 60) (110) (40) (180 120) (70) (120 180 90 50) (40) (30 250) (150 90) (110 90 280) (40 70 70) (70) (3550 210 70 100) (50 50) (90) (30 30 70) (50 60) (150 330 90) (130) (100) (150 30) (120) (150) (1440) (890) (60 30 70 170 50) (90 40 50) (110) (130) (560) (80 240) (80) (60 200 560) (840 60 870) (70) (90) (30 280) (80 310) (190 240 100) (300 70 60) (90) (90) (340 110 60) (50 340 90) (180 170) (390) (50) (70 300) (50 500) (40) (250 860) (330) (650) (60 1250) (80 70 70) (650) (50 80) (460 50) (280 310 80) (80) (60) (100 230) (60) (50) (60 930 300) (100 40 90) (610) (50) (520 120 160) (60 60 50 110) (390 40) (50 110) (620) (120 630 130 530) (60 1450) (150) (100) (120 50) (40) (150) (300) (80) (80) (150 70 30 450) (40 1130) (60) (70) (90 120) (80 100 90) (110 90) (70 430 330) (140) (190) (340 940) (3870) (40 110) (90) (220 110) (100) (80 190) (30) (40 700) (560) (130 40) (170) (110) (850) (250) (60 470) (670 430 450 40 110) (210 240 300) (350 260 50 920) (50) (1380) (70 90) (50) (50) (80) (30) (140 100) (120) (710) (200) (1120 30) (70 40 220) (290 60) (110 670) (40) (1650) (1510) (40) (250 500) (350 130 130 50) (70) (30) (450) (70) (180) (160 680) (170 290) (310 70) (190) (60) (40 420) (420) (430) (60) (30) (120) (60 230 2290) (200) (50 180) (2150) (50) (50) (180 590) (30) (90) (230 130) (80 580 1190 100) (460 430) (60 60) (50) (120) (50) (220 40) (120) (60) (80) (30 780 60) (80) (330 60) (100 90) (110 60) (80) (60) (290 40) (180) (60) (140) (160 180) (70) (380 100) (120) (110) (30 170) (110) (30 220) (850) (220) (50 60 170) (60) (80) (1410 420 60 60) (730 50) (110 820 170) (150) (400) (110) (100 40) (60) (50 670) (50) (160) (2120 50) (280 280) (60) (310 130) (40 120) (80) (60) (90) (80) (320 130) (170) (60) (80) (360) (90 1480) (80) (30) (90 40) (170) (60) (3060 620) (620) (260 1950) (260) (160 70) (70 80) (50) (40 230) (50) (40 290) (60 60) (60) (150) (180) (320) (140) (40 60) (170 110 160) (100 190) (180 330) (1520) (450) (90) (320 40 130) (1660) (80 190 150) (320 920 330 80) (50 160) (340) (80) (120 180) (130) (450) (110 50) (50) (300) (980) (80) (690 430) (60) (120) (40) (50) (430 250) (1920) (60) (530) (40) (160 70 80 870) (200 270) (50) (120) (60) (930) (70) (340) (50) (130 80) (40 80) (860) (60) (190) (30 210 100 100) (210) (60) (90) (100) (150) (400) (360 150 50) (100) (100) (410 110 220) (60) (450) (70 30) (190 270 70) (400 370 720) (100 60 150) (130) (70 1990) (40) (60) (50) (60) (330) (140 300) (50) (90) (750) (210) (530) (280 660 220) (260) (640 80) (110) (80) (70) (150) (100) (110) (140) (450) (320) (70 30 220 270) (10130 4430 60) (40) (50 110) (80) (60) (110 260 130) (630 70 250) (60 750) (1880 50) (490) (50) (480 60 80) (60) (50) (40 40) (110) (3880 50 1460 380) (110 2190 60) (10120 150 60 120 1960) (60 1140 110 210) (140 70 120) (1640) (50 250) (1070 90 2610 80) (780 100 200) (70 60) (40 110) (100 100) (570 200) (50 100 90) (50 70) (140) (210 110) (210 260) (40 1650) (90) (100) (50) (210 140) (180 70) (230 80 1030) (100 100) (140) (3380 230 40) (230) (40) (510 50) (520 50 90) (110) (50 200) (80 200 480 60) (70) (100) (90) (170 1710) (60 1460 70) (280) (60) (40 70 40 250 40) (380 70) (50) (60) (260 130) (390) (190) (50 170) (160) (60) (280) (70) (120 450) (90) (40 200) (70) (1100) (120 150 80) (50) (80) (90 220) (180) (70 300) (180 40) (70) (80) (250) (60 30) (40 2390 180) (350 120) (340 740) (110) (150 90) (150) (70) (170) (470 70) (200) (80) (180 50) (280) (40 180 400) (50) (90) (70) (60) (90) (60 960) (610) (230 1400 120) (140) (1600 60) (70) (230 150) (210 1010) (790) (50 250) (80 70 150) (80) (30) (1320) (360 310) (100 1880) (1660) (790 160) (70) (30 30 50) (40) (80) (400) (240) (60 60 110 160 340) (40 50) (40) (70 30 160 320 100) (140) (50) (40) (50) (60) (1330) (80) (50) (450 50) (990) (70 50 210) (350 40) (60 100) (120 40 290 110 60) (60 360) (130) (200 60) (70 40 1090) (60 800) (50) (70) (50 230 1060 80) (40) (820 260) (600 60 50 100) (320 110 560) (400) (80) (140) (200) (50 50 150) (150) (570 50) (450) (1600) (70) (100 230) (100) (260 50) (30 100) (420) (1940 100) (180) (30) (1510 50) (80 80) (90 110) (40) (230) (70 110) (3950) (1390) (110 30) (40 90 420) (60) (40 240 60) (630) (160) (70 90 50) (80) (110) (250 50) (30) (40) (390) (40 40 5000) (30) (460 50) (80) (30) (50 290 410 620) (1180) (90) (200) (120 60) (100) (230) (80) (6030) (440) (3090 60) (60) (1020) (30 260 160) (60 40) (120 70) (2390 120) (50) (40 100 40 150) (210) (720) (210) (480) (220) (390) (330) (370 110 60 70 70 90) (60) (480) (80) (270) (100) (40) (550) (70 100) (1040 80 1150) (60) (300) (330 60 80) (50) (50) (140 50 860) (80) (260) (110) (1950 1510 110 450) (80) (450) (220) (880 270) (100) (210) (270 110) (640) (390) (50) (240) (230) (500) (630) (60) (750) (100) (980 220) (190) (80) (130) (490) (110 3250) (100 40) (300) (30 230) (340) (1500 70) (260) (120) (100 110) (70) (560) (910) (80) (40) (40) (430) (80) (220 100) (1400) (480) (60) (40 40) (1230) (130 150) (90) (570) (550 190) (900) (200 60) (150) (360) (640 80) (450) (60 100 1950) (50) (100) (60 50) (80) (1090 90) (330) (770) (240) (160) (70 40) (60) (700 40) (1660) (30) (100) (120) (110) (150) (1890) (310) (660) (40) (60 60) (110) (30) (250) (70) (70) (390 90 40) (60) (170 100) (80) (990) (700 190) (120) (50) (280) (330 70) (160) (390) (80 70) (920) (60) (330) (50) (580) (180 40 380) (140) (140) (50) (1110) (40) (130) (140) (90) (70 70) (200) (500) (210 60 50) (290) (210) (1710) (610) (100) (50 270) (170) (100) (40) (300) (220) (610) (1480) (460) (150) (160) (250 330) (50) (60) (650) (680 150) (610) (60) (140) (200 180) (1070) (380 1370) (40) (30) (90) (80) (1720) (200) (240) (50 80) (80) (440) (280 350) (60) (60) (5980 40) (460) (260 70) (40) (70) (50) (120 240) (130) (390) (260) (60) (810 200) (50) (720) (810 200) (6000) (220) (50 90) (170) (440) (40) (80) (110) (60 830) (40) (130) (90) (1090 80) (290) (70) (40) (80 230) (100) (60) (110 600 80) (40 130) (360) (920) (310 790 60 60 240) (130) (70) (160) (100 280) (40 1960) (250 330) (70) (40) (40) (300) (60) (400) (60) (50) (140 90) (30) (1950 110 100) (160 50) (100) (370) (40) (9860 4540 370 4580 1380 190 3010 130 830) (1140 200) (8080) (140 2960 740 130 70 40) (30 1930 80 30 70 210) (90 100) (260) (80 220) (90 40 90) (130) (100) (210 270) (60) (8060 50) (270) (1680 70) (150) (160 300 90) (50) (60) (90 100) (150 60) (70) (90) (480 80 460) (160 60) (110) (90 90 80) (60) (70 770 100 120) (400 140) (100) (80) (140) (300) (140) (40) (550) (100) (360) (40) (150 70) (30 30) (180) (120) (40 120) (100) (110 70 50) (4180 360) (310 60) (60) (420 90) (110) (90 40 50) (80 130) (3120) (120) (190) (290 80) (160) (50) (30 1100 470 150) (40 80 40) (40) (30) (110) (40 140) (300 110 100 280) (610) (50) (140 470) (150 40 100) (40 50) (970) (50) (450) (80 120) (40 90) (60 180) (70) (110 200) (40 110) (180) (210 380) (90 120) (50) (110) (270) (60) (220 100) (580 410) (100 140 150 90) (70) (100) (50) (50) (960) (50 140) (100) (100) (110) (40 490 260 60) (70 130) (310) (60 50 60) (2020 140 50) (60) (300) (50) (70 80 1850) (100) (120) (50 90) (120) (110 280 30) (40 200) (790) (30 50) (220) (80 110 3050 80) (170) (140) (270 70 120) (60) (90) (180) (90) (80 80 50 150) (120) (100) (70) (50 130) (50 40 110) (120 270 690 380 190) (40 120) (350 40) (40 200) (450) (40) (80) (190) (130) (150) (40 90) (120 100 80 50) (80 80 100) (190) (110) (30 110 80) (190 170 70) (80) (150 70) (100 50 30) (60) (2160 80 60) (80 150 60) (80 50) (100) (1050) (40) (50 80) (3390) (1580 80 80 90 90) (1530 70 140 70 540) (120) (90 60 80 350) (70) (100) (210 130 120) (50) (50 40 150 530) (300) (720 60) (50 50) (80 230) (40) (80 50 240) (100) (40 90) (100 120) (100 70) (150) (50) (70) (50) (180) (130) (50 70) (100) (2670 100 40) (60) (110) (90) (150) (60) (140 60) (40 60) (50) (60) (100) (7640 70 30) (270 150) (60) (260 30) (50) (140) (210) (4030 570) (150) (150) (40) (50) (70 60) (80) (1530 90) (220 120) (350) (6260) (1400 80) (900 60 120 300) (660 60 100) (90) (100) (280) (50 220 80) (130) (130 40) (420) (120 50) (60) (60) (40) (170) (50) (1570 270 40) (1860) (380) (60 90) (180) (860 80) (60) (80 60) (1690) (2120 70) (1570) (180) (770) (80) (430) (430) (80 170) (310) (110) (430 40) (170) (290) (210) (260) (40) (80 50) (380 30) (210) (50) (350) (2030) (160) (410) (340 290) (80 140) (50) (760) (40) (40) (80) (110 60) (70 50) (50 70) (260 380 60) (550) (50) (40) (1110 210) (70 280 120 70) (60 50 50) (40 150 60) (340 230 100) (2220) (130) (120) (520) (120 140) (540) (70) (100 100) (40 200) (1500) (70) (50) (260 8260) (640 50 100) (100 220 40) (70) (100 40) (360) (70) (60 50) (120) (110) (500) (140) (90 50) (50) (210 50 250) (90 60 30) (60) (370 280) (30) (40) (810) (40 40) (50 130) (50 60 100) (460 110 450 150) (100 240 50 1380) (50 660) (670 110) (40 990) (1950) (80) (80 90) (190 190) (100 60) (80 100) (30) (100) (240 90 340) (100 270) (470 70 160) (50) (70) (230 1990) (80 100 80 70) (70 150 100) (2940) (70 50) (270) (160) (150 200) (30 270 120) (70 60) (60) (80) (140) (40 50) (130 330) (90) (130 140 60) (410 4110) (100 140) (170) (100 1230) (50 70) (180 190) (90 200) (90 50) (280 190) (40 350) (50 330) (370 50) (130 250) (90 280) (730 1040) (170) (510) (760) (60 120) (190 40) (450) (160) (120) (380) (70) (120) (190) (40) (250 850 200) (30) (60) (100 440) (130) (3350) (1400) (850) (90 170) (50) (100 80) (130 3400 850) (40) (380 1120) (50) (2170) (40 780) (560) (110) (270) (40) (80) (250) (570 90 60) (40) (110 250) (200) (300) (120) (80) (100) (100) (80) (40) (50) (3770) (1530) (40 70 130) (60 2720 410 270) (90 540 150 850 1550) (390) (60) (320 220) (4440) (190) (50) (70) (160) (50) (90 70) (110) (30) (150 60 150) (230) (260 70) (40 110) (300) (190) (60 50) (210) (50) (60 100 450) (170 400) (140 1010) (40) (250 960) (4660 40 40) (120) (370) (50) (40 270 270) (60 110 1410 130) (50) (280) (70) (90 440 170) (60 340 60 580) (170 490) (60) (200) (220) (90) (150) (70 140) (450 60) (180 80) (390) (60) (820) (140 40 40 190 380) (880 70 80 80) (160) (770) (150) (770 90) (5440 170) (80 100) (80 90 230) (30) (80) (150) (310 210) (160 400) (50 120 140) (370 240) (130) (50) (110) (410 220) (90) (140) (2870) (50 170 80) (8860 230 1420 160 1700 2510) (2330 1340 580 170) (4240 110 40 210) (1000 150) (100 320 260 30 160) (220) (60) (200) (150) (40) (3830) (40) (1470) (310 210) (50) (60) (100 80) (330) (11040) (1140 140) (320 60) (300 500) (140 90 30) (120) (40) (340 80) (90 70) (60) (40 140 140 70 40) (100 90) (50) (60 110) (90) (90 40) (650 120 90 100) (60) (120 50) (80) (150) (70 90) (40 50 90) (300 110) (160 4550 80) (200 90) (1180) (90) (110 110) (140) (250) (410 40) (140) (70) (60) (150 50) (2980 60) (2860) (380 60 60) (60 60 40 40) (30 200 50) (50 470) (340) (80 130) (70) (70) (50) (150 40) (60) (290) (160) (100 120) (1250 140 120) (60) (100) (960) (100 100 360) (60) (190) (60) (90) (140 90) (100) (170) (80) (330 820) (600) (290 200) (50) (330) (30) (40) (80 50) (120) (560 90) (70 140 70 220) (80) (70 70 50) (60) (450) (80 150) (30 80 220 30) (150) (80 190) (70) (40) (60) (3400) (50 1710 70) (60) (130 190) (40 50) (220) (60 270) (40) (60 70) (40 90 650 200 150 90 100) (60) (40 3100) (120) (50) (170 140 40 190) (3760 170) (600 40 50) (80) (510 900) (40) (160 70) (60 440) (100) (30 30) (50) (40 130 150) (140) (7540 1010 100) (300) (340) (30 70) (60) (40) (230) (40) (370) (80) (140) (40) (30 860 30) (2590 750) (40 130) (70 390 150) (60) (190 40 60) (150 1570 30 120) (50) (180 970) (50) (40 650) (230) (50) (990) (110) (120) (80 80) (110) (60) (140) (260) (80) (30) (80) (130 60) (140) (60 720) (60) (630 90 120) (160) (70) (50) (70) (9780) (40 90) (30) (100 40) (110 70 30 400) (410) (50) (1290 70 340) (140) (50 30) (160 40 90) (80) (100) (40) (11240) (50 40) (3830 310 120) (8070) (100 120 50) (410) (70) (50) (40) (890) (110) (1340 440) (130 90) (640 40) (1100 410 180 90 40) (180) (100) (290) (320) (100 50 110) (80) (450) (50) (80) (660 300) (60 150) (90) (410 90) (90) (70 130) (180) (490) (90) (160) (60) (90) (80 80) (50) (60) (590 80 40) (80) (90 90 320) (140) (30 310) (70 90) (80) (130 40) (520 90) (5560 110) (9100) (100) (1370 270) (40) (40 120) (200) (2920 110) (60 140) (70) (1750 60) (80) (50) (630) (90) (260) (240 250) (70) (80 100 90) (170) (90) (170) (140) (140 50 120) (50 150) (320) (1030) (40) (550) (50 40) (90 80) (50) (1130 150 120) (90) (160) (130 120 230) (60 100) (40) (600 130) (300 350) (160) (340) (50 180) (40) (50) (180) (40 680 220) (50 120) (70) (60) (480 190) (70 30) (80 150) (100) (70 70) (60) (80 110) (420) (90 150 60) (190) (50) (110 150 90 160) (150 80 70) (1500) (940 50) (60) (130) (70 70) (130 60) (60 60) (110) (40 50) (110 830 100) (150) (50 90 480 90) (430) (30) (690) (50) (120 80) (200 80 60) (60) (190 350) (560 70) (50 1640) (50 390) (170 100) (70 60) (160) (80) (160 210) (60) (40 40 90) (60 50 70) (50 40) (120) (450) (130 150 30) (120 670) (240) (350) (50 700) (160 60) (60 60) (70) (850 160 3940) (100 60) (40 50 80) (520) (110 210) (80 130 230) (30) (40) (100 160) (70 290) (220 160) (150) (400) (120 150) (100) (70 80 450) (50) (180) (60) (60) (480) (170 870 80) (60 80) (190 120) (60) (60) (50 60) (560 70) (990) (110 300) (670) (30 1400 50) (60) (80) (110) (60) (150) (30) (80 40) (70 7490) (110 40) (190 680 250 270 90) (100) (170) (80) (60 200) (100) (120 30) (340 170) (40) (270 30) (180 1500 60) (170) (520) (60) (60) (230) (210) (40 40 170) (40 50 90) (470 150) (50 350 50 910) (600 2900) (130) (80) (110 40 50 2150) (180) (70 470) (1270) (250 90) (180 890) (60 30) (40 100 80) (100) (110 80) (100) (150) (100) (230) (140 70) (60 320 150 780) (170) (110) (40 140) (80) (110) (40) (240 90) (140 680) (100 80) (180 70) (50) (270 100) (360) (130) (100) (170) (100 90) (90 90) (1110) (90) (80) (90) (110 2300 150) (2340) (270) (60 110) (350) (430) (40 660) (40) (300) (60) (150) (50) (340 90) (60 160) (330 80) (40) (500) (50) (150) (180) (390) (2590 70 930) (120) (40 210) (50) (80) (130) (620 60) (350) (130) (40) (260 50 90) (950 130) (80) (200 90 70) (110) (50) (150) (110) (150) (5860 330) (280) (80) (30) (50 1340) (1280) (750) (140) (50 50) (420) (70) (60 220) (200) (30) (70 320 150) (70) (40 40) (460) (60 30 1330 130) (150 60) (50) (280 40 80) (50) (50) (40 150) (40) (100 1790) (50) (40 160 70 40) (60) (90 140) (460) (80) (1290) (80) (30) (300) (1430 170 60) (110 110) (790) (50) (110 50 40) (70) (70) (80 90) (50) (100) (230) (110) (60) (480) (550) (560 30 60) (100) (40) (140) (50 220) (240) (130 50) (90 70 70 90) (90) (530) (1700) (100) (110) (200) (350) (70) (110) (60 40) (130) (80) (31740) (410) (140 4620 320) (190 760) (90 60 110) (1150 310 240 40) (40) (80) (80) (4460) (40 50) (150 70 40) (40) (90) (150) (110 130 70) (1450) (460) (420) (60) (60 110) (30) (150 120) (180 230) (70) (600 150 70 60) (80) (310) (1700) (230) (440) (40) (80 770) (50) (300 70 50) (590) (70 550) (40 110 70) (11330 30 90) (220 1000) (320) (40) (60) (490 40) (80) (30 80) (60) (220 210) (60 100) (330) (60) (1040) (70) (370) (50) (120) (90 60) (100 2840) (60) (2590 250) (70) (160) (140) (30 80) (40 50) (100) (60) (2850) (90 790) (180 100) (150 900 60) (220 640) (900) (90) (50) (90) (3860 50) (720) (100 80) (240) (30) (80 110) (100) (50) (90 90 580) (150 40) (110) (1350 300) (90 50 60 60) (50) (60 70) (60) (180) (120) (70) (140) (80) (160) (120 120) (1060) (50) (70) (580 370 30) (50 60) (60) (590) (70) (110) (240 240) (100 60) (100) (60) (100) (40) (160 320 630 60) (1380 70) (70 60) (160) (80) (100 220) (470) (110) (3050) (30) (90) (1030 560) (130) (70) (120) (40) (80) (80) (1110) (130 50 150) (80 70 200 70) (480 60 200) (90) (40) (50 50 190) (70 50) (30 50) (70) (80 40) (70) (60) (70) (80 30 60 50 60) (80) (70) (30 50 60) (110) (470 40) (150 130) (290) (80 50 500) (80) (60) (50) (100) (560 30) (90 90) (580) (320) (50 170 40) (550) (520) (70 50 170) (360) (280) (100) (100) (120) (80) (70) (50 140) (30) (120 110) (110) (1520) (420 70 70) (240) (100 90 1290) (100) (410 970) (250) (50) (60 30 630) (350 40) (30) (5240 230 100 140) (8420) (40 720) (800 100 40) (80) (90) (190) (40) (60 60 70) (70) (60 50 220) (50) (240) (270 40 920 40 150) (100) (40) (50) (180) (130) (70) (600) (600 60) (60) (180) (60) (100) (40 770) (30 270) (80 110 110) (50) (230 470) (70 110 60) (80 470) (50) (90 40) (670) (120 70) (60) (140) (40) (70) (170 60) (40) (180) (60) (1190 40 60 110) (4100 70) (8430 360 170 180) (90 50) (60) (130) (50) (90 40) (7760) (100) (330 70 650 30) (2680) (70 450) (3870 60 150) (60) (110 150) (40) (100 650) (1060 60) (230) (110) (3160 40) (80) (70 700) (310) (70 1910) (40 60) (2310 860 90 60) (80) (220 180 50) (40) (90) (50) (60) (40) (80) (100) (50) (60) (50) (50 80 90) (2480 1140) (80) (100 70) (370) (60) (40) (70 350 40) (120 70) (590 650 170) (100) (140) (80 40) (2470 60) (280 1050 100) (50) (60 40 50) (90) (2510) (50) (1410) (80) (120) (250) (120) (50) (40) (60 80) (70 140) (130) (80 70) (250) (140) (160) (190) (2790) (70) (550 70) (70) (130 440) (60) (40) (70) (40) (70 200) (100 60) (50) (220 540 70) (310) (120) (40) (150) (110) (70) (40) (70) (110) (260) (1410) (110) (120) (70) (50 40) (60) (120) (40) (410) (80) (590 810 70 70) (1490) (50 60 50) (350 120) (90) (320) (70 40) (40) (40) (180) (90) (40) (60) (300) (30) (130) (370) (60) (70 40 1800 70) (70) (700 70 100) (300) (4700 60) (50) (80 120) (40) (50) (60) (270) (60) (160) (200 70 120) (1030 30) (150 60) (90 650) (30) (80) (30) (50) (70) (300 150 80) (600) (50) (60) (40 40) (60 80) (40) (180 260 30 50) (2990) (60) (90) (140 500) (70) (390) (70) (1160) (100 60) (510) (300 70 40) (60 90) (80) (40 160) (40) (150 120) (40) (50) (80 70) (2200) (50 80 50 40) (440) (30) (4030) (150 80 100) (390) (60 1480) (420 70) (70 560 100) (750) (70) (90) (80) (70 120) (810 430) (1880) (40) (140) (40 120) (9650 80) (50) (240 1040) (40 100) (100) (930) (180) (60) (30) (60) (180) (100 60 70) (110) (210 840 100) (580 220 60 310 210 80) (60) (220) (170) (80) (770 80 670) (30) (70) (70) (100) (90) (60 130 120) (80 280 80) (80) (300) (40 90) (60 80 130) (570 200) (140 110) (200 40) (720) (90) (660 240) (190 80) (130) (40) (60 250) (140) (120) (250) (60) (1750) (900) (70 100) (480) (50) (880 2350) (60) (220) (30) (60) (80 120) (170 160) (100 60) (200 70) (6150) (70) (70 860) (150 140) (70) (420 30) (50) (60 710) (40) (110 110 70) (40 60) (90 150 130) (470) (110 70) (140 2140) (420 150) (40 200 270 70) (40 50) (100) (60) (50) (40 40 70) (40) (270) (180) (100) (140) (270 1080) (60) (150 940) (300 60) (60 60) (210) (50) (350 70) (300) (470) (330) (530) (150 190) (110 50) (70 60) (90) (1590) (70 80) (50) (2930) (80) (330 80) (170 460 60) (240) (90 100) (60 110) (430) (30 60) (60) (170) (60 1110) (180 410) (30 450) (120 60) (170) (310 50) (230) (50) (110) (90 110) (60 950) (100 180) (190) (40 250 50) (80) (120) (140) (70) (50 110) (3620 80) (680 90) (70 280) (130 50) (4110 90) (60 60) (430 100 130 130) (60) (180 100) (150) (190 100) (260) (70) (50) (120) (170) (50) (40 520 80 130) (120) (50 60) (80 200) (230) (180 210) (520 60 150 50) (100 40) (50) (90 270) (330) (260 160 60) (3190 70) (4570 100) (210) (120 70 80) (80) (1810 40) (130) (220 140 70) (30 80) (50) (5550 60 340 1290) (70) (480) (1520 70) (90) (200) (40) (80) (140 360 350) (60 110) (8910 130 90) (3030) (180 70) (470) (40) (70 80) (70 110) (1310) (380) (160) (160) (30 1870 140) (50 40) (130 50) (80) (60) (1940) (210) (130) (50 70) (150) (50) (330 250) (90) (150) (90) (100 90 400) (120 140) (40) (300 140) (70) (60 40) (360) (570 170) (460 30) (40) (40 80) (30 220) (330 80) (450 80) (100) (40) (510 30) (70) (60) (960 80 390) (130 1640 250) (250 60) (100) (50) (250 100 70 150 80) (60) (90) (60) (70) (90 130) (1030) (150) (150 550) (550) (70 70) (80 690) (570 410) (6120) (130 130) (650) (110 100) (80) (190) (210 100 1580) (240) (130) (360) (80) (70) (260) (40) (80) (90 80) (660) (50) (50 100) (300 50) (150) (240) (70 30 60) (60) (90) (320 90) (600) (1820 310) (140) (40) (310 50 100) (160 140) (130 60) (120 50) (180 50) (100 80) (460 160) (2640 40 50) (150) (640) (90) (3880 420) (710) (2060) (40) (50) (620 60) (90 60) (40 190) (380) (350 50) (70 90) (150) (530) (300 150) (90) (220) (70) (320 40) (160) (40) (160) (140) (810) (100) (150 60) (370) (60) (2360 50) (50 280) (250) (760 510) (310 50 1740 360) (530) (90 70) (150 60) (120) (1210) (190 40 6180 90) (40) (730) (30 270) (290 40 160 250) (50) (930 1650) (80 80) (110) (70 470 30) (120) (350 60) (50 50 50) (120) (140) (640) (80) (90 40) (90 180) (70) (270) (100) (70 70) (80) (160) (70 90) (8000 90) (40) (80) (50) (80 230 80) (150) (50) (60 40) (140) (570) (150) (50) (230) (70) (280) (1300 70) (4690 13000) (260) (40) (40 130) (100) (60 60 100) (70) (500) (270) (40) (180 90) (40) (50) (50 250 90) (50) (1040 1870 450) (110) (1530 100) (60) (80) (30 30) (90) (300) (80) (60 740) (80) (300 90) (190 180) (60 100) (90) (70 50 290) (70) (80 120) (60) (90 90) (150 60) (620) (50) (2730 310 110 60) (100) (200 600) (80) (70) (70 80 120 100) (120) (220) (140 70) (140) (150) (110) (1370 60 40) (1350 230) (300 70 60) (40 50) (110) (70 50 90) (80) (50 510) (40) (80) (60 100 50) (2030) (350) (50) (30) (200) (70 170) (100) (90) (40 60) (80 80) (2020 100) (620 110 80 50) (1040) (100) (40) (6680) (70 220) (70 110) (60) (180 40) (100 620) (200 420 50) (50) (130) (370 90 140 80) (30) (110) (160) (70) (30) (70) (130) (16880 60) (60) (210 210 40) (50) (40) (80) (60) (50) (280 950) (1130 70 100) (2110 40) (1970 190) (2190) (60) (330) (30 60) (160) (190 80) (30) (60) (70) (150 60) (100 70 60) (80 50) (300) (290) (90) (120) (400 80) (3890) (140 60) (40) (50) (110) (200) (30) (100) (50 450) (90 100 40) (510) (70) (470 670 50) (140 40) (210) (90 230) (260) (40) (40) (130) (550) (130) (210) (120) (160) (180) (100) (70) (90) (230 170) (120) (100) (260) (780) (120 160) (90) (90) (120) (990 50) (50) (50 40) (110 500) (180 1480) (170 70) (1340 90) (260) (150 120 180 40 70) (60) (40 570) (180 340) (150) (50) (950) (130) (50 100 90) (40) (130) (640 240 50) (180 180) (90) (150 120) (240) (60) (110) (60) (1500 50) (90) (90 80 300) (110) (130) (190) (410) (70 100) (720 120) (170) (260) (240 60) (580) (60) (170 40) (140) (720 970) (2780 60) (320 30 60 200) (60) (60) (70) (50) (60 90) (380 50) (50) (120 90 150) (120 50) (60) (460) (300) (90 50) (510) (150) (50) (150) (120 70) (50 150 110) (70 140) (110) (50) (130 120 100) (90) (110) (110 50 180) (80 80) (450 200) (70 220) (140 100 430) (80 110 70) (60) (940 40 40) (30) (40 290 560 50) (1560 110 110) (90 810 740) (190 90 1100) (40) (110) (50) (90) (70 280) (170 40) (240 150 40) (100 160) (3450) (60) (70) (90) (60 60) (150 600) (70 40 320 580) (170 100 150 80 70) (550) (40 190) (160) (60 80) (40) (440 40) (180) (60) (460 50 40) (1970) (90 720 60) (160 290) (1340) (30) (140) (90) (4590) (1130) (110) (700) (110) (90) (90 60) (480 70) (110) (50) (60 270 70 50) (40 120) (30 70) (160 140) (40 120 70) (350) (6500) (80) (80 70 70) (220 410) (60 220 40) (230) (50) (120 60) (50 60) (680 60) (50) (50 210) (40) (170) (40) (110) (230) (780 120 330 80) (60 40) (400) (30 450 60) (160) (170 70) (90 580) (90 100 80 50) (70) (80) (13410 60 70) (100 90) (100) (180 120) (210 120) (100 190 1520) (40) (80) (2520 200 30) (350 450) (40) (8970 40 70 160) (60 60) (300 120) (180) (300 460 300) (40) (80) (500) (70) (50) (220 240 90) (40) (90 40) (40) (40) (90) (1610) (110) (40 210 40 60) (70 240) (30) (110) (180) (80 40 630 50) (120) (1300) (1560) (70) (600) (850 70) (40 150 70 50) (40 990) (750 70) (100) (1420) (40 100) (50) (170 50) (230) (200 70) (50) (90) (150 100) (90 160) (60) (260) (70) (3850) (150) (450) (60) (60) (50) (40 120) (410) (50 80) (180 70) (80) (110) (90) (60) (340 40) (80) (120 60) (290) (120 240 100) (60 60 80) (1070 40 60) (80) (100) (80) (130) (190 260 200 50) (150) (80 70) (60 600) (140) (40) (170 50) (700) (50) (40 1250 200) (100) (450) (300) (270 90 210) (40) (120) (110 60) (110) (90) (40) (1100) (11360) (350) (3340) (110) (570 490) (300 80) (910 60) (190) (90) (40 2100 2010) (30 80) (90 240) (70) (270) (310 40 120) (1400 70) (80) (100) (200 590) (70) (1490) (100) (1320 110 120) (180 5900) (390 40) (1420) (120 50) (60 150) (160 80) (90) (40) (60) (240) (80) (40 90) (70) (100 80) (40) (70 150) (40) (320) (1990) (120 150) (150 120) (440) (70) (320 50) (80) (300) (40 100) (70 260) (140 50 40) (40) (110) (80) (40 50) (80 310) (60) (190 60 350) (70) (190) (40) (140 70 80) (70) (80 150 140) (450 120 70) (80 550) (70 130 260) (1140) (140) (60 140) (460) (40) (100 80) (520 60) (60) (270) (40) (1170) (50 190) (60) (150) (40) (150 60) (80 330 150) (40) (110) (50) (170 80) (580 80) (70 700) (60 260) (100) (50 170) (1170) (2210) (830) (270 330) (1610) (260 60 60) (350) (330) (310) (70) (50 100) (70) (110) (100) (40 40) (700) (160) (240 40) (60) (60) (40) (100 150) (50) (270 70 1350 300 140) (30) (640) (310 100) (120) (30) (1050) (70) (150) (60) (70) (60 140 60 600) (80) (110) (140) (1750) (160) (1530 580 180) (160) (180) (30 60) (40) (80) (80 100) (1080) (450 180) (60) (450) (60) (70) (140) (30 50) (40) (40) (50) (390) (290) (130 50) (70 100) (50) (90) (130 90) (130 60) (50) (220 1370) (60) (70) (900) (140 400) (210) (70 2460 70) (50) (50) (120) (600 60) (140 310) (100 80) (480) (130) (1400 120) (60) (50) (100) (480) (50 90) (60 110 1170) (70 90 1210) (80 2680) (170 50 100) (150) (50 580) (140) (770 70) (30) (290 70) (160) (60) (100) (70 40) (120 370) (60) (440) (40 2110) (3590 60 260) (130) (400) (50) (2620) (470) (1590 50) (80) (60) (190) (70 130) (70) (220) (100 110) (200) (70) (870 50) (3160) (70 230) (100) (340) (280) (170) (40 100) (30) (170) (60) (250) (260) (80 70) (60) (1460) (270 550) (200 50) (380 90 80) (30 650) (80) (60 670) (190 110 110) (220) (170) (50 80) (60 50) (100) (170 240) (290 50 100 90 1470 190) (300) (510 100) (40 200) (130 80) (580) (720) (70 70) (70) (290) (90) (60 60) (90 60 310) (40 100) (70) (70 250) (270 50) (920) (650) (360 260) (50) (60 420) (60) (50) (90) (220 180) (120) (40 70) (80) (110 850) (300 30) (110) (540) (50 30 610) (50) (190 180) (90 190) (160 40) (280 70) (80 170) (60) (70) (40) (540) (570 480 130) (50) (170 40) (130) (100 1000 270) (60 250 50) (40) (820) (540 230) (60 100) (80) (50) (50) (1480) (60 160 480 60) (150 900 700) (130) (360) (180 160) (1200 1160) (420) (40) (1320) (80) (190 780) (1620) (190) (30 130 1680) (40) (130) (760 4110) (400) (90 130) (60 130) (250) (50) (110) (90) (140 150 170) (50) (60) (240) (30) (300) (50) (500 40 110) (60 230) (640) (130 30) (370) (40) (40 250 90 40) (120 50 310) (1910) (130 80) (60 120) (310) (1610) (200) (70) (200 230) (90) (270) (40) (90) (380 590) (270 90 140) (220 50) (60 100) (60) (130 80) (40) (2960) (490) (930) (160) (150 240) (260 210 80) (40) (570) (60) (90 1150) (40) (430) (110 1290) (1650 230 80) (520) (360) (110) (50) (940 390) (50) (50) (250 150) (440) (80) (270) (1090) (50) (100 320) (440) (380 810) (350) (60) (50) (40) (250 520 60) (100) (70) (140 150) (60) (50) (50 70) (170) (40 200 440) (40 120 300) (110) (1800 60 40) (90) (60) (100 40 1420) (80 180) (80 60) (70 40) (60) (60 300) (60) (1050 210 320 120) (40 150) (150) (60 250 1940) (50) (40) (40 260) (130 370 40 70) (1570) (950 50) (80 40) (40) (110) (1110 100) (250 50) (480) (40) (230) (810) (40 100 140) (230) (50 50) (310) (640 50) (40) (130) (60 150) (60) (80 130) (70) (90 440) (530 230) (50) (210 70) (220) (50) (590 40) (40 100) (520) (90) (80) (170) (140) (50 150) (70) (510) (250) (40 140) (30 120 180) (310 430) (200) (470) (40 40) (340) (120) (50) (430) (290) (12230 310) (100 380) (420) (70 70) (520) (330 80) (3470) (530) (50) (1920) (450 50 140) (100) (110) (370) (260 200) (60) (290) (90 120) (230) (100) (230 160) (200 110 80) (150) (40) (130) (290 620) (70 40) (50) (4930) (4240 880 2250 650 320 370) (2410 1530 1870 470 310) (1930) (110 80 640 150 100) (40 660) (3130) (290) (780) (30) (50) (80) (260) (1390 1110 70 160) (230 50) (1910) (50) (170) (30) (150) (170) (50 120) (90 90) (150) (150) (40) (390 530 40) (250) (310) (80) (3260) (1830) (150) (150) (50) (13840 230 120) (90 60) (40) (150) (1040) (60) (380 160) (80) (200 70) (390 80 100) (70) (1060) (510) (2460) (60) (1470) (160) (140) (90) (30) (710) (50) (80) (50) (110) (780) (60 90) (100) (80) (90) (340 3290 120) (50) (30) (110) (40 250) (150) (2050) (70) (110) (130) (100) (50) (100) (11700) (60) (50) (50) (60) (60 70 110) (290) (390) (1130 110) (290) (100 270) (70 240 40) (70) (360 330 170) (50) (640) (120) (50) (300) (9310) (1870 60) (180) (60) (50) (1080 1740 350 340 100) (270) (60 150) (4920 40) (15010 1920 150) (50) (60) (30 50) (50) (40) (40) (1290 180) (70 70) (50) (8590 90) (150) (50) (60) (250 50) (550) (40 40) (160 50 260) (110) (50) (170) (40) (130) (140) (70) (50 100) (1900) (110 270) (40) (70 210) (70 1520) (210) (30) (120) (60) (90) (130) (50) (90 100) (200 110 280) (720) (13330 160) (100) (40 610) (90) (160) (7180) (40 60) (100 50 50) (220) (30 70) (340) (3810) (40) (180 80) (870 140) (80) (60 60) (60) (130) (90 50) (480 30) (60) (130 80) (2120) (330 40) (570) (410) (130) (160) (40) (50 100) (80 50) (390) (8270) (50 120 70) (30 4860) (210) (50 60) (100) (70) (50 90) (90) (5480 540) (30) (120 40) (80 120 280) (6620) (50) (6190) (80) (40) (190) (120) (500) (170 70) (70) (70) (130 150) (7620) (110) (40 50) (310 50) (80) (50) (50) (90) (70 50) (6360 100) (640) (80 60 60) (60) (50) (2070 100) (260 70) (390) (90) (60) (40 40) (90) (140) (50) (120) (230) (730 90) (80) (1290 40 100) (110) (40) (130) (80) (50) (60) (50) (40) (280) (50) (40 1050) (50) (120) (100) (50) (80 50) (4760) (80) (70) (40) (70) (60 50 50) (100) (50) (170) (1050 50) (80) (1710) (90) (60) (70) (40) (80) (60) (40) (110 260) (150) (30) (90) (90) (90) (90) (80) (70) (5030) (120 80) (100) (40) (180) (160) (1090) (160) (180 60) (110) (60) (40) (160) (320) (60 80) (40 460) (40) (60) (310) (100 420) (140) (7330) (120 40) (120) (170) (90) (120) (3690) (130) (90) (370) (3070) (3540) (70) (60) (80) (80) (90) (70) (40) (40) (50) (90) (40) (30) (370) (150) (90) (170) (50) (40) (2100 70) (40) (180) (40) (40) (30 120) (160) (250) (80 380) (50) (400) (70) (60) (40) (130 80) (100) (50) (60) (830) (130) (50) (80 70) (210) (90 80) (530 70) (130) (50) (130) (80) (80) (50) (40) (1190) (230 60 60 190) (60) (60) (50) (80) (40) (460) (70) (60) (150) (70 70) (920) (370 80) (40) (100) (100) (80) (60) (60) (510 120) (60) (150) (150) (60) (60) (90) (100 130 180) (30) (260 60) (30) (50 40) (120) (140 210 150) (900 40) (70) (100) (160) (160 150) (80) (180 1120) (40) (40 60) (300 60) (160) (80) (40 40) (250) (40 160) (50 60 1420) (40) (670 5810 50) (90) (80 120) (60 190) (100) (6090) (4480 110 170 70) (3510 40) (130) (80) (60) (110) (100) (40) (40 40) (140 50) (180) (220) (40) (1200 120) (130) (2750) (60 60) (1010) (9650 40 120) (110) (50 180) (60 40) (40) (220) (70) (90) (50) (3110) (80) (50) (30) (410 50 50) (70 120 80) (1680 740) (40 50) (70 50) (50 60) (40 130) (40 80) (290 40 90) (280 250) (100) (100) (80 60 40) (80) (540) (120) (170) (980) (450 100) (60) (170) (40 60) (160) (50) (560) (2110) (130 30) (100 110) (100) (340 50) (60) (50) (100) (60) (90) (240) (1060 30) (390) (830) (370 120) (50) (60) (40) (110) (50) (40) (110 180) (40) (2940 40 100) (50) (80 40) (150) (90) (30 880) (80) (60) (120) (210 70 250 180) (110) (180) (70 50 100 50 570 110) (50 350 290) (220) (50) (870 1290 240 150) (70) (40) (340) (40) (50) (40) (2010 130) (50 180) (40) (590) (130) (520) (910) (80) (70) (520) (130 90) (90 230) (70) (340) (2530) (40) (40) (740) (60) (50 40) (130) (50) (110 50) (210 60) (110) (90) (50 4850) (490 60) (150) (60 60) (50) (160 700) (50) (60 370) (80 30) (40) (60) (160 50) (420 1550) (80) (670 40) (240 560) (120 220) (80) (6880 60 710) (350) (40) (30) (120) (960) (100 1400) (100) (40 140) (720) (80) (1300 270 100) (300 40) (110) (1320) (100) (7740 80) (110) (2930) (670) (160 90) (40 130 90 260) (40) (90 100) (180) (60) (280) (320) (1690) (80) (90 100) (120) (60) (4380 80) (1050) (380) (690 80) (40) (1090) (1910) (170) (160) (30 30 400) (60) (60 80) (2500) (150 60 60 40) (280) (770) (360 70) (50 190) (220) (80) (1050) (880) (80) (230) (160) (220 3080) (750 50) (530) (30) (120) (810 40) (80) (50) (440) (8250 50) (110) (730) (60) (30 30) (200) (640) (920) (130) (60 60 170) (60) (130 70) (260) (1010) (40) (1120) (1650) (40 80) (290) (480) (90) (100) (150 40 40) (1050) (80 530) (300) (60 30) (80) (140) (510 160) (130) (80 40 40) (30) (90) (50) (130) (130 620 160) (980) (1320) (40 140) (80 340) (50) (30) (260) (340) (60) (60) (290 50) (60) (70) (160) (790) (80 280) (490) (130) (410 30) (750 90) (90 90) (60 60) (870) (40 50) (320 1960) (40 70 40 40 100) (100) (120) (1000) (100 140) (80) (40 40) (50 50) (180) (80) (270 80) (1310) (250 40) (290 240) (1030) (220) (1020) (170) (30) (40) (80) (110) (1030 530) (140 250 100 4340 650) (70) (40 240) (260) (150) (40) (820) (90 190 230) (850 90) (140 50) (70) (220 570) (60) (60 60 170) (240 160) (450 70 100 70 50) (200) (90) (80) (200) (240 160) (950) (900 150) (40) (40) (70 1880) (70) (70 70) (230 170 30) (110) (80 200) (2830) (60) (60) (60) (80 120) (150 1080) (310) (40) (30) (300) (480) (70 100) (3100 60) (60 150 50 510) (170 140) (300 60 360) (190) (190) (60 330) (40 870) (70 120) (120 110) (40) (410) (60) (220) (70 30) (160) (120) (30 100) (150 200 410 50) (50) (110 400) (40 540 40) (50) (50) (90) (260) (70 70) (3390) (110 80 50) (480 520 290 780) (190) (90) (1290 3810) (260 130 70) (60) (50 120 200) (60 760) (440) (90 130 130) (610 60) (50) (70 50) (150) (110 130 130) (140) (150) (150) (100 100) (530) (150) (70) (200 400) (60) (300) (2470) (50 1880) (820 200) (140 60) (50 1130) (340) (50) (140 340) (90) (430 90) (110) (50 760) (180) (60 700) (40) (2410) (70) (40 90) (40 50 240 50) (480 60) (50 50) (100 180 230 330) (140) (650) (90 70 40) (110) (60) (80) (350 70) (60) (280) (70) (370) (70) (140) (200) (470 70 970 220) (90) (530) (100) (40) (580) (30 560) (70) (80) (40) (150) (270 190) (650) (300 80 550) (100) (30) (40 70) (110) (660) (210) (70 50 70) (1120) (110 60) (370) (220) (40 420 70) (60 100) (180 140 40) (90) (310) (70 370) (1780 1050) (100) (60) (70) (1660 80 560) (1620 100) (150) (90) (200) (100) (270 40 40 70) (470 870) (320) (150) (700) (400) (60) (70) (260) (90) (760) (110) (160) (40 140) (250) (60) (120) (70 200) (60 70) (320) (40) (360) (80) (750 70) (100) (70) (50) (50 30) (340) (50) (510 80) (40 170) (520 50) (1190) (90) (90) (60) (900) (40 410 680) (60 180 110 170) (50 100 410 70) (290 40) (70) (90) (310) (40 280 100) (330) (50 360 1590) (70) (120 370) (50) (1780) (190) (230 60) (80 80 380) (60) (180) (2340) (170) (40 420) (190) (100 90 80 240) (30) (50) (1160 130) (70 370 190) (810 200 1370) (540 210 230 600) (140) (30) (90) (1180) (320) (50) (160) (1060) (510 180) (50) (1010 40) (90 200) (450) (680) (190 50) (170) (40 80 100) (40) (460) (350 80 50) (70 70 100) (70) (830) (290 250) (240) (70) (160) (50 40) (100) (90) (90 570 90 50 40) (280) (180 130) (40 200 500) (60) (80 80) (190 150) (30) (240) (170) (90) (180) (80) (90 110) (180) (50) (120) (730) (60) (510) (190 90) (490) (80 710) (230 1370) (780) (300) (100) (650 70 90 140 250) (80) (350) (140) (320) (60) (120 420 70 150) (120 310) (370 60 1550) (170 2170) (70) (330) (610) (40 90) (410 100 50 40) (140) (350) (90 60) (90) (230) (1940) (960 60) (100 180) (1730) (390 440) (30) (60) (380) (1830) (200 180) (50 80 270) (70) (110 210) (520) (230) (70) (50 60 40) (50) (40) (450 140) (150 1370) (260) (370 60) (240 100 250) (300) (70) (60) (120) (70) (100) (150 50) (50) (600 140) (70) (50 140) (110) (70) (260 250) (130) (940) (260 250 140) (170 50) (360) (90) (120) (250) (100) (90 100 160) (40) (40) (30) (70 270 940 270 220) (90 110) (30) (90) (50) (110) (430) (80 120) (510) (1530 50 650) (70) (810 100 180 330) (50 90 100 40) (140) (130) (110) (530 60) (110 290) (70) (210) (470) (40) (60 60 40 270) (60) (760 50 1290) (360) (30) (2720) (1900) (60) (450 220 430) (2180 70 600 1570) (70) (120) (960) (720) (40) (120 30) (70) (360 180) (280) (30) (40) (100) (330) (90) (650 80) (50 330 250) (280) (40) (60) (40 290) (60) (40 1320) (470 30 180) (50) (1010) (270) (40 280 950 90) (210) (60 100) (90) (70) (120 40) (160 250) (160) (70) (790) (280) (60) (710 50) (300 90) (50 340) (140) (50) (170) (110) (90 230) (30 110 120 280) (50 60) (150) (50) (220) (130 100 40 60) (160) (240 100) (110 60) (80 40) (670) (590) (70 780 730) (290 110 110) (230 90) (80 120) (770) (30 120) (100 650) (510 50 80) (90) (50) (120) (400) (100 60 150) (350) (2220 30) (150 110) (450 470 1720 1220) (120) (250 3080) (100) (330 30 70) (60) (40 220) (30 200) (60 150) (40) (40) (190 90 110) (160 140 280) (80 80 90 330) (700 180 240) (120) (40) (1660) (60) (50) (260) (80 170 120 510) (60 170) (50) (220 120) (70) (230) (90) (150 1120) (150) (430) (200) (50) (130 2330) (100) (410 50) (110) (480) (40) (440) (90) (140 240) (40 350) (130 80) (40) (160) (30 50) (160 90 310) (1080) (120) (170) (100) (130) (40) (60 440) (60) (90) (60 30) (40) (180) (90) (190) (120) (730 1090) (70) (80) (840) (240) (50 60) (50) (170) (170) (40) (100) (250) (70) (40 80) (330) (60) (100) (70) (40) (60) (50) (80 100) (70) (380) (90) (140) (100) (140) (70) (90) (110) (130) (50) (50) (100) (400) (120) (450) (50) (50) (40) (90 120) (120) (80) (50 550 220) (150) (130) (100) (180) (220) (230) (30) (50 190 460) (50) (80) (30) (80) (40) (80) (50 110) (20) (10 10))) :lvel (quote ((44 43 43 43 43 42 42 42 41 41) (43 43 43 41 41 41 41 40) (42 41 41 41) (41 41 40) (41) (41 40) (41 41) (42 42) (41) (41 41 40) (42) (43 41) (40) (42 41 41) (43 41 41) (41) (41 41) (40) (43 41) (40) (41) (42) (40) (42 41 41 41 40) (41 40 40) (41) (42) (43) (42) (41) (42) (41) (41) (41) (41) (40) (40) (41 40) (42 41 40) (42) (43 41) (41) (41) (43 41) (43 42) (43 41 41) (41) (40) (42) (43 41 40) (42) (42 41) (41) (41 41) (43 41) (41) (41) (43 41) (41) (43) (42 41) (42 41) (42 41) (42) (40) (43) (41 41) (40) (41) (43 41) (42 42 40) (40) (42) (41) (42) (41 41) (42 42 41) (40 40) (43 41 40) (41) (43) (42 41) (40) (41 40) (43 41) (41) (41) (42 41) (41 41) (42) (41) (41) (43 42 41 41) (41) (41 40) (43 41) (43) (42) (41 41 40) (40) (40) (41) (40) (41 41) (44 40) (41) (42 40) (40) (40) (41) (40) (42 41 41 40) (42 41 40) (43 43 41) (42 42 41 40) (41) (42) (40 40) (40) (41) (41 41 40) (44 41) (41) (44 41) (41) (42) (41 41) (42) (41 41 40) (40 40) (40) (41 40) (42) (43 40) (43 42 40) (40) (41 41) (43) (40 40) (41 40 40) (41 41 40) (41) (42 42) (42 40) (41) (41) (41 40) (42 40) (43) (42 41 41 41 40) (41) (43 42 40) (42) (41 41) (40 40) (41) (42 42) (41 40) (42) (40) (42) (42) (41) (42 41) (40) (40) (41) (41 40) (41) (41) (41 41) (43 40) (40) (40) (41 41 40) (40) (42 41) (41) (42 40) (43 42 40 40) (40 40) (41) (40) (40) (43 41) (41) (41) (41) (41 40) (42 41 40) (40) (41 41) (43 43 41) (41) (40 40) (43) (42 41) (40 40) (41 40) (41) (41) (41 41 40) (41) (43) (40) (44 42 40) (42 40) (42) (42 42) (42 41 41 41) (42) (41 40) (41) (41 41) (42) (40) (42 42) (41) (43 41) (45 40) (41) (41) (42) (42 41 41) (42) (42) (41 41) (40) (44 42) (42) (41 41 41) (41) (42) (44) (42 42 41) (43 41) (41) (40) (40) (42) (41 41) (42) (43 41) (41 41 40) (41) (41) (41) (41) (43) (40) (44 42 42) (40) (43) (41 41) (41) (41 41) (41) (41) (43) (42 41) (40) (40) (42 41) (41 40) (44) (40) (41 40) (42 41 40) (45) (41) (42) (41) (42 42) (43 40) (42 41) (42) (40) (40) (43 41) (40) (42) (42) (44) (44 41) (40) (41 41 40) (42) (41 40) (41) (41) (42) (41) (40) (40) (41) (42) (40) (43 40) (42) (41) (41 41) (40) (42) (40) (42 41 40) (42 40 40) (41) (43) (42 41 41 41) (41 40) (40 40) (40 40) (42) (42 41) (42) (41) (41) (42 41 40) (41) (40) (42) (42) (41) (41 40 40) (41) (42) (40) (42 41) (43) (41) (41) (41 40) (40) (41) (41) (41 41) (42 41) (42) (41 40) (41 41) (40) (41) (41) (42) (43 42) (42 40) (41) (42) (40 40) (41 41) (41 41) (42) (43 41) (40 40 40) (41 40) (41) (41) (42) (40 40) (40) (41) (41 41) (42) (43 42 40) (42 41 41) (41 41) (42) (42 41) (41) (41) (42 40 40) (41 41) (40) (42 40) (40) (42) (41) (42 42 41 41) (42 41) (42) (41) (43 42) (42) (41 41 40 40) (40) (43 40) (41 41) (40 40) (42 41) (41) (41 40) (40) (41 40) (42 40) (41) (41) (43) (40) (41) (41 41 40) (42) (40 40) (40) (40) (43 41) (43 40) (42 41) (41) (42 41) (40) (40) (42 40) (40) (41 41 41) (42 42 40 40) (41) (41) (40) (40) (43 41 41) (41) (40) (41) (41) (40) (41) (40) (41 40 40) (41) (41) (41 41 41) (42 40) (41) (40) (41) (40 40) (40) (40) (42 42) (42) (41) (41) (42 40) (42) (40) (40) (42 41) (40) (41 41) (41) (42) (40) (41 40) (40) (41) (44) (42 41) (43) (43 42 41 40) (41) (42) (40) (41) (40) (40) (40) (42) (41 40) (42 40) (41 41 40) (40) (40) (42 41 41) (41 41 41 40) (42 42 42) (41) (41) (40 40 40) (40) (41) (42) (44) (41) (44 41) (41 40 40) (41 40) (42 41 41) (42) (42 42) (43 40) (40) (42) (41) (40 40 40) (41) (41) (41) (40) (41) (41 41) (42) (41) (40) (43 43) (40) (42 42) (41) (42) (41) (42) (41 41) (40) (42 40) (40) (44 41 40) (42 41) (42) (42 40) (41) (41) (41) (40) (42) (42) (42) (41 40) (41) (40) (42 41) (42) (41 41) (40) (41 40) (42 42 41) (41) (41 40) (41) (41) (42) (40) (42) (42) (40 40) (41 40) (41) (41 40) (42 42 41 41) (43 42) (41 40) (41 40) (42) (41 41) (43) (43 40) (41 40) (42 41) (41 40) (41 40) (41 40) (41) (41 41) (41 40) (41 41) (40) (42) (41) (41) (45) (41) (41) (43 41) (41) (41) (42 40) (41 41) (43 43) (41 41) (43) (43 41) (40) (42) (42) (42 42 40) (42 41 41) (41 41 40) (42 41) (42) (41 41 40) (41) (50 42) (41) (41) (41) (41 40) (42 41) (42) (41 41) (45 41) (41) (42 40) (42) (42) (40) (40 40) (44) (41 41 41 40) (42 40) (40) (41) (42 42 40) (40) (42 41) (40) (50 40) (42 40) (42) (42 41) (42 42) (43 42 41 40) (41) (45 44 41) (42) (43 41 41) (42 41) (40) (43 42 40) (41) (41) (41) (41) (44 41) (42 42 41) (42) (46 43) (42) (40) (40) (45) (43) (46) (43 42 41 41) (41) (46) (52 43 42 41 41) (45 42 41) (41 41) (40) (41) (43 42) (44) (42 42 41 41) (47) (49 43) (41) (42) (43 41 41) (41) (41) (42) (41) (41) (44) (42) (43) (42) (42 41) (41) (43) (41) (42) (42 42 41) (41) (41) (41) (46 43 42) (41) (42 42) (42 41) (42 41) (44 42) (42 41) (53 41) (41) (41) (42) (45 45 42) (47 41) (42 42) (49 42) (52) (42 42 41 41) (41) (41) (41 40) (42) (44) (41) (43 41 41) (43) (42) (43) (46) (48 42) (45 42 41) (43 42 42) (42 42 42) (42) (45 42) (50 47 41) (49 41) (43 42 42) (42) (44) (41) (46 43) (41) (43 41) (42) (43) (44) (44 43 42) (41) (46) (43) (45 41) (43 41) (47 44) (46) (47 43 41) (45) (41) (44 42) (41) (43) (42 42 42) (41) (43) (41 41) (45 44) (41) (42 41) (42) (51 45 44) (41) (41) (43 42) (41 41) (40) (41 40) (40 40) (43) (42 41) (41) (42 41) (42) (41) (42 41) (41) (43) (44 43 42) (40) (41 41) (40) (41 40) (40) (41) (44 43) (43 41 40) (41) (41) (41 40) (42 42 41 40) (40) (40) (40) (42 41) (41 41) (44 42 42 41 40) (41) (43 41) (40) (42) (41 40 40) (41) (40) (40) (40 40) (42 41) (44 42 42) (43 41 40) (41) (41 41) (41 41) (43 41) (42 40) (41) (40) (40 40) (43 41) (42 41) (41 41) (40) (41 41) (42) (41) (42) (43 42 41 40) (43) (41 40) (43) (42 41) (41 41 41) (41) (41 40) (41 41) (41) (41) (42) (40) (44 44) (41 40) (41 41) (42) (41 40) (43 42) (41) (41) (41 40) (44 41 41) (43 41 41) (40) (40) (41) (41) (42) (41 41) (41 40) (41) (41) (43 41) (44 41) (41 40 40) (41) (41 40) (41 40) (41 40) (40) (44 41 40) (40) (41 41) (41 40) (41) (41) (40) (40) (41 41) (43) (45 41) (41) (41) (42 41 41) (41) (42) (41) (42) (42 41) (41 40) (40) (40) (41) (43) (44) (41) (42) (44) (43 42 41) (41) (42 41 40) (40) (43 41 41 40) (40) (41 41) (40) (40 40) (41) (42) (41 40) (43 40) (41) (42) (41 41 41) (40) (41) (40) (42) (44 42) (41 40) (42) (40) (42) (41 40) (41) (41) (42) (41) (43 41 41 40) (41 40) (42 40) (41 41 40) (42 40) (41 41) (42 41) (42) (41) (43 41 40) (41) (43 42) (41) (42) (40) (43 42 41 41) (43 41 40) (42) (40) (41 40 40) (41) (43 41) (40) (40) (43 40) (43 42 40) (41) (41) (42 41) (40) (41) (43) (44) (43 40) (41 40) (41) (44) (43) (41) (41 41) (40 40) (43) (41 41) (42) (41) (42 41) (41) (41) (42) (41) (42 41) (44 41) (41) (43) (40) (41) (41 41) (41) (41) (41) (41 41) (42 41) (42) (41) (42 40) (42 41) (40) (41) (41) (40) (43 42 41) (41 41) (40) (42 41) (42) (42 41) (42 40) (41) (43) (42) (43) (43) (40) (40) (41) (41) (41 40) (41) (40) (43 41) (42 41) (41) (43) (41 40) (40) (42 41 40) (41) (40 40) (41) (40) (41) (43 41) (40 40) (42) (42 40) (41) (42 41) (41) (42) (42) (42 40) (42) (42) (41 41) (40 40) (42 41) (41 40) (41) (41 41) (42 41) (40 40 40) (41) (41) (40 40) (42) (41 40) (41) (40) (41) (41 41) (40) (40) (41) (41) (41) (43 40) (41) (41) (42) (41) (41) (42) (41) (41) (42 41) (42) (41 40) (41 40) (42 41) (41) (40 40) (42 41) (46) (43 40) (41) (41) (41) (43) (41) (41) (41) (41) (42) (42 40) (42 42 41) (41 40) (42) (41 41) (41 40) (41 41 40) (42) (40 40) (42 40) (41) (41 41) (41) (42) (41 40) (43 41 41 40) (41) (42) (41) (41 41) (41) (42) (42 42 41) (41) (42) (41) (43 42 42 40) (41) (40) (40) (41) (41) (41 40) (40) (40) (42 41) (41 40) (41 41) (41 41 40) (41) (40) (42 41) (42) (40) (41) (43 42) (41 41) (40) (41) (67 41 40) (41) (41) (40) (42) (44 40) (49 41) (41) (41 41) (41) (42 41) (43) (41) (42 41) (41) (41) (40) (42) (42 41) (41) (42 41) (40) (42) (42 41 40) (41) (56 42) (44 41 40) (40) (40) (41) (40) (42 41) (42) (41 40) (42) (41) (43 41 41) (41 41 41) (40) (42) (43 42 41 41) (41) (41 41 41) (42) (41) (42 40 40 40) (41 41) (41) (41 40) (41) (40) (43) (46) (43 41) (49 40) (44 41 41) (42) (41) (43) (40) (46 41) (43 42) (43 41) (41) (44 44 40) (42 42 41) (41 41) (42) (40) (42) (42 42 41 41) (45) (43) (44 42 41) (46 41 40) (46 43 41 40 40) (44 44) (42) (43) (43 40) (44 43 41 41) (44) (47) (43) (43) (49 40) (41) (41) (43 41) (44) (42 40) (42) (44) (44 43) (40) (42) (45 43 41) (44 43) (42 41) (43) (41) (41) (40) (44) (45 43 42 41 41) (45 43 42 42) (41) (45 42) (44 41) (41) (42) (42) (42 41) (43 42 41) (45 41) (44) (46 45 41 40) (43) (42 42) (42) (46 40) (42) (42) (45 42 41) (44 41) (42 42 41 40) (48) (43 42) (41) (41) (43) (42) (40) (43 41) (43 42) (45 41) (41) (41) (41) (42) (43 42) (42) (43 41) (42 41 40) (45) (41) (40) (41) (42) (40) (40) (42) (40) (41) (42 40) (41) (42 41) (43 43) (43 41) (42 41) (40) (43 42 41) (40) (40 40) (41) (44) (42) (42) (41) (43 41 40) (41) (46 40) (42 41) (41) (41) (41) (43 42 40) (41) (42 41) (41 40) (41) (43) (44 42 41 41) (42) (41) (42 41 41) (42) (40) (41) (40) (42 41) (44 42 41) (41) (43 42) (41) (41) (42) (43 41) (42) (47) (40) (41 40) (41) (44) (40) (42) (43 40) (43 41) (42 42 41 41) (42) (41 41) (42 41) (41) (43 42) (41) (42 40) (42 41) (41) (42) (41) (42) (40) (41 40) (41 41) (41 40) (43) (42) (41 41) (40) (40) (41) (41) (46) (40) (43) (44 42) (42) (42 41 41 40) (40) (41) (43) (45) (40) (43) (43 43) (41 41) (43) (41) (45 43) (41) (41) (41 40) (43 41) (41 40) (44) (40) (43 41) (42 42) (44 41 41) (42) (41) (42) (41) (40) (41) (40) (42) (41) (42) (42) (46 40) (42) (44 41) (42) (46 42 42) (45) (42 41) (42 41) (41) (42) (41) (44 40) (41) (41) (46 41) (41) (44) (41) (42 41) (40 40 40) (40) (41) (41) (42) (42 40) (42) (41) (41 41) (42 41) (42 41) (43 41) (42 40) (43) (42) (41 41) (42 41) (42 40) (42 40) (41) (40) (41) (42 42) (42) (43) (40) (40 40) (42) (40) (41) (42 40) (45) (41) (41) (42 41 41) (42) (40) (43) (44) (41 40) (41) (41) (41) (43) (40) (40) (40) (44 43 40) (41 41) (43 40 40) (41) (42 42 40) (41) (42) (41) (44 42) (41 41 41) (40) (43) (42) (41) (43 42) (41 41) (40) (43) (41) (40) (44 42) (42 41) (41 41 41 40 40) (42) (42) (46 43) (43 40) (42 40) (44) (43) (47) (43 42) (43) (41) (43 41) (43 41) (42) (43) (42 41) (41) (45 45 43) (41) (41 40 40) (42) (44) (45 44 40) (42 41 41) (41) (42) (42) (45 42 40) (43) (42 41) (42 41) (42 40) (41 40) (41) (41 41) (47 45) (44 42 41) (42) (43 41 40) (45 42 41) (40) (41 40) (44) (40) (43 42) (41 40 40) (42 41 41) (44 42) (43 41) (45 44 42) (43) (41) (42) (44) (43) (44) (41) (41) (42) (41) (41) (41 40) (42) (45) (41) (42) (45) (42) (43 41 40) (44) (41 41) (41) (41) (41) (46) (41) (41) (41) (43) (42 41) (43) (41) (42) (41) (43) (42 41) (41) (44 43 41) (41 41) (42) (44 41 41 41) (41) (44 41) (42 41) (40) (43 42 41) (41) (43) (46) (42 41) (43) (41 41) (42) (41) (42) (41) (41) (42) (41) (41) (46 42) (45) (44 41) (41) (41) (42) (42) (42) (43 41) (43 41) (40) (42) (41 41) (41) (43 43 41) (41 41) (43) (43 41 40) (43) (41 41) (41) (41 41) (42 41 41) (41 41) (44) (47) (41) (40) (41) (41) (45) (42 41) (45) (41) (41) (44 41) (42 41) (40) (42) (41) (45 42 41) (41) (44) (42 41 40) (41 41 40) (43) (43 42 41) (42) (41) (41 40) (41 40) (43) (42 41) (41) (41) (45 42) (41 41 40) (41 41) (43 42 40) (41) (42 41 40) (41) (42 40) (41 41 40 40 40) (42 40) (45) (55) (41) (42) (41) (45) (41) (48 41) (41) (58) (41 40) (43 42) (41 41) (41) (42) (45 41 41) (41 40) (40) (41) (40) (42) (43 42) (41) (55 45) (41) (42) (41) (43) (45 41) (42) (47) (41) (43 41) (41) (45 40) (54 44 41 41) (48 44 43 43 43) (43) (42 41) (41 41) (43) (42) (44) (48 43 41 41 40) (41) (41) (41) (41) (43) (43 42 41) (44 43 42) (41) (41 41) (44 42) (64 41) (42) (53) (41) (45 45 42 41 41) (46) (43) (41) (50 41) (45) (41) (50 42) (45 44 44) (44) (41 41 41 41 41) (41) (43 42 41) (42 42) (51 45) (41 41) (42) (47 42 41) (44) (42) (42) (42 41) (41) (44) (44) (41) (46) (46) (42) (42) (43 41) (42) (44 43 41) (45) (44 43) (43) (41) (44) (44 42 41) (41) (46 42) (41) (50 42 41 41) (43 41) (47 41) (44 41) (43) (43) (44 41) (43) (44) (43) (47 42) (42) (43) (53 45 45) (41) (42) (47) (41) (42) (45) (42) (51 43 43) (44 43 41) (43) (44) (43) (42) (41) (44) (43 42) (48 44 42 41) (44 42) (44 42) (44 42 41) (41) (49) (43) (42) (44 43 43) (41) (48 43) (42 42) (46 44 44) (41 41) (41) (66) (42) (45 44 41) (45 44 44) (42) (44 41) (42 42) (45 45) (46 41) (49 44 44 43) (51) (45) (43) (44 43) (41) (43) (48 44) (43) (42 42) (46 43 41) (49 42) (42) (46) (44 44 42) (47 46) (48 43) (44 42) (42) (45) (44 41) (42) (46) (42) (47 44 41) (41) (42) (41) (42 41) (46 44) (43) (43) (45) (42) (41) (46 42 42 42) (44 44 44) (51 43 42) (45) (43 41) (42) (44) (45 41 41) (41) (44 42 41) (42) (42) (46 41) (59 45 41) (41) (42) (42) (43) (50 45) (43) (41) (42 42) (42 41) (42) (51 42 41) (41) (45 41 41 41) (47 41 41) (41) (49) (41 41) (43 43 42 41) (43 42 40) (53 46) (47 40) (43) (41) (41) (44) (42) (44) (40) (41) (42 42 41) (45 43) (41) (41) (45 44 42 41) (43 42 41) (48 44 42 41) (41) (41) (43) (55 42 42 41) (43) (45 43 41) (44 42) (44) (41) (41 41) (44) (46 42) (42) (41) (41) (45) (42) (43 41) (43 42) (46 45 43 43) (43 41) (43 42 40) (44) (43 41) (43) (42 42) (43) (45) (48) (43 41) (44) (44 43) (46) (43 43) (41) (42) (44) (43 42 42) (45 42 41) (42) (43 42) (46) (43 41) (54 42 42 41) (42 41) (43) (44) (43) (42) (42) (42) (47) (42) (44 42) (41) (42) (44 41) (48 43) (42) (42 41) (42) (55 45 43) (42) (42 41) (45 41) (43) (41) (49 42) (43 42 41) (47 42) (41) (49) (41) (41) (41) (45) (42) (43) (49) (41) (44 42 42) (41) (47) (45 41) (41) (43) (48 41) (42) (41) (42) (47 41) (44 41) (41) (49 42) (42) (42 41 41) (42 41 41) (44 42) (41) (42) (48 42 41 41) (46 42 41) (50) (46) (41 41) (47 41) (43 43 41) (42 41) (41) (42) (45 41 41) (41) (43) (42 41 41 40) (44 41) (42 42 41 41) (41) (42 41) (43) (48) (47) (45 42 41 41) (42) (41) (41) (48) (45 41 41) (41) (42 41) (41) (42 40) (41) (49) (44 41 40) (41) (42) (41) (42 41 41) (44) (44) (41) (41 41) (41) (43 42) (40) (44 41) (46 41 41) (41) (40) (40) (46 41) (41) (43 42 41) (46 44 42 41) (41) (41) (41 41 41 40) (41) (53) (40) (43) (46 46 41) (42) (41 41) (42) (41) (44 42 41) (47 41 40 40) (43) (43) (41) (41 40) (41) (42 41) (47 40) (42) (41) (40 40) (40) (47) (40) (48 43) (41 41) (45 42) (42) (49 41) (43) (41) (50) (50 41 40) (41) (40) (42) (41) (46 41) (41) (43) (51 41 41) (43 41 41 40) (49) (46 41) (40) (43) (43 41 40) (47) (41) (41) (42 41) (42) (40) (41 41 40) (47 40) (40) (41) (41) (43) (44 41 40) (40) (59 42 42) (43) (41) (42) (45 42) (44) (58 41 40 40 40) (40) (43) (41) (43 41) (43) (48 41 41) (50 41 40) (48 43) (45 41) (41 40) (41 40) (42) (46) (40) (42) (46) (40) (41) (40) (42) (41 41) (44) (41 41) (41) (42 40) (41 41 40) (41) (41) (43) (46) (41) (40) (56 50 40 40) (43) (45 43) (43 42) (41) (40) (40) (50 41) (56 44) (42) (53) (40) (46) (43 41 41) (53 42 41) (42) (46) (42) (40) (46 43) (49 42) (47) (44 42) (42) (64) (43 41) (49) (46) (43 41) (43) (41) (42 42) (50) (41 41 40 40) (44) (43) (51) (41) (41 41 40) (51) (42) (47) (43) (42 41 41) (64 42) (49 43 42) (42 42 42 41) (41) (40) (41) (43 41) (45 42 42) (51) (44) (43) (45) (44 41 41 40 40 40) (45 43 40) (41 40) (41) (43) (42) (46) (62 42) (43 41) (43) (54) (62 42 42) (41) (43) (40) (55 41) (49) (45 41 41 40) (43) (43) (61 41) (42) (46) (42 42) (50 42) (54 42 41 41 40 40) (40) (45) (51 41) (52) (42) (52 41) (41 40) (41) (43 43 42) (42) (42) (42 41) (43 41) (40 40) (41) (41) (42 41) (51 43) (41) (41) (41) (42 42) (45) (40) (43 40) (43 41) (45 41) (43) (41 40) (45 43 42) (41) (63 40) (51 47) (41) (43) (51 41) (57 43) (41) (52) (59) (43) (44 41) (44 42 41) (54 41 41) (42) (64 47) (40) (41) (44 41 41 41) (44) (53 46 41) (57) (41) (44) (41) (52 43 42) (42 41 40) (42) (42) (53 45 42) (42 41) (42 41) (61 52) (42) (46) (41) (44 40) (50) (49) (42) (66 41 41) (42) (40) (43) (45) (51 41 41) (49) (43) (46 41) (52) (41) (43 42) (46) (50 43 42 41) (41 41) (41) (51 42 41) (46) (58 42 41) (46 43 42 41) (49) (42) (41) (43) (46) (51 49) (42) (50 40) (45 41) (48 47) (42) (40) (46 46) (42) (47) (43) (45 43 43) (42) (41) (51 41) (43) (42) (67 42) (52) (42) (58 42 42) (41) (57 46 44 43 41) (41) (43) (50 42) (58 45) (45) (50) (43) (50) (44 41) (46) (43) (42) (49 46 45 45) (43) (45 42) (55 54 49 42) (44 41 41) (50 46) (41) (45 41) (50) (55 42) (42 41) (43) (49 41) (41) (42) (54 47 45) (66) (41) (58 41) (43) (42 41) (50 46) (48) (51) (41) (41) (42) (50 48 41) (42) (42) (42) (48) (46 44) (63 45 42) (43) (43) (43) (53) (41) (47 46 43) (47) (45) (50 48) (70) (41) (58 52) (46) (45) (41) (42) (55) (64) (45) (50 42 41) (45 44 42) (54 49) (42) (43 41) (44 42) (55 45 42) (50) (44 43) (48 42) (64) (42) (62 44 41) (43 42 41) (43) (52 42) (43 42) (47) (48 47) (46 40) (44) (58 43) (47 42 41) (64 42) (45) (47 45 42 41) (48) (41) (45) (41) (42 42 41) (51) (45) (48 43) (44 42 41) (41) (42 42 41 41) (45 41 40) (41) (43 42 41) (41 41) (50 40) (42) (52 44 41 41) (41) (41 41) (40) (41 41) (44) (42) (41) (41 41 40) (44 41) (40 40) (41) (48 48) (41) (48) (41 40) (43 41) (45 44) (40) (42) (40) (54 41) (52) (41) (42) (54 47) (45) (51 48 42 41) (41) (42 42) (41) (49) (42) (54 46) (50 41) (41) (43 40) (44 44 41) (48) (56) (41) (60 43 42) (55 41) (41) (42) (42 40) (52) (54 41) (45) (47 46 41) (40) (52 45) (56) (47 43 42) (59) (41) (41) (43) (49 43 41) (43 42) (45) (45) (46) (41) (41) (43 43 41) (43 41) (61) (46) (42) (47 44) (51 43) (47 43 41) (42) (57) (46) (46 43) (45 43) (43 41) (43 41) (47 42) (52 46 42) (66) (45 43 42) (48) (44) (49 41) (45 43) (43 43) (41) (42 42 40) (45 40) (45) (42) (48 42) (47 44 41) (53 40) (42) (44) (42) (43) (51 44 42) (45 44 41) (54) (41) (41) (41 41) (44) (63 47) (59 41 41) (41) (47 42) (41) (40) (52 46 41 41) (49) (43) (42) (42) (46) (44) (48 43 41) (48 42) (42) (45 41) (41) (47) (57) (40) (41) (42) (42) (42 41) (68 42 40) (40) (41) (64 40) (41) (43) (44) (42) (48 40) (43 41 41) (41) (50) (42) (43 41) (42) (47 40) (42 41) (61 41) (41) (43 42 41) (61 43 42) (41) (52) (42) (40) (44) (41) (49) (41) (44) (41) (41) (41) (42) (56 41 40) (42 41 41) (41 40) (48 44) (47 42 41 41) (43 41) (41) (46) (41) (40) (41) (57) (46) (41) (43 42) (44) (41) (44 42) (41) (43) (41) (53) (43 41) (43 42 40) (50) (43 40) (41) (41) (48 42) (42 40) (40) (41) (49) (41) (47 43 40) (43) (43 41 40) (40) (41) (42) (44 41) (46) (44) (41 41) (42 41 40) (43) (41) (41) (42 40) (41) (43 41 41) (43 41 40) (41 40) (40 40) (41) (41 40) (41 41) (41) (42 40) (44) (40) (42 40) (41 41 40) (40) (40) (44 43 41 41) (41) (41) (44) (42 41 40 40) (41) (40) (41) (42 40) (41 41 41 40 40) (42) (40) (41) (50 42 41) (40) (44 40 40) (41) (41 40) (43 40) (41) (41) (43 41) (40 40) (41 40) (41 40) (41 40) (41) (40) (41 41 41 40) (40) (40) (40) (41) (40) (41) (40) (42) (43 41 41) (41 41 40 40) (41) (42 41 40) (40) (42 41) (40) (41) (41) (41) (41) (40) (40) (42 42) (41) (41 40) (41 40) (42 41 41) (41 40) (41) (42 41 40 40) (42 41) (41) (42) (40) (42) (41 40) (43 42) (41) (41 40) (42) (42 40) (42 41 41) (40) (41 40) (40 40) (42) (41) (40) (41) (41 41 41) (41) (41) (41) (40) (40) (42) (42 41 40) (41) (42 41) (42) (40 40) (40) (42 41) (42) (41) (41 41) (43 41 41) (40) (42 41 40 40) (40) (41 40) (40) (41) (41 40 40 40 40) (40) (42 41 40) (54 41) (40) (41 40) (41) (41 40) (41) (41 41 40) (40 40) (42) (42 41) (41 41) (41) (40 40) (41) (42 41) (42) (41 40 40) (41) (41 40) (40) (41) (43) (43 42 41) (40) (41 41 41) (41) (42 40) (41) (40) (42 41) (41) (41) (40 40) (42) (42) (40) (41) (41 40) (41) (40) (41 40) (40 40) (42) (40) (42 41 41 40) (42) (41) (41 40) (41 40 40) (43 41 41) (41) (40) (40) (40) (41) (45) (40 40) (42) (44) (40) (41) (47 42 41) (42 40) (56) (41 40) (41) (44) (42) (45) (43 43) (41 41) (41 41) (44 42 41) (43) (41 40) (41) (43 41 40) (42) (42 41) (41 41) (46 41) (49 41) (41) (43 42 41) (42) (42) (44) (43) (42) (42) (42 42) (45 42 41) (43) (44 41) (45 42) (42) (42 41) (41) (48 42) (48) (51) (44) (44) (42) (44) (45 43 42) (46 43) (45) (41 41) (47) (41) (40) (42) (42) (44 43) (42) (46 43) (41) (41) (45 42) (43 43) (43) (42) (42) (46) (42) (41 41) (41) (44 41 41) (44 42 42) (44 42 41) (41) (41) (41 41) (42) (43) (47 42) (40) (42) (45 41) (42) (42) (41 40) (45) (42 42) (41) (43) (42) (42 41) (41) (43 41) (40) (43 41) (41) (42 41 41) (42) (43 42) (42) (41) (41 41 40) (41) (41) (42) (41) (42) (43 41 40) (41 41) (43) (42 41) (44) (42) (45) (40) (42) (41) (41) (42) (42) (42) (41) (41 41) (42) (44) (42) (41) (42) (41) (41) (42) (41 41 41) (41) (41 40) (40) (41) (41) (41) (41) (43) (42) (42 42) (41 40) (42) (41) (42) (41 41) (42 41 41) (45 42 42 42 40) (41 41) (41) (50) (41) (41 40) (42) (42) (42 40) (40) (45 42) (41) (41) (41) (43) (42 41) (42) (41 41 40) (42 41) (40) (41) (49) (41) (41) (41 40) (41) (41 41) (41) (42) (43 42) (41 40) (48 41) (40) (40) (41 40) (41 41 41) (52 43) (46) (40) (41) (40) (40) (41 41 40 40) (41) (41) (41) (41) (42 41) (41) (41) (41) (41) (42 40 40) (40) (40) (40 40) (40) (40) (40) (41) (40) (41) (42 40 40) (40) (40) (40) (40) (40) (41 40) (40 40) (40 40) (40) (40) (41) (41) (40 40) (40) (40 40) (41 40) (40) (41) (40) (42) (40) (40) (40 40 40 40) (40 40) (41 40) (41) (40 40) (40) (41 40) (41 40 40) (40) (42 41) (40) (41) (40) (40) (40) (41 40 40) (40) (40) (40) (41) (41 40 40) (41) (40) (41 40 40) (41 40) (40 40) (40) (41) (40) (40 40) (41 40) (41 40 40) (40) (41 40) (40 40) (40) (40 40) (50 41 40) (40 40) (41 40) (40) (40) (40) (41 41 41 40) (40) (40 40 40) (40) (40 40) (40) (41 40 40 40) (40) (40) (41 40 40) (40) (40 40) (40) (40) (40 40) (41 40) (41 40) (41) (41) (40 40) (40) (40) (41 40) (40) (40 40) (40 40) (40 40) (40) (41) (40 40) (40 40 40) (40) (40) (40) (41 41 40) (40) (40 40) (41) (40 40) (41) (41 40) (40 40) (40 40 40) (40 40) (40 40) (40 40 40) (41 40 40) (41 40) (40 40) (40) (41) (41 40) (40) (41) (40) (41 40 40) (40 40) (40 40) (41) (40 40 40) (40) (41) (40) (41 40) (40) (41 40 40 40) (41 40) (40) (40 40) (40) (40) (40) (41) (41 40) (41 41) (40 40 40 40) (40 40) (40) (40) (40 40) (41 40) (40) (40 40 40) (40) (40) (41 40 40 40 40) (40) (40) (40) (41) (40) (40 40) (41 41) (40) (40 40) (40) (40 40) (40 40) (40) (40) (40 40 40) (40) (40 40) (41 40) (40) (41) (40 40 40) (40) (40 40) (40) (41) (40 40) (40) (40 40) (40) (40) (41 41) (40) (40) (40) (40 40) (40) (40) (40 40) (40 40) (41 40) (41 40 40 40) (40 40 40) (41) (40) (41) (40) (41 40) (40) (41 40) (41) (41 40 40 40) (40 40) (40) (40) (40 40) (40) (40) (40) (40 40) (40 40) (41 40 40) (40) (40) (40) (40) (41) (41) (40 40) (40) (40) (40) (40 40) (41) (41 40 40) (40) (40) (41) (40) (40) (41 40) (40 40) (40) (41) (41) (40 40) (41) (40 40) (40) (40) (41) (40 40) (40) (41) (41) (40) (42) (41) (40) (40 40) (41) (40 40) (40 40 40) (40) (40) (41) (40) (40 40) (40) (41) (40) (41 41 40) (42 41 40) (40) (40 40) (41) (46) (51) (40) (40) (44) (40) (40 40) (40 40) (40) (41) (40) (40 40) (44 40) (40) (40) (40) (40) (40) (40) (46) (41 40) (40) (41) (43 40) (40) (40) (43 40) (40 40 40) (40 40) (47 40 40 40 40) (40 40 40) (41 41) (40 40) (40) (40) (40) (41) (40) (48 40) (40) (41) (40 40) (57 47 46 41) (48 48 41 40) (43) (41) (41) (41 41) (41) (41) (41) (40) (45) (41 41) (43 41 41) (41 41) (42) (41 41) (44) (41) (41) (41) (41) (41) (42 41) (41 40) (41) (40) (41) (41 40) (41) (43) (41 40) (50 43) (46) (42) (47 41) (46) (40) (42) (41) (41) (42 41 41) (45 41) (43) (42 41 41) (41 41) (47) (41) (41) (46 41) (41) (42) (41 41) (41) (41) (43 42) (42 41) (41) (41) (41) (41 41) (48) (41) (41) (40) (42) (40) (41) (40) (40) (40) (41) (40 40) (42 40 40) (40) (40) (41) (41 40) (42) (40 40) (40) (41 40) (40 40) (41 40) (41) (41 40) (41 40) (41 40 40) (40) (40) (40) (40) (41 40) (41 40) (40 40) (41 40) (40) (40) (41 40 40) (41 40) (40) (40) (40) (41) (40) (40) (40 40) (40) (40 40) (41) (40 40) (41) (40 40) (40) (40) (40) (40) (40) (40) (41 40) (40 40) (41) (41 40) (40) (41) (40) (40) (40) (41 40) (40) (40 40) (40) (41 40 40) (40) (40) (40) (40) (40 40 40) (41) (40 40) (42 40) (41) (42 40) (40) (41) (40 40 40) (41 40 40 40) (40) (41 40) (40 40 40) (41) (40 40) (40) (40) (41 40 40) (40) (41 40) (41 40 40) (40) (41 40 40) (40 40 40) (40) (40) (40) (40 40) (40 40) (40) (41 40 40) (40) (40 40) (42 40) (40) (40 40) (40) (40) (40 40) (40 40) (40) (41 40) (40 40 40 40) (40) (40) (40 40) (41) (40 40) (40 40 40) (40 40 40) (41 40) (40) (40) (40) (40 40) (40 40) (40 40) (40) (40 40) (40) (41) (40 40) (40) (40) (40 40 40) (40) (40 40) (40 40) (41 40) (40) (40) (41 40) (40 40 40) (40) (40) (41) (40 40) (40 40) (40 40 40) (40) (40 40 40) (41) (40) (41 40) (40 40) (40 40) (40 40) (41 40 40) (40 40) (40) (41) (40) (42 40 40) (40) (40 40) (40 40) (41) (40) (42 40) (41) (40) (40 40) (40) (40) (41 40) (40) (40 40) (40) (40) (41 40 40 40) (41 40) (40 40) (40) (40) (41 40) (40) (40 40) (40) (41 40 40 40) (40 40) (40) (42) (40 40) (40) (40 40) (40) (40 40) (40 40) (41 40 40) (40) (40) (41 41) (40 40 40) (40) (40) (41 41 40) (41 40) (41 40 40 40) (41 40 40) (41 40) (40) (40) (40) (40) (41 41 40) (40 40) (40 40) (41 40 40) (40 40 40) (41 40) (40 40 40) (40) (42 40 40) (41 40) (41 40) (46) (40) (40 40 40) (40 40) (41) (40) (42) (40 40) (41 40) (41 40) (40) (41 40) (41) (40 40) (40 40 40) (40 40 40 40) (42) (42 41) (40 40) (40) (40 40) (40) (40 40) (41 40) (41 40 40) (40) (40 40) (40) (40) (41 40 40) (40 40) (42) (40) (41 40) (40) (40 40) (40 40 40) (41 40 40) (40) (40) (40 40 40) (41 40) (41 40) (41 40 40) (40) (40) (40 40) (41 40) (41 40) (40) (42 40 40 40) (40) (40) (42 41 40) (40 40) (40) (41) (41 40 40) (40) (42) (40 40 40) (40 40) (40) (41) (40 40 40) (40) (41) (40) (43) (40) (40) (41) (40 40 40) (41 40 40 40) (40) (40 40) (40) (41 40) (40 40) (40) (40 40 40) (40 40) (40 40) (40) (40 40 40) (40) (43 40 40) (40 40) (41) (41) (40 40) (40) (41 40) (40 40) (40) (40 40 40) (42 40) (40) (40 40) (40) (40) (40 40 40) (54) (40) (42) (40) (40 40) (41) (42) (40 40 40) (40) (40) (41) (40 40) (41 40) (40 40) (40 40 40 40) (40) (41 40) (40 40) (40 40) (40) (40) (40 40) (40) (40) (40 40) (43 41 40) (56 40 40) (40) (40 40) (42 40 40) (42 40 40) (40) (41) (40) (40 40) (41 40) (40) (40) (40 40 40) (40) (40) (42) (55) (41 40) (40 40) (40) (42) (40) (41) (40) (41) (45 41 41) (53) (40 40) (40) (40 40) (49) (40) (40) (40) (40) (41 40) (41 40) (40) (41) (40) (41 41) (41 41) (42 40 40) (40) (41 40) (42 41) (41) (41) (41) (41) (41) (42 42 41) (42) (40) (40) (40) (41 41 41) (41) (42) (41) (42 42) (42 40) (42 41) (41) (42 40) (41) (43 41) (41) (43 43 41 41) (41) (50) (42) (41) (40) (41 41) (44 44 42) (48 41) (41 41 40) (41) (43) (41 40) (41) (48 42) (43) (42 41) (42 41) (47 43) (42 40) (41) (42 40) (43) (42 41 40) (42) (41 41) (42 41) (41) (46) (44 41) (41 41) (42) (42 41) (41) (42) (42 41) (41) (46 43) (40) (42 42) (44 42) (45 42) (43 42) (41) (41 40 40) (43 42) (41) (46) (41 41) (41) (41) (46) (41 40) (41 41) (43) (41) (42) (41) (41) (41) (42 42 41 41) (42 41) (42) (42 41) (44 41 41) (41) (41) (43) (42 41) (43 41) (43 42 41) (43) (41 41) (43) (44) (41 41) (42 41 41) (42) (40) (43) (43) (42 41) (42 41) (43) (41) (42) (41) (41) (41 41) (43 41) (51 41) (41) (40) (41) (42) (41) (57 44 41) (40) (45 40) (44 42 42) (42 42 40 40 40) (41) (42 42) (43) (40) (40 40) (42 41 40) (41) (41 40) (43) (43 42 41) (43 42) (44 42) (42 41 41) (41) (43) (43 41) (42 41) (48 42 41) (43) (44 44 43) (42 41) (46) (42) (41) (45) (42) (43 41) (42 41) (46 41) (41) (42) (45 42) (44 42) (44 43 41) (43) (44) (42) (48) (43) (44) (43 42 42) (41) (43 42 42 42) (45) (41 41) (45) (44) (41) (44) (46 44 44 43 43) (41) (42) (42) (43) (43) (46 43) (43) (44) (41) (43) (42) (43 42) (42) (43 41) (44 41) (42 42) (41) (43) (41) (44) (45) (44 42 42) (42 41) (47 44) (48 42) (43) (43 42) (41) (41) (42) (43) (47) (42 41 41) (42 41 41) (43 43) (50 43) (94) (43) (43) (42 41) (44) (41) (42) (42 41) (41) (41) (44) (44) (41) (45) (42) (41) (44) (42) (43) (44 42 42) (41) (42 41) (44) (41 41) (42) (43) (43 41) (44 41) (42) (44) (41) (45 44) (41) (45) (40) (42 41) (45 43) (41) (41) (41 41) (45 41) (45) (41) (44 41 41) (42) (42 41 41) (40) (40) (48 43 40) (44 43) (45 42) (41) (42 41) (42 41) (46 42) (43) (41) (41) (41 41) (47 43 41) (41) (41 41) (43) (42 42) (43 41) (46 44) (41 41) (43 42 41) (40 40) (42) (41) (42 41) (41) (40) (42 41 40) (43 42 41) (42) (41) (46) (44) (44) (42 41 40) (42 41) (43) (45 41 41) (40) (41 41) (40) (41) (43 41 41 40) (44) (42 41) (41) (43 42) (41 40) (44 42 40) (40) (42 41 41 40) (45) (46 44 41) (40) (41) (40) (41) (41) (43) (41 41) (44 42 40 40) (40) (43 43 41) (41) (47) (41 41 41) (40) (40) (44) (40) (40) (45 41 41 40) (45) (44 43) (40) (45) (44) (45 44) (40) (41) (40) (46 42 41 40) (40) (40) (43) (41) (45 44 43) (41) (40 40 40) (46 41 40) (41) (40) (44) (40 40) (44 40) (44) (41) (43) (40) (45 40) (40 40) (41 40) (46 40) (44 41 40) (40) (46 45) (40) (43 40 40) (41 40) (45 44) (41) (42 41 40 40) (44 40) (40) (43 40) (41 40) (49 44) (41) (41) (40) (40) (42 40) (40 40) (48 40) (41) (40) (40 40) (61) (41 40) (40) (47) (50) (42) (43 40) (40) (40) (40) (41 40) (44) (41) (40) (40 40) (44 41) (41) (40 40) (41) (40) (43 40) (46) (45 40) (41) (50 40 40) (44) (42) (41) (44 40) (47 43 40 40 40) (43) (41) (43) (49 44 41 40) (40) (42 41) (40) (43 40) (41) (43 42 41) (46) (41 40) (44) (41) (42) (43 41) (43 43 40) (48) (47 40) (41 41) (47) (50) (41) (46) (44) (41) (43) (40) (42) (41) (41 41 40) (40) (44) (42) (41) (40) (43) (40) (43 41 40) (49 41 40) (40) (45 43 41) (42) (41) (45) (41 40 40) (45 42 41) (40) (48 42 41) (42 40) (40) (40 40) (40) (41) (41 41) (42) (43 41) (47) (41 40 40) (40) (49) (41) (42) (41) (45) (47 43) (40 40) (41) (41) (41) (41) (44) (40 40) (51) (42 41) (41) (43) (45) (42 41) (42) (41 40) (42) (41) (40) (42) (45 44 43 42 41 40 40 40) (41 40 40 40 40) (41) (40) (42) (40) (40) (41) (41) (48) (42 40) (40) (48) (40) (42) (48) (40) (47) (41) (42 40) (41 40) (42) (40) (46) (40) (40) (50) (40) (47) (45) (46 41 40) (45) (44 41) (42) (40) (49) (52) (52) (42) (43) (40 40) (40) (40) (41 41 40) (41 41) (45 44) (42) (53) (42 40) (40) (47) (43 40) (40) (47) (42) (45) (41 41 41) (46 42) (40) (48 47 42) (40) (49) (40) (41) (41) (41) (46) (45) (47) (45) (41) (55) (47) (47 40) (41) (40) (42) (42) (45) (42) (48 40) (40) (40) (46) (41) (41) (50 41) (49) (40) (45) (40) (40) (42 40 40) (47 41) (42 40) (40) (41 41) (40) (51) (40) (40) (41) (42) (41) (40) (40) (41) (40) (41) (40) (54) (42) (40) (41) (42) (45 44) (47 42 41) (41 41 40) (45 41) (41 41) (42 41) (40) (41) (40) (41) (41) (49) (41) (40 40) (40) (41) (45 41) (45) (42) (41) (41 41 40) (43 41) (44) (42) (41 41) (41) (41) (41 41) (41) (41) (48) (41 41) (41) (41) (41 41) (76 41) (41) (43) (40) (46 42 41) (43 41) (41 40) (51) (41) (42 41) (41) (47 46 43) (44 42) (40) (41) (40) (41 40) (40) (45) (42) (41) (41) (43 42 41) (41) (56) (41 40) (40) (41 40) (51) (42) (51) (42 41) (40) (42 41) (48) (51 41) (41) (42) (42) (50) (40) (42) (40) (41 40) (47) (41 40) (42 41 41) (42) (41) (40) (50) (49) (42 40) (45) (41 40) (40) (43 41) (41) (47) (40) (40) (44) (41) (41) (50) (50) (53) (45) (41) (42) (51 40) (41) (55) (44) (40) (41) (48) (42) (40) (45) (45 40) (41) (41) (40) (47) (50 41) (43) (41) (40) (49 41) (44) (41) (50) (41) (43) (51 40) (45) (41) (40) (43) (40) (40) (44) (40) (56) (46) (46) (41) (40) (44) (47) (41) (44) (41) (41) (45) (40) (48) (44) (51) (41 41) (48) (43) (41) (51 40) (41) (48) (42 40) (40) (40) (44) (44) (48) (44) (41) (41) (45) (46) (54) (48) (46 41) (41) (48) (49) (55) (52 41) (50) (41) (49) (48) (64) (51) (44) (42) (52) (44 42) (51) (55) (45) (46) (58) (48 43) (51) (43) (41) (47) (42) (49) (53 42 42 42 42) (44) (50) (44) (42) (47) (48) (49) (44) (50) (44) (42) (41) (44) (44) (49) (45) (41) (48) (45) (41) (42) (50) (43) (45) (56) (49) (47) (55) (41) (44) (47 41) (45 44 41) (49) (41) (42) (49) (41) (41) (41) (44) (41) (43) (46) (44) (48) (43) (43) (47) (46) (49) (43) (49) (52) (42) (42) (48) (45) (45) (57 41 41) (48 46 41) (48) (48 44) (43 42) (53 42) (51) (41 41 41) (43) (48 41) (47 43) (41) (42) (53) (48) (50) (45) (49 43) (48) (44) (51) (42) (48 41) (43 41) (44 41) (44 42) (41) (41) (52 46) (48 43) (42) (52 50) (44) (42) (49) (42) (46 42) (41) (45) (42 41 41 41) (42) (41) (44 42) (42) (45 41) (44) (45) (47) (43) (42) (43 41) (41) (44) (47 42) (42) (43) (42) (41) (49) (42 42) (42 41) (41 40) (46 44 42) (45 42) (45 42) (42) (41) (45) (41) (42 42 41) (42) (43 42 41) (41) (56) (42) (44 42) (45) (41) (47) (42 41) (41) (43) (43 42) (42) (41) (50 41) (46 41) (51) (47) (53 44 42 41) (45) (42 41) (44 42 41 41) (42) (41) (40) (42) (40) (41) (50 42) (43) (44 42) (41 41) (41) (45) (41 41) (43 43 42) (42 41) (45 42) (41 41) (42) (41 41) (44) (41) (45 41) (43) (42 41) (41) (45 42) (41) (41) (42) (43) (41 40) (41) (42 42) (41) (41) (44) (45 41) (41 41) (43) (45 44 41) (52 42) (43 41) (43 42 41) (41 41) (41) (45 41) (42) (42) (41) (41) (46 42) (43 42 41) (41) (44 41) (41 41) (41) (43 41 40) (46 43) (41) (42 41 41) (42) (43 41 40) (41 41) (44) (41) (43 41 41 40) (41) (42 41) (43) (42 40) (43 40) (41 40) (41) (41) (47 43) (41) (43 41 40) (42 41) (41 41) (41) (41) (40) (41 41) (40) (46) (41 41) (42) (43 41) (41) (41) (41) (41) (41 40 40) (44) (40) (40) (41 41 40) (45 44 43 41) (41 40) (41 40) (41) (41) (40) (40 40) (42 41) (43 40) (46 40 40) (40) (41) (43) (43 42) (41 41) (45 40) (40) (41 40) (46 43 41) (40 40) (41) (41 41) (40) (40) (41 41) (41) (42 40) (44) (46) (41) (46) (46 40 40) (41) (41 40) (41) (41 40) (40) (41 41) (40) (40) (41) (41) (44 41) (49) (41 40) (43) (41 41 41) (41) (41 40) (40 40) (41) (42 41 40) (47 40) (41) (47 40) (43) (40) (40) (40) (41 41) (46 41 40 40) (41) (40 40 40) (42 41) (40) (46 40) (42 40) (41) (40) (40) (40) (45 41 40) (40 40) (41 41 41) (40) (40 40) (42 40) (45) (40) (41 41) (45) (41) (41) (40) (40) (40 40) (44 40) (40) (40) (40) (41) (41) (41) (40 40) (48 42) (40 40 40 40) (40) (40) (41) (47 40) (41) (41 40) (40) (40 40) (40 40) (41 40) (43 41 40) (41 40) (44) (44) (45) (41) (41) (45 40) (42 40 40) (40) (41) (45) (47) (41) (40) (40 40) (45 41 40) (42 40) (41) (45) (40) (40) (43) (41) (40) (40) (41) (40 40 40) (49 45) (41 41) (41) (40) (43) (40) (41) (45) (41) (40) (40) (44 40) (41) (44) (42 40) (41) (40) (41) (43) (45) (44 41 40) (40) (41) (40) (41) (43) (40) (46) (46 43) (40 40 40) (40) (43) (44) (41) (40) (44 41 40 40) (44 40) (40) (40) (46) (41 40) (46) (40 40) (42) (41) (41 41) (42 40) (43) (44) (42) (48) (43) (41) (47) (41 40) (40 40 40 40) (46) (45 40) (42 40) (44) (40) (43) (44 43) (41) (40) (41) (41) (43 41 40) (45 43) (40) (42) (40) (43 41 40) (43 40) (41) (41) (40) (41) (45) (45) (41) (43 40) (41 40) (43 40) (40 40 40) (45) (41) (42) (42) (41) (41 40) (43 41) (45 41) (40) (46 44 43 40) (40 40) (42) (42) (41 41) (48 40) (40) (46 40 40) (42) (44 41) (40) (47 44 40) (40) (41 40) (46) (44) (40) (43) (41 40) (41) (40) (40) (41) (40 40) (40) (44 40) (41) (42 41) (45) (40) (41) (44) (40) (46 43) (41) (44) (41 41) (40) (40) (47 40 40) (43 41) (43 40) (42) (40) (40 40 40) (45 40) (41 40) (41) (43 41) (49 40) (40) (40 40 40) (48 41 40) (48) (42) (40) (44 41) (40) (42) (48 44 43 41) (41) (41 40) (44) (50) (42) (40) (45 41) (47) (45 41) (44) (49 43) (46) (42) (40) (41) (49) (42) (41 40 40) (43) (40) (41 41) (43 40) (44 42 41 41 40 40 40) (40) (44 43 41) (40) (46 43 40) (45) (41) (44 42) (49 42) (41 40 40) (40) (41 40) (42) (43 42 41) (41 40) (47) (40) (41) (40) (45 40) (42 41) (43) (48 46 43 42 40) (41) (43) (43 40) (46 41) (41 40) (49 41 40) (41 40) (41 40) (42 41 41) (41) (40 40) (41) (43 40) (41 41) (41) (41 40) (41 40) (42) (41) (44 40 40) (43 40) (43 42 40) (40) (42) (41 40) (41) (41 40) (40) (46) (42 41) (41) (44 41) (41) (42 42 40 40) (44) (41) (42 41 40) (41) (41 40) (40 40) (40) (41) (41) (41) (40 40 40 40) (40) (43 41 41) (45) (42) (42) (41) (40) (41) (41 41) (41 40 40) (44) (41 40) (48) (42) (41 41 40) (40) (40 40) (41) (41 41) (42 41 40) (42) (41) (41) (40) (47) (41) (41) (42) (43 40) (41) (41 41) (40) (42) (41) (44 40) (44 40) (43 42) (40 40) (45 41 41 41) (41 40 40) (42 42) (40) (41) (43 41 41 40) (40) (41) (44) (41 41) (41 41 40) (40) (44 41) (49 41) (41) (46 40 40) (40) (40) (45) (40) (41) (41 41) (40) (42 41 40) (42 40) (41 40) (40 40) (41 41) (47) (41) (41) (41) (40) (40 40) (46 43 40 40 40) (40) (45) (42 41) (41 40) (43) (41) (45 41 41) (42 40 40 40) (41 41 40) (51) (41) (40) (40) (45 40 40) (42) (42) (41 40) (40) (41 40) (45 41) (41) (40) (41) (41 41) (45) (42) (40) (42) (41 40 40) (40) (41) (41) (43 40) (43) (41) (44 41 41 40) (44 40) (41) (43) (46 41) (41) (41 40) (46 40 40) (45 40) (41) (44) (40 40) (40 40) (41 41) (40) (41) (44) (40) (44) (48) (40) (44 41 40) (41) (42) (43 40) (41 40) (41 41 40 40) (42) (43) (48 40) (41) (43 43 41 41 40) (41 40) (41 41 40) (40) (44) (42 41) (51 41 40) (41) (41 41) (40) (44 43) (40) (40) (44) (40) (50 41) (45) (43 41 41) (44) (46 41) (41) (43 40) (41 40) (48 41 40) (40) (41 40 40 40) (40) (40) (41) (44) (41) (43 41) (42) (41) (40) (43) (41 40) (44 41) (41) (42) (41) (41) (41) (54 41 40 40) (43) (41 40) (40) (45 44 41) (43) (42) (41) (40 40) (45 40 40) (41) (44) (40 40) (40 40) (43 42 42) (41) (40) (41) (43 40) (41) (45) (41) (42) (41) (41 40) (45) (41) (43) (44) (43) (40 40) (42 41) (42) (44) (40) (41 40) (41) (45 41) (41) (40 40 40) (40) (42 42) (40) (43) (40) (44 41) (44) (44 41) (40 40) (41 40) (42) (45) (41) (41) (41 40) (40) (44 42 41) (42 41) (40 40) (44) (44) (41) (41) (45) (40) (40) (41 41) (42) (46) (45 44) (41) (40) (45) (40) (44 42 41) (45) (40) (43 41) (41) (41 41 40) (41 40) (41 40) (44) (41) (44 42) (43 40) (41) (40) (42 41 41 40) (45 45 42) (42 42 42) (41 40) (45 42) (44) (41 40) (43) (43 41 41) (40) (44) (45) (45) (43 40) (41 40) (41) (41) (41) (41) (40) (44 42 41 40 40) (45 41 40) (40) (45) (42) (41) (40) (43) (41 41) (41) (44) (40) (40) (48) (40) (41) (41) (43) (41) (42) (42) (41 40) (40) (44) (43 43) (41 41 41) (40) (43) (41) (41) (40) (41) (43 41 40) (40) (44 40) (40) (41 40) (40) (44) (40) (44) (44) (40) (44) (44 41) (44 41 41 40) (44 41) (44 41 40) (42 40) (47 40) (40) (41 40) (42) (41) (45) (43 40 40) (45 40) (40) (41) (42) (41 40) (41 40) (40) (45 42) (40) (46) (40) (44) (41) (41 40 40) (44 40) (42) (44 41 41 40 40) (41) (43) (41) (47 41) (43) (40) (41) (40) (43 41 40) (43) (43 40 40) (40) (43) (41) (41) (49) (41 40) (41 41 40) (44) (41 41 40) (40) (45) (41) (40) (57 41) (40) (43) (44 41 41 40) (42) (41) (44 42 40) (40 40) (41) (42 41) (40) (40) (41) (43 41) (40) (43 40) (41) (43 41) (43) (42) (41) (40) (40) (40) (42) (41 40) (41) (41) (40 40 40) (40) (42 40) (40) (41) (43 42) (42) (48 41) (46) (51 41) (43) (43 42) (40) (43 40) (41) (40) (54) (42 40) (42) (45) (40) (45 41) (40) (42 41) (51 45) (47 42) (44 42 41) (65) (41) (42) (44 42) (42) (43) (42) (42) (47) (42 41) (41) (45) (47 43) (45) (43) (41) (46 43) (45 42) (47) (42) (43 41) (56) (42) (44) (43) (49) (42) (46 44 41) (47) (44 42 42 42) (41 41) (42) (43 42) (59 46 41) (42 41) (42) (44) (42) (47 45 45) (44 42 41) (47) (46 46) (42 41) (48 41) (50) (57 41) (45 41) (45) (42 41) (45 44 43) (41) (40) (42) (42) (42 41) (43 40) (42) (43 42 41) (41) (42 41) (47 42) (43) (48) (46 42) (43) (58) (43 42) (43) (44) (41 41) (42) (45) (41) (47 41) (41) (42 40) (42 41) (40 40) (41) (42) (44) (41) (43) (45 42 41 41) (45) (41 41) (42) (43 40) (41) (43 43) (48 41) (43 41) (40) (43 41) (41) (44 41) (40) (46) (42) (42) (49 42) (41 40) (41) (42 40) (41 41) (48 41) (40 40) (41) (47) (43) (41) (43 41) (43) (53) (41) (41) (41 40) (40 40) (41) (40) (47 42 41) (40) (45 41) (45) (41 40) (41 40) (41) (44 41) (48 41) (41) (40) (44 43 42) (43) (42) (42 42) (43 42 40) (41 40 40) (40) (41) (42 42) (41) (42) (41) (45 41) (40) (41) (41) (41) (40) (43 41) (41) (40 40) (43 41) (49) (42 42 41 40) (41 40) (43) (49 40) (43 41) (41) (41) (42 41) (41 41 40) (42 41) (42) (43 41) (43 42) (41) (42) (42 40) (41 41) (41 41) (40 40) (44 41) (44) (40) (48) (41) (41) (41) (42) (42 41 41) (41) (40) (40) (44 40) (41) (41 41) (40) (47) (41) (41) (40) (44 42 42) (44) (40) (41) (40) (45 40) (42 41) (40 40) (40) (41 40) (43) (44) (41) (41) (41) (41) (41) (41) (41) (41) (42) (44) (41) (40) (41) (42) (41) (41 40) (41 40) (42 42) (40) (40 40) (40) (41 40) (40 40) (40) (43) (41 41) (40 40) (40) (41) (41) (42 40 40 40) (41) (40) (40) (41 40) (41 41) (41) (40 40) (41) (41 40) (41 40 40) (40) (40) (41) (40) (40 40) (41 41) (40) (40) (40 40) (40) (41 41) (40) (40) (41 40) (41) (40 40) (41) (40) (41) (40) (40) (40) (41) (40) (40) (40) (41 40) (40) (40) (41 40) (41 40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (41) (40) (41) (40) (40) (40) (41 40) (40) (40) (40 40 40) (41 40) (40 40) (40) (40 40 40) (40) (40 40) (40) (40) (40) (40 40) (40 40 40) (40 40 40) (40) (40) (40) (40) (41 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (41 40 40) (40) (40) (40 40) (41) (40) (53 40) (40 40) (41 40) (40 40) (40) (40) (41) (40) (42) (41 40) (51) (56 43 42 42 41 41) (42 40) (44 44 41 41 41 41) (42 41) (41) (41 41) (41) (41) (42 41) (42) (41) (41) (42) (41) (55 42 41) (41 41) (41 40) (41 41) (42 42 41 41 41) (41) (85) (42 41 41) (52) (42 41) (41 41 41) (44 43 40) (42) (42 41 40) (41) (41) (42 41) (42 41) (41 40) (42 42 41 41) (58 41) (41) (42) (43 41) (41) (47 43 42) (41) (42 41) (41 41) (41) (41) (43 42 42 41 41) (42) (43 42 41) (41) (47 42 42 41) (41 41) (41) (41) (42) (41) (49 41) (42 40) (42 42 41) (42 42) (41) (51) (41) (41 41 41) (41) (46 44 41 41) (42) (41 41) (42 42) (42) (42 41) (46) (42) (41) (42 41) (43) (40) (42 41) (41) (41) (46 41) (42 42 41) (42 41) (41) (41 41) (42) (40) (59) (42) (42 42 41) (43 41) (42 41) (40) (43 41 41) (41) (41) (42 41) (41) (41) (41) (41) (41 41) (55) (42 41 41) (52 41) (41) (41) (41) (41 41 41) (45 41) (41) (41 41 41 41) (41) (41 41 41) (41) (42 42 41) (42) (43 42) (41) (41) (41) (53 41) (42 41) (65 41) (41) (51) (44 41) (42) (41) (41) (42 42) (41) (41) (44 42) (42) (42) (41) (44 41) (42) (41 41 41) (41) (42 41) (41) (41 41) (42) (54 43 42 41) (44) (43) (41) (42) (46 41) (43) (46 41) (48) (42 40) (44 42 42 41) (41) (41) (41) (41) (41) (41 41) (42 41 41) (45) (44) (41) (42 41) (43 43 42 42) (42) (48 44 41) (44 42 41) (42) (43) (42) (43 43) (42) (42 42) (45 42 41) (42) (42 42 42) (56 42) (44 43) (42) (46) (48 43) (41) (42) (46 41) (45 43 42) (42) (44 42 41) (45) (42) (42) (47 43 41) (44 43) (43) (41) (47 43) (41 41) (42) (42) (41) (42 41) (42 41) (42) (42) (43 43 42) (43) (42) (99 45) (42) (43) (51 43 43) (44) (44 42) (42) (43) (41) (55 48) (43 42) (42) (43 43) (50 45) (50) (44 43) (49 47) (42) (47) (43) (42) (48) (42) (42 42 41) (41) (44 42) (47 43 41) (43) (45 42) (42 42) (42 41) (58 43 42) (43) (47 41) (43) (42) (43) (42) (42 41) (41) (45 42) (45 43 41) (43) (44) (43) (42 42) (43) (42 42 42) (41) (41) (44) (47 42) (43) (43) (42) (75 43 41) (44) (65 43) (50 41) (42) (44) (43 42) (43) (45 42 42) (42 41 41) (44 44) (45 41) (44) (43) (41) (46 42 42) (41 41) (44) (43) (44) (47) (47) (42 41) (49) (43) (41) (69) (51 46) (43 42) (50 44 41) (86) (41) (42 42) (45) (43 43 43) (42 42) (43) (42) (42) (41) (43) (43) (48 46 42) (42) (80 42 42 42) (43) (43) (43) (43 43 42) (55 45) (43) (44) (42 42) (48 45 43 42) (45) (42) (41) (54 44 43) (41) (42) (49 42) (51 44 43) (41 41) (41) (44 43) (46) (47 43 42) (42) (85 42) (43 42) (59) (43 41) (42 41) (44) (45 41) (54 45) (42) (46) (80) (41) (46) (42) (46 45 44 43 42 42) (41) (44 41) (59 46 44 44) (43 42 42) (46) (43 42) (43) (50) (45) (44 42 42) (42) (45) (47) (46 42 42) (54 49 43) (44) (42) (46 44 42 41) (43) (46) (44) (43) (52 49 45 42) (48) (43 42 41) (50 48) (93 42) (45) (69) (48 44) (55 45) (42) (43 43 42 42) (43) (43) (48) (100 79) (51 41) (43) (43) (41 41) (42) (50 45) (42) (45 45) (55 44 42 42) (51 43) (41) (43) (42) (45) (42) (45 44) (56) (43) (43) (47 42) (52 44) (44) (47 46 45) (44 43) (43) (51 44) (47) (75 44) (54) (44) (49 48 46 44) (58) (55) (45) (42) (43) (47) (45) (45) (48 42) (42) (47) (48 42) (44) (61 44 43) (49 48) (48 45 43) (55) (44 43 42) (56 51 46) (48 43) (59 49) (51 50) (44 42) (46) (45) (43) (50) (44) (45) (50 50 44) (44) (46) (49) (49 47 43) (47 44) (44) (51 48 46) (44) (46 45) (47) (46 46) (43) (44) (45) (62 48) (52) (49 45) (42) (67) (42) (47) (43 43 43) (45 41) (69) (43) (42 42 41) (45 42 42 41) (43 42 42) (41) (42) (43) (43) (43 42 42 41) (42) (42 41) (42) (43) (45) (42 42 42 41) (42 41) (45) (42) (44) (49 46 41) (42) (41) (44 42 41 41 41) (43) (42) (41) (41) (43 42 41) (41 41) (40) (43 42) (41) (45 41) (41) (41) (41 41) (42 41 41) (42 41) (43) (41) (41) (41) (46 42 41 41) (42) (43 41) (43 41) (42) (41 41) (41) (42) (41) (41 41) (41) (43) (41) (43) (40) (41) (41) (41) (42 41) (41) (41) (41) (40) (41) (41) (41) (42 41 41) (41) (41) (42 41 40) (43 41) (41) (41) (41) (40) (41) (41 41 41) (42) (41) (41 41) (41 41) (40) (42) (40) (41 41 41) (40) (40) (41) (42 41) (41) (41) (40) (40) (41 41) (41) (40) (41) (40) (41) (41 41 40) (42 41) (41) (41) (43 41) (41) (40 40) (41) (41 40) (41 41 41) (41) (41 41 40) (41) (41 40) (41) (43) (41) (41 41) (41 40) (42) (41) (42 41 40) (40) (41) (41) (41 41) (41 40) (41) (41 40) (41) (41 41) (40) (40) (42 41 41 40) (41 40) (41) (41) (42 41 41) (41) (40) (41 40 40) (40) (41 41) (41 41) (40) (41) (50) (44 41) (41 41 40) (40 40) (41 40) (40 40) (42) (41 41) (41) (44 42 41) (41) (41 40 40 40) (40) (42) (41 41) (40) (41 41) (42 41) (41) (40) (42) (40 40) (40 40) (40) (41) (40) (40) (40) (41 40) (41) (41 40) (40) (41 40) (40) (41 41) (40 40) (40) (41) (41) (41 40) (40) (41) (41) (42 40) (41) (41 41) (41 41) (52 41 41 40) (41 40) (40 40) (40) (41) (40 40) (41 40) (41 41 40) (41) (41) (40) (41) (41) (40) (41) (41) (41 41) (41 40) (41) (40) (41 41 40) (49) (40) (41) (41 40) (42) (40 40 40) (41 40) (41) (41 41) (41) (41 41) (41 41 40 40) (41) (41) (46 41 40) (40) (40) (40) (40) (41) (43) (46) (41 41) (42 41 41 40) (41) (41) (41) (41 40 40) (41 40) (44) (54 41) (41 41 41) (42) (53 41) (41) (41) (41) (42 41) (41 40) (40 40) (41 40) (40) (40) (41) (41 41) (41) (41) (42 41) (41 40) (42) (40) (41) (41 40) (42) (40) (42 42 41) (42) (42 41) (41) (45 40) (40) (42 41) (41) (40) (41) (40) (41 41) (43 41) (42) (41 40) (41) (42) (40) (42) (41) (41) (42 41) (42 41) (43 41) (41) (40) (41 41) (43 41) (41) (41 41) (46 41 41) (41) (44) (42) (41) (43) (40 40) (44 43) (41) (43) (41 41) (41) (41 40) (42) (41 40) (43) (42) (42 41) (43) (47 41) (42) (41) (45 43) (41) (41 40) (41) (41) (42 41) (42) (41) (41) (42) (41) (41) (41) (42) (46) (42) (42) (41) (47) (40) (41) (52) (42) (41) (42 41 41) (43) (44 42 41) (41) (41) (41) (43 41 40) (44 41) (42) (43) (41) (43) (41) (41) (44) (43 40) (44 41) (41 41) (44 41) (41) (41 41) (43 42) (41 41) (42) (41) (41) (44 41) (41) (43) (41) (41) (42) (41 41) (43) (46) (42) (46 41) (41) (41 41) (41) (41) (41) (41) (47) (41 40) (41) (42) (41) (45) (57) (46) (40) (41 41) (51) (46 40) (41) (41) (41) (41 41) (41) (41) (42) (41 41) (43) (42) (43) (41) (41) (45) (43) (41) (42) (41) (41) (42) (43) (41 41) (42) (41) (41) (41) (52 41) (41) (42 41) (43) (41) (41 41) (41) (41 41 40) (43) (41) (42) (42) (40) (42 40) (41) (42 41) (41) (53 42) (40) (41 41) (43 42 41) (43) (40) (40) (42) (41) (42 41) (41) (42) (45 42) (43 41 41) (43) (41) (40) (41) (43 41) (42 40) (41) (41) (45) (43) (42) (43 41) (44) (41) (42 41 41) (41) (43 41) (40) (40) (41) (41) (41) (41) (49 41 41 41) (40) (44 41) (43 42) (41) (45) (44) (43) (41) (49 44 42) (43 42 42) (41) (42) (60) (44) (49 42 41) (41) (41) (42) (48) (42) (50) (43 43) (52 41) (43) (44) (41) (42) (41) (44 42) (42) (42) (42 42) (47) (52) (43) (46) (44 42) (41) (41) (43 43) (41) (42) (44 44) (42) (43) (46) (42) (41) (42) (50) (43 42) (44 44) (42) (45) (44 43 42) (42) (42) (41) (42) (42) (44) (47) (42) (44 42) (44 44 42) (47) (44 42) (44) (42) (42) (41) (45) (42 41) (55) (43) (42) (44) (50 41) (43) (44) (46) (41) (43) (45 43) (42) (44 43 42) (41) (43) (41) (47 44) (45 42) (42) (45) (44 41) (45 43) (57 46) (45 43) (42) (46) (42) (49 44) (43 41) (45 42) (42 42) (44) (50) (47 41) (42) (43) (45) (46) (42) (43) (42) (43) (46) (42) (48 45 45 42 41) (44) (46 42) (51) (43) (43) (42 41 41) (41) (43) (45) (41) (41) (49 46) (43 41) (42) (51 45 43 41 41) (42) (41) (43 42 42) (43) (42) (44) (47 42) (42) (42) (42) (44) (41 41) (41) (42) (43 42) (43) (42 41) (43) (43) (43) (42) (41) (42) (40) (43 41) (48 42) (44) (46) (41) (45 41) (43 41) (40) (42) (41) (44) (41) (42 41) (43) (44) (43 42 40) (40) (43 41) (44 41) (41 40) (45 41) (41) (42) (42) (50 42) (40) (42 40) (42 41) (41 41) (41 41) (40 40) (41) (42) (41) (41 40) (41 40) (42 42 41) (40 40) (44) (40) (41) (41 41 40 40) (42) (40) (40) (41) (43) (41 40) (40) (42) (41) (41) (40) (43 40) (41 40) (41) (41 40 40) (41) (42) (41 40) (41) (40) (40) (40) (42 41 40) (43) (40 40) (41) (40) (41 41) (41 40) (40) (41 40) (41) (41 41) (41) (40 40) (40) (41 40) (41 40) (40) (41) (41 41) (41) (40) (42) (40 40) (41) (40) (41) (40) (41 40) (44) (41 40) (41 41 41 41) (41 40 40) (40) (41) (41) (52 42) (48 40 40) (40) (41) (40 40 40) (40) (41) (40) (41) (40) (40) (41 40 40 40 40) (41) (42) (41) (41 40) (40) (40) (40) (40) (41) (42 40 40) (40) (40) (43) (40 40) (40) (40) (40) (41) (40) (40 40 40) (41) (40) (40 40) (42) (41) (53) (40) (44 40) (40) (40) (43 41) (42 41) (44) (47 42 41 41) (45) (42) (42) (43 43 41) (46) (46) (52 44) (42) (49) (42) (43) (47) (43 42) (45) (43) (42) (43) (42 41) (64) (43 43) (43) (41) (44) (46 41) (42) (45) (42) (52 44) (42) (43) (44 41 41 41) (43) (42) (43) (41) (45) (41) (43) (46) (41) (42) (41) (43 42) (41) (41) (42 41) (41 41 41) (41) (60) (42) (42) (42 41 40) (41) (42 42) (43) (42) (41) (41) (42) (42 41) (42 42 40) (41) (42) (42) (42 40) (42) (41) (43) (43 43) (44 41 41 41 40) (41) (41) (44) (42 41) (42 41 40) (41) (41 41) (41) (41) (44 42 41) (41) (42) (41) (41) (41) (48 42) (41) (42) (41) (41 41) (50) (40) (40) (41) (40) (41 41 40) (42 41) (42 41) (42 42 41) (44 41) (43) (41) (56 40) (43) (41) (41 41) (41) (40 40) (41) (41 41) (40) (42) (41) (41) (42 42) (41) (42) (41) (43 41) (44) (41) (42) (42 41) (49 45 41) (41) (45 42) (40) (42) (41) (41) (42) (40) (40) (46) (41) (44 41) (41 41 40) (44 44) (41 40 40) (41) (41) (41 40) (41 41) (40) (40) (44 40) (42 41 41 41 40) (40) (40) (40 40) (40) (42 40 40) (40) (40) (41 40) (40) (40 40) (40) (40) (41) (40) (40 40) (40) (41 40) (40) (42 40) (41 40) (41 40) (40) (40) (40) (41 40) (41 40) (41) (41 41) (41) (41 40) (43 41 41 40) (45) (40) (49 41) (41 40) (40 40) (43) (41 41 41 41) (42) (41) (40) (41) (43 41 40) (43) (41 41) (43 42) (40) (41 41) (42 40) (42 41 41) (41) (41 40) (42 40) (41 41 41) (41 41) (43) (41) (41) (41 41) (40) (41) (41) (41) (43 41) (41 41) (43 41) (41) (41) (42) (41) (42 42) (43 41) (41 41) (42) (42 42) (41) (41 41) (41 41) (42) (43) (41) (41 41 41) (40) (41 40) (41) (41 40) (41 41) (42 41) (51) (43 42) (41 41) (42 41) (43 42 41) (41) (43 42) (43) (42 41) (41) (41) (41) (41) (43) (43 42) (44 42) (42 41) (41) (41) (44) (43 42) (41) (43) (41 41 41) (42) (41) (42) (43 43) (45 43) (42) (42) (42 42 41) (43 43) (41) (43 41) (41) (42) (42 41) (42) (42) (42) (42 42) (43) (43 41 41) (45 43 42) (48 42) (43) (45 43) (41) (44 44 43) (42) (46) (42) (42) (44) (44 43) (44) (43) (43) (43 42) (45 45) (45 44 42 42 41) (42) (46 44 43 42) (43) (45) (41 41) (45 43) (44 42) (45 42 42) (42) (45 43 43 42 41) (42 42) (43 42) (42) (43) (43 43 42) (43 43 41) (42) (45 44 42) (41 41) (43 42 42) (45 43) (43 41) (43 42 42) (43) (47 43 43 42 42) (42) (46 42) (44 42 41) (44 42) (42) (45) (44 43 43) (45 43 43 42) (42) (44) (42 41 41) (43) (44 44 41) (42 42 41) (47 43 42) (42 41) (41) (45) (43) (43) (44 42) (42 41) (42 41) (41) (43) (44 42) (41) (47) (45 43 42 42) (42 42 41) (42) (43 42) (43 42) (43) (42) (42) (44) (43 41 41) (44) (42 41) (43) (42 41) (43 41) (47 43) (42) (44 44) (51 49 44 42) (42 42 42) (41) (43 41) (44 42) (48 43 42) (44) (42 41) (46 44) (44) (42 41) (50 46 44) (43) (48) (42) (43 42) (42) (47) (42) (43) (42 41) (41) (43 41) (47 41) (41) (54 42 41) (44 42 42) (42) (56 43 41) (41 41) (45) (43) (45 42 42) (43) (47 44 42) (42 41) (42) (45 45 41) (41 41) (43 42 42) (42 42 41) (45 42) (47 41) (46 43 43) (41) (41 41 40) (41) (41) (47) (41 41) (42 41) (46) (44) (47 42) (42 42) (42 41) (45 44 42) (41) (42 41) (42 42 42) (41) (41 40) (41 41) (40) (44 41) (42) (42 41 41 40) (45) (41 40 40) (43 43) (43 42 41) (41) (44 41) (43 41 41) (40 40) (42) (41 40) (42 41) (41) (41 41) (41 41) (42 41 41 40) (43 43) (41 41 41) (43) (40 40) (42 41 41) (41) (40 40) (41 41 41) (41 40 40) (42) (41) (42 40) (41 40) (40) (41) (40) (42 41 40) (40) (40) (40) (41 40 40 40) (40 40) (40) (42) (41 40) (40) (41) (42) (41 40) (40) (41 41) (41) (40) (40) (42 41 40 40 40) (40) (42) (45 40) (41 40 40) (41) (41 40) (41 40) (41 40 40) (41 40) (41 40) (41 40) (40) (43 40 40) (41 40) (41) (41 40) (41 40) (40) (40) (42 40) (41) (41) (40) (41 40 40) (40 40) (41 41) (42 40) (41 40) (41 40) (40) (41) (41 40 40 40) (40) (40) (40) (40 40) (40) (40) (41) (41) (40) (41 40 40 40) (42 40) (40) (40) (44) (41 40 40) (41) (41 40) (40) (40) (41 40 40) (42 40 40) (40) (41 40) (50 49 49 44 42 41 40) (45) (41 41 41) (42 41 41 41) (41) (46) (41 41 41 40) (41 41 41 40) (42 41 41 40) (41) (42 41 41) (40) (41) (40) (41) (45 40) (41) (41) (41) (41) (41) (41) (40) (41 41) (41 40 40) (42) (42 41 41) (41) (41) (40) (41 41) (41) (40) (41) (47) (46) (41 41 41) (41) (42 41) (44 41 41) (42) (44) (41) (41 41) (41 41) (41) (41) (45 41) (43) (44 41) (42) (42) (44 41) (42 41 41) (46) (41 41) (44 41 41 41) (46) (46) (41) (42) (41) (44 41) (41) (41) (49) (43 42 42 41) (45 42) (40) (41 41 41) (44 42) (41) (46 42) (42 41) (42 41) (42) (41 41) (42) (48 47) (43) (43 42 41) (41) (41) (43 41) (42) (43 41) (52) (45 41) (41 41) (43) (44) (42) (41) (41) (42 42 41) (41) (42) (45 41 41) (42) (42 41) (40) (42) (41 41) (44 41 41 41 41 41) (41) (42 42) (41) (44 42) (43 42) (41 41 41) (41) (43 42) (42 41) (41) (43) (41) (40) (42) (41) (40) (40) (41 41 40) (41 41) (40) (41 40) (41 40 40) (40 40 40) (41) (40) (40) (40) (41) (40) (40 40) (40) (41) (40 40) (40) (41 40 40) (40 40) (40) (40) (40) (40 40) (40) (40 40) (40 40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (41 40 40 40) (41) (40) (41 40) (40) (40 40) (41 40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (41) (40) (40) (40 40) (40 40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (41 40) (40) (40 40) (40) (40 40 40) (40) (40) (40) (40) (40) (40 40 40) (40) (40) (40) (40) (40 40 40 40) (40 40 40) (40) (40 40) (40 40 40) (40) (40 40 40) (40) (40 40 40 40) (40 40) (41) (40) (40) (40 40) (40 40) (40 40) (41) (40) (40) (40 40) (40 40 40) (40) (40) (40) (40) (40) (40) (41 40) (40 40) (40 40 40) (40) (40 40 40 40) (40) (40) (40) (40 40 40) (40) (40 40 40 40) (40) (40) (40) (40 40 40 40) (40) (40 40 40) (40 40) (40 40 40) (40) (40) (40) (40) (40) (40 40) (40 40) (40) (40) (40) (40 40) (40) (41) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40) (56 40) (40) (44) (40) (40) (40) (40) (40 40) (40 40 40) (40 40 40) (40) (40 40 40 40) (40) (40) (40 40 40) (40 40) (40) (40) (40) (40) (45 42) (42) (40 40) (51 48 42 41 41) (40) (41) (42 41) (41 41 41 41) (42 41 41 40) (41) (41) (40) (40) (41 40) (41) (40 40) (41) (42) (41 41 40) (41 40) (42 41 41) (41) (41) (40 40) (43 41 41) (42) (41) (41 41) (41) (41) (42 41 41) (41 40) (41) (41) (42 41) (41 41) (45) (41) (41) (41) (41) (44) (42 42) (42) (41) (41) (42) (44 41 41 41) (43) (42) (42 42 41 41) (41 40) (46) (44 41) (41) (43 43 42) (43 41) (43 41) (44) (41) (42) (41) (42) (42) (41) (42) (43) (42 42 41) (44 41) (42 42) (45 42) (44) (44 42) (47) (43) (41) (46 42) (47 44 41) (43) (42) (48) (45 44 42) (50) (46 44 43 42) (43 41) (44) (41) (44) (41) (42 42) (42) (43) (42) (45 42) (41 41) (42) (42) (42) (46) (42 42) (41 41) (41) (44 41) (43) (43) (41) (42 40) (41 40) (47 43 42 41) (43 41) (41 41) (41 41 40) (42 41 41) (41) (40) (41) (42 40) (41 40) (54 42 40) (41) (43 41) (41) (41 41) (41 41) (42) (40 40) (44 41) (40 40) (41) (42 41) (41) (40) (42 41) (42 41 41) (40 40) (41 40) (41) (43) (40) (41) (40) (44 40 40) (40) (41 41 41) (43) (40 40) (41) (40 40) (42) (40) (40) (42 41) (42 41) (40) (43 41 40) (41) (49 43) (40) (40) (42 41) (41) (40) (40) (42 41 40) (40) (40) (40) (40) (42 40) (40) (41 40) (40) (40) (41 40 40) (40) (41) (40 40) (41 40) (40) (40) (41 40) (41) (41 40) (40) (42 41 40) (40) (41) (40) (40) (41) (41 40 40) (40 40) (40) (40) (40 40) (40 40) (41 40) (42 42 41 40) (40) (40 40) (40 40) (40) (41) (41 40) (41 40) (40) (41) (41 41) (40) (41) (41 40 40 40 40) (40 40) (40) (40) (41 41 40 40) (40) (41) (42 40) (41 40) (41) (57) (40) (48 41 40) (40) (40) (40) (40 40) (40) (40) (41 40) (40 40 40) (42 40 40) (40) (41) (42 40 40 40) (42 40) (40) (41) (43) (40 40) (40) (40) (42 40) (41) (41) (41) (41) (43) (40) (42) (42) (41) (41 40) (41) (42 40) (41) (41) (42 41 41) (41 41 41) (41) (42) (40) (41) (43) (42) (40) (42) (41) (42) (41) (40) (44 43 42 41) (40) (41) (41) (42 42 41 41) (41) (42) (40) (41) (40) (41) (41) (41) (42 42 42 41) (40) (41) (42 41) (41) (42 41) (42) (41) (40) (44) (41 41 40) (41) (42) (41) (46 41 41) (42 42 42) (43) (41) (41) (42) (41 41) (42) (47 42 41) (41) (45) (43 42 41) (41) (40) (41) (41 41 41 40) (41 41) (42) (42) (41) (42) (45) (43 41 41) (42 41) (44) (48) (43 40) (44 42) (42) (41) (45 40) (46 40) (42) (42 42 41) (42) (43) (46) (41) (42 41) (43) (42 41) (41) (41 41) (45) (40) (42 41) (42 41) (41) (41) (43 41 41) (42) (42) (42 41) (41) (41) (41 41) (43 41) (44 43 42) (43 42) (41) (51) (43 42 40) (42) (44 42 41) (43) (44 43) (42) (43) (41) (43) (45) (46) (42) (44 43) (42) (42) (42) (45) (45) (41) (43) (41) (43 42) (45 42) (42) (46 42) (46 43 42) (41) (41) (41) (45) (46 43) (44 43) (42) (41) (41) (44 43 42) (46) (44) (42 42) (46 41) (44) (47) (41) (42) (44) (44 41) (42) (42 42) (45 43 42 41) (46) (43 42) (46 44 43) (41) (42 42) (48) (41 40 40) (41) (43 41) (41 41 40) (40) (40) (41) (41 41) (41 41) (41 40 40) (40) (41 40 40) (43) (42 41) (41) (41 40) (40) (41) (41) (40 40) (41 41 41 40) (40) (40) (40 40) (40) (40 40) (41 41) (40) (41) (40) (41 41 40) (41 40 40) (40) (40) (41 41) (41 40) (40) (40) (40 40) (41) (41) (41 40) (40 40 40) (41) (40 40) (40 40 40 40) (40) (40) (41 40) (41 41 40) (40) (40) (41) (40) (40 40) (40) (41) (40) (40) (40) (40) (40 40) (40) (40) (41) (40 40 40) (41 40) (41) (40) (40 40) (41) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40 40 40) (40 40) (40) (40) (40) (41 40) (40 40) (40 40) (40 40) (40) (40) (41 40) (40 40) (40) (40) (40) (40) (40) (40) (40 40) (40 40) (40) (40 40 40) (40) (40) (40) (40 40) (40 40 40 40) (40 40 40) (40 40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40 40 40) (40 40) (40) (40) (40) (40) (40 40 40) (40 40) (40) (40) (40) (40 40 40 40) (40) (40) (40) (40 40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40) (40 40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40 40) (40) (40) (40 40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40 40) (40 40) (40) (40) (40) (40) (40) (40 40 40) (40) (40 40) (40) (40 40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (41) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (42) (40) (40) (41) (55 43 41) (63 43 41 40) (41 40) (43 42 42 41 41 41 40) (42 42 41) (41) (41 41) (41 41 40) (42) (41) (42 41 41 41) (40) (41) (40) (41) (42) (43 41 41) (41 41 41) (42 41) (42) (41 40) (41) (41 41 41) (42) (41 41) (41) (41) (44 41) (41) (44 41) (43) (44) (42) (41) (46 42) (42) (43 43 42 42) (50 44) (41) (41) (41) (41) (42) (42 41) (41) (41) (41) (41 40) (45 41) (42) (44) (43 43) (41 41) (41) (43 41) (41) (41 41) (43 41) (42) (41) (41) (42 41) (41) (41) (40) (41 41) (47 41) (41) (41) (40) (41 41) (43) (44) (41 41) (40) (41) (40) (44 43 41 41) (41) (41) (41) (41) (41 41) (41) (41) (42 41 41 41) (42 41) (40) (41 41) (41) (40) (41 41) (41 41) (44 41) (40 40) (41) (41 41 40 40) (40) (43) (40) (40) (42 40) (41) (41 41 40 40) (42 40) (40 40) (40 40) (40 40) (44 40) (40 40) (40 40 40) (40) (40 40) (40) (41) (40 40 40) (40 40) (40) (41 40 40) (40 40 40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40 40) (40) (41) (40 40) (41 40) (40) (40) (40) (41) (40) (40) (40) (41) (40 40 40) (40) (40 40) (40 40) (40 40 40) (40 40) (40) (41) (40) (40) (40) (40 40) (41 40) (40) (40) (40 40) (40 40) (40 40) (41) (41) (40 40) (41 40) (40) (41 40) (40) (40) (40 40) (40) (40 40 40 40) (40) (40 40) (40 40) (40 40 40) (40 40 40) (40) (41 40 40 40) (40 40) (40) (40 40 40) (40 40) (41 40 40) (40) (40) (40 40) (40) (41) (40) (40) (40 40 40 40 40) (40 40 40) (40) (40) (40) (41 40) (40) (41 40 40) (40 40 40) (40) (41) (40 40) (40 40) (40 40 40) (40 40 40) (40) (40) (41 40 40) (40 40 40) (40 40) (40) (40) (40 40) (40 40) (40) (40 40) (40) (40) (40 40) (40 40 40) (40) (40 40) (40 40) (40 40 40) (40) (40) (41 40) (40) (40) (40 40 40) (40 40 40) (40) (40) (40 40 40) (40 40 40 40) (41 41) (40 40) (40) (40 40 40 40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40 40 40) (40 40) (40) (40) (40 40) (40 40 40) (40 40) (40 40 40) (40) (40) (40 40) (40) (40 40) (40) (40 40) (40) (40 40) (40) (41 40) (40) (40 40) (40) (40) (40) (40) (40 40) (40 40 40 40 40) (40 40 40) (40 40 40 40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40 40 40) (40 40) (40 40) (40) (40) (40) (40) (40 40) (40 40 40 40) (40) (40) (40) (40) (40) (40 40) (40 40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40 40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40 40) (40 40 40 40) (40 40) (40 40) (40) (40) (40) (40 40) (40) (40) (40) (40 40 40) (40) (40 40) (40 40) (40 40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40 40) (40) (40 40) (40) (40) (40 40 40) (40) (40) (40 40 40 40) (40 40) (40 40 40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40 40) (40 40) (40) (40 40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40 40) (40) (40 40) (40) (40 40) (40 40) (40) (40 40) (40) (40 40) (40 40) (40) (40) (40) (40) (40) (40 40) (40 40 40) (40 40) (40 40) (40) (40) (40) (40 40 40) (40) (40 40 40) (40 40 40 40) (40 40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40 40 40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40 40) (40) (40) (40) (40 40 40 40) (40) (40) (40) (40) (40) (40) (40 40 40) (40) (40) (40 40 40) (40) (40) (40 40) (40 40 40) (40 40 40) (40 40 40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40 40 40) (41 40 40) (40) (40 40) (40) (40) (40 40 40) (40 40 40) (40 40) (40 40) (40) (40) (40 40 40) (40) (40) (40 40) (40) (42 40 40 40) (40 40 40) (41 40 40 40 40) (40 40 40 40) (40 40 40) (40) (40 40) (40 40 40 40) (40 40 40) (40 40) (40 40) (40 40) (40 40) (40 40 40) (40 40) (40) (40 40) (41 40) (40 40) (40) (40) (40) (40 40) (41 40) (41 40 40) (40 40) (40) (40 40 40) (40) (41) (40 40) (40 40 40) (40) (40 40) (40 40 40 40) (40) (40) (42) (40 40) (40 40 40) (40) (40) (41 40 40 40 40) (40 40) (40) (41) (40 40) (40) (40) (42 40) (40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40 40 40) (40) (40) (41 40) (40) (40 40) (41 40) (40) (40) (40) (41 40) (40 40 40) (40 40) (41 40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40 40 40) (40) (40) (40) (40) (40) (40 40) (40) (40 40 40) (40) (40 40) (41) (40 40) (40 40) (40) (40 40) (40 40 40) (40) (40) (40) (40 40) (40 40) (40) (40 40) (41) (40 40 40) (40) (40) (40) (40) (40 40 40 40 40) (40 40) (40) (40 40 40 40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40 40 40) (40 40) (40 40) (40 40 40 40 40) (40 40) (40) (40 40) (40 40 40) (40 40) (40) (40) (40 40 40 40) (40) (40 40) (40 40 40 40) (40 40 40) (40) (40) (40) (40) (40 40 40) (40) (40 40) (40) (40) (40) (40 40) (40) (40 40) (40 40) (40) (40 40) (40) (40) (40 40) (40 40) (40 40) (40) (40) (40 40) (40) (40) (40 40) (40 40 40) (40) (40 40 40) (40) (40) (40 40 40) (40) (40) (40 40) (40) (40) (40) (40 40 40) (40) (40 40) (40) (40) (40 40 40 40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40 40 40) (40 40) (40 40) (40 40) (40) (40 40 40 40) (40) (40) (40) (40) (40) (40) (40) (40 40 40 40 40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40 40 40) (40) (40) (40 40 40) (40) (40) (40 40 40) (40) (40) (40) (40 40 40 40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40 40) (40) (40 40) (40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40 40) (40) (40 40) (40) (40) (40 40) (40) (40 40 40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40 40) (40) (40 40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40 40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (41 40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40 40) (46) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40 40 40) (40 40) (40) (40) (40 40 40 40 40) (40) (40) (40) (40 40) (40 40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (41 40 40) (40 40) (40) (40) (40) (49 46 45 42 42 41 41 40 40) (41 40) (43) (46 41 41 40 40 40) (42 41 40 40 40 40) (42 40) (40) (41 40) (41 40 40) (40) (41) (42 40) (40) (47 41) (40) (41 40) (41) (41 40 40) (40) (40) (41 40) (42 40) (40) (40) (41 40 40) (45 40) (40) (40 40 40) (41) (43 41 41 40) (41 41) (41) (40) (40) (41) (42) (44) (41) (40) (40) (40) (41 41) (42 41) (40) (40) (42 40) (42) (42 42 40) (41 40) (41 40) (40) (42 41) (41) (41 40 40) (41 40) (41) (41) (42) (43 41) (40) (41) (41 41 41 41) (45 41 40) (46) (40) (40) (40 40) (42 41 41 41) (41) (40) (42 41) (41 40 40) (41 41) (41) (42) (41) (40 40) (41 41) (42 40) (41) (41 41) (40 40) (41) (45 42) (41 40) (42) (42) (41) (40) (41 41) (42 41) (41 41 41 41) (41) (41) (41) (41) (42) (43 41) (42) (41) (41) (44 41 41 40) (40 40) (41) (41 41 40) (41 41 40) (41) (41) (40) (45 41 41) (40) (40) (41 41) (41) (41 41 40) (42 41) (41) (45 41) (41) (41 41 41 40) (40) (41) (41 41 40) (40) (41) (42) (42) (44 42 41 41) (42) (41) (41) (41 40) (41 40 40) (41 41 41 40 40) (40 40) (40 40) (40 40) (41) (40) (41) (40) (40) (40) (40 40) (41 41 40 40) (41 40 40) (41) (41) (41 40 40) (41 40 40) (41) (40 40) (41 40 40) (40) (42 41 40) (41 40 40) (41 41) (40) (40) (40) (40 40) (42) (41 40 40 40 40) (42 40 40 40 40) (40) (40 40 40 40) (40) (40) (41 40 40) (40) (40 40 40 40) (40) (41 40) (41 40) (40 40) (40) (40 40 40) (40) (40 40) (40 40) (40 40) (41) (40) (40) (40) (40) (40) (40 40) (40) (68 40 40) (40) (40) (40) (40) (40) (40 40) (40 40) (40) (40) (40) (45 40 40) (40 40) (40) (40 40) (40) (40) (41) (58 41) (40) (40) (40) (40) (40 40) (40) (42 41) (42 41) (42) (46) (43 41) (42 41 41 41) (42 41 41) (41) (41) (41) (41 41 41) (41) (41 41) (41) (41 40) (40) (43) (41) (41) (41) (43 42 41) (47) (42) (41 41) (41) (43 41) (41) (41 41) (44) (49 41) (43) (42) (41) (41) (44) (42) (41 41) (43) (42) (43 41) (42) (41) (42) (42) (42) (42 41) (43 42) (42) (41) (43) (44) (45) (43) (48 43) (42 42) (42) (45) (42) (42) (43) (48 42) (43 42) (42 41) (45 44 42) (47) (41) (43) (47 45) (47 44 42 42) (44 43 43) (43 42 42) (45 45 42) (43) (51) (47) (44) (48 45) (57) (43) (52 44) (44 44) (41) (46) (41) (42 41) (47 44 42) (47 43 42) (46) (45 41) (42) (41) (43 41) (41) (42) (44) (43) (44 41) (42) (42 41 41) (47 42 41) (41) (43 41) (41) (44) (41) (41 40) (43 41) (42 41 41) (41 41 41 40) (47 41 41 41) (41 41) (45 42) (41 41) (45) (40) (42 40) (45 41) (40 40) (42 41) (41) (41) (43 41 41) (45 40) (44 42 41) (41) (42) (44 42) (42 41 40 40) (41 41 41) (40) (41 41) (40) (45) (42 40) (41 41 41) (41 40) (41) (43) (44) (40 40) (40 40) (40) (41 41 40) (42 41) (42 41) (41) (41 40) (42 41) (43 41) (41 41) (41 41) (44 40) (41 40) (40 40) (41 40) (42 41) (41 41) (42 40) (41) (40) (40) (42 41) (42 40) (42) (41) (42) (46) (40) (41) (42) (41) (42 41 40) (41) (40) (41 41) (42) (41) (41) (42) (42 41) (41) (42 41) (41 41 41) (40) (41 40) (41) (40) (41 40) (40) (41) (40) (42) (42) (40) (41 41 41) (40) (42 40) (40) (40) (40) (41) (41) (41) (41) (41) (41) (42) (40) (40 40 40) (41 40 40 40) (41 41 40 40 40) (40) (41) (41 41) (41) (40) (40) (40) (41) (40) (40 40) (40) (40) (41 40 40) (41) (40 40) (40 40) (40) (40) (40 40) (40) (40) (40 40 40) (41 40) (41 40) (40) (40 40) (43 40 40) (40) (41) (40) (40 40 40) (40 40 40 40) (40) (41) (40) (40 40 40) (40 40 40 40) (41 40) (40) (40) (40) (40) (40) (40 40) (40 40) (40 40) (40) (40) (40) (41 40 40 40 40) (40 40 40 40) (40) (40) (40) (40 40) (48 40) (40 40) (40 40 40) (40) (40) (40) (40 40) (40 40) (40 40 40) (40 40) (40) (40) (40) (41 40) (40) (40) (42) (40 40 40) (47 44 42 41 41 41) (45 42 41 41) (47 43 43 41) (42 41) (42 42 42 41 41) (41) (40) (43) (40) (41) (49) (42) (43) (43 41) (42) (40) (41 40) (42) (56) (42 41) (42 41) (41 41) (44 42 41) (41) (41) (41 41) (41 41) (41) (48 41 41 41 40) (43 41) (46) (45 41) (41) (41 41) (42 41 41 41) (42) (41 41) (41) (41) (43 42) (49 43 43) (41 41) (41 41 40) (42 41) (42) (43) (42 41) (41) (42) (49 41) (42) (43) (41) (42 41) (42 41) (41) (41 41 40) (46 42 41 41) (45 44 41) (49 41) (41) (58 41) (40) (43) (41) (48 41) (41) (41) (41) (47 41) (43 42 42) (40) (41) (41) (41 41 41) (41) (42) (41) (40) (46 41) (43) (41) (41) (43 41) (41) (41 41) (42) (42) (40) (40) (41 41) (41) (41 41) (44 41 40 40) (41) (46 41 40) (40) (41) (41 41) (41 41 40 40) (43) (41 41) (40) (40) (40) (42) (44 40 40) (42) (42 40) (41 40) (42) (41 41) (41) (41 41) (46 41 41 41 40 40 40) (41) (44 41) (44) (40) (41 40 40 40) (44 40) (40 40 40) (40) (40 40) (40) (40 40) (43 40) (40) (41 40) (40) (41 40 40) (40) (48 40 40) (40) (40) (41 41) (41) (40) (40) (41) (40) (40) (42) (40) (40 40 40) (42 40) (42 40) (40 40 40) (40) (41 40 40) (41 41 40 40) (40) (40 40) (40) (40 40) (40) (40) (41) (40) (41) (40 40) (40) (40) (41) (40) (40) (40) (40) (41 41) (40) (41 40) (40) (40 40 40) (41) (40) (40) (40) (50) (40 40) (40) (40 40) (41 40 40 40) (40) (40) (41 40 40) (41) (40 40) (40 40 40) (40) (40) (40) (51) (40 40) (44 41 40) (47) (40 40 40) (41) (40) (40) (40) (50) (41) (42 41) (41 41) (42 41) (43 42 41 41 41) (41) (42) (41) (41) (41 41 40) (42) (41) (41) (41) (42 41) (41 40) (40) (43 41) (41) (44 42) (41) (41) (41) (41) (42) (41) (42 41) (42) (41) (42 42 41) (41) (43 42 41) (41) (46 42) (42 41) (41) (42 41) (43 42) (50 42) (42) (41) (44 41) (45) (47 41) (41) (44 41) (44 41) (41) (45 41) (41) (43) (42) (42) (48) (43 42) (41) (42 42 41) (43) (45) (42) (43) (42 42 41) (43 42) (43) (45) (42) (44) (45 42) (46 41) (41) (45 42 42) (45) (46) (43 42 42) (41 41) (41) (44 42) (45 44) (42) (46) (43 42) (43) (43) (44) (45 45 43) (45 42) (42) (42) (44 43) (44 43) (43 42) (44) (46 42) (42) (44 42) (42) (47 43 43) (42) (42) (44 44 43 42) (47 42 41) (47) (44 42) (42) (47) (47 44) (46 43) (43 42) (45) (50 43) (49 46 44) (47) (48 47 43 43) (43) (42) (45) (42) (46 46) (45 44 42) (42) (45 44) (45 42) (49 43) (44 43) (48 44) (43 42) (46) (42) (44 43) (41) (56 46 43) (44 42 42) (50 48) (44) (47) (49 45 42) (49 41) (43) (42) (51 42) (43 41) (43 41) (42) (46 43 41) (45 42) (44 44 44) (42) (42 42) (46 42 41) (44) (41) (45 43) (41 41) (43 41) (44) (42) (42 41) (41) (42 42 41) (41) (41) (40) (43) (41) (42 41 40) (46 41) (46 41) (41) (43) (44 40) (41 41) (41) (42 41) (41) (43 43 41) (40) (41) (44) (44) (41) (41) (43 40) (42 40) (41 40) (45 42 41 41 40) (42) (42) (42) (41 40) (40) (42 41) (46 41) (42) (42 41) (43 41 40) (43) (41) (40) (40) (42) (41) (43 40 40) (41 41 40) (43 41) (42 41 40 40) (41 41) (40) (41) (42 41 40 40) (41) (41 40) (41) (41 40) (41 41) (40 40) (42 41 41) (41) (40 40) (40) (40) (42) (41) (41 40) (41 41 41 41) (40) (42) (41 40) (42) (40) (40) (40 40) (41 40) (42 40) (41 40) (40) (41 41) (44) (40) (41) (41) (40 40) (42 40) (41) (40) (40) (40) (41 41 40) (40) (41) (40 40) (41) (41) (41 41) (40) (40) (40) (41) (40) (41 40) (40 40) (41 40) (40) (41) (40) (40) (40) (40) (40 40 40) (40) (41 41) (40) (40) (40) (40 40) (41) (40) (40) (41 40 40) (41 40) (41) (40 40 40) (41) (40) (40) (40) (40) (41 40) (40) (41) (40) (40 40) (40) (40) (41) (41 40) (41) (40) (40 40) (40) (40) (41 40 40) (40) (40 40) (40) (40 40 40 40) (40 40) (40) (40 40 40) (40) (40) (40 40) (41) (40 40) (40) (40 40 40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40 40 40) (40 40) (40) (40) (40 40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (41 40 40) (40) (40) (40) (40 40) (40) (40 40) (40 40 40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (52) (40) (40 40 40) (40 40) (40 40 40) (40 40 40 40) (40) (40) (40) (41) (40 40) (40 40 40) (40) (40) (40) (40 40 40) (40) (40) (40) (40) (40 40) (40) (40 40) (40 40) (40) (40 40 40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40 40 40) (40) (40 40) (40 40 40) (47 40 40) (40 40) (40) (40) (40) (40 40) (40) (40 40) (40) (40 40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40 40) (40) (40 40) (40) (40) (40) (40 40) (40 40) (40) (40) (40) (40 40) (40 40) (40 40 40) (40 40) (40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40 40) (40) (40) (40 40 40) (40 40) (40) (40 40) (40 40 40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40 40) (40 40) (40) (40) (40) (40) (40 40) (40 40) (40) (40) (40) (40) (40 40 40 40) (40 40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (41) (40 40 40) (40 40 40 40) (40 40 40) (40) (40) (40 40 40) (41 40) (40 40) (40) (40 40) (40) (40) (40) (40 40 40 40 40) (41) (40) (40 40 40) (40) (40 40) (40 40) (40) (40 40 40) (40) (40) (40) (40) (40 40) (40 40) (40) (40) (40 40 40) (40) (40) (40 40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40 40) (40) (41) (40 40 40) (40) (40 40 40) (40) (40 40) (40) (40) (40 40 40) (40 40) (40) (53 40 40 40) (52) (40 40) (40 40 40) (40) (40) (40) (40) (40 40 40) (40) (40 40 40) (40) (40) (40 40 40 40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40 40) (40 40 40) (40) (40 40) (40 40 40) (40 40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (41 40 40 40) (48 40) (48 42 40 40) (40 40) (40) (40) (40) (40 40) (47) (40) (44 41 41 40) (45) (41 41) (45 41 41) (40) (41 41) (41) (41 41) (46 42) (41) (41) (59 41) (41) (41 41) (41) (41 41) (41 40) (41 41 41 40) (41) (43 41 40) (40) (41) (40) (41) (41) (40) (41) (41) (41) (41) (42 41 41) (41 41) (40) (42 41) (41) (48) (41) (40 40 40) (41 41) (41 41 40) (40) (40) (42 41) (41 41) (41 41 41) (40) (44 42 40) (41) (48) (40) (43) (42) (41) (41) (45) (41) (42) (41 41) (41 41) (41) (41 41) (43) (40) (41) (41) (41) (41) (41 40) (42) (41 41) (41) (40) (42) (46) (42 41) (41 41) (41) (41 41 40) (41) (43) (41) (40) (41) (42) (40) (41) (41) (40) (42) (45) (41) (44) (40 40) (40) (41) (41) (41) (41) (42 41 41 41) (41) (41 41 40) (40 40) (42) (41) (43 40) (42) (41) (41) (41) (41) (40) (41) (40) (44) (42) (40) (42 42 42 41) (41) (43 42 41) (41) (41 41) (41) (42 41) (41) (42) (41) (42) (42) (41) (41 41 41) (43 43) (41 40) (42 41) (43) (45) (40) (41) (41) (42 41 41) (41) (42) (40) (41 40) (41 40) (42) (41 41 41 40) (42) (42) (41) (41 41) (41) (41) (44) (41) (42 40) (41) (46 43 41) (44 41) (41) (42 42) (42) (41 41) (45) (41) (45 41) (52) (45 42 42 42) (42) (42) (42) (42 41 41) (41) (42 41) (46 41) (41 41 41) (42) (41) (41) (43) (42 41) (41 41) (40) (41) (40) (45 40) (43 41) (41) (41 40) (41 41) (41) (41) (41) (41) (42) (41) (40) (41 41 41) (42) (42 40 40) (42 42 41 40 40 40) (41) (41) (40) (41) (44 41 41) (45) (42) (40) (40) (43) (41 40 40) (40 40 40) (43) (40) (41 40) (42 41 40) (41 40) (41 40) (41 40) (40) (41) (40 40) (40 40) (40) (40) (40 40) (40) (41) (41) (41) (41) (40) (41 41) (40) (40) (40 40) (40) (40) (42) (40) (40 40) (42 40) (41 40) (41 40) (43) (40) (41 40) (40 40) (40) (40 40) (40) (40 40) (40) (40 40 40) (40 40) (41 40 40) (40) (40 40) (41 40) (40 40) (42 40 40 40) (40 40) (40) (41) (40) (40 40 40) (41) (41) (40) (41) (40) (40 40) (40) (40 40) (40 40) (41 40) (40) (40) (41 40) (40) (40) (40) (40) (42 41) (40 40) (40 40) (40) (40) (40 40) (40) (40) (41) (40 40) (40 40 40) (40) (40 40) (40 40) (42) (40 40) (40) (41) (40 40) (40 40) (40 40) (40 40) (40) (40 40) (40) (40) (40) (40 40) (40 40) (40 40) (40) (40 40 40) (40) (41) (40) (40) (40 40) (44 40) (41 40) (40 40) (40 40) (45 40) (40 40) (40 40 40 40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40 40 40 40) (40) (40 40) (40 40) (40) (40 40) (40 40 40 40) (40 40) (40) (40 40) (41) (41 40 40) (41 40) (59 40) (40) (40 40 40) (40) (42 40) (41) (41 41 40) (40 40) (41) (42 41 40 40) (40) (40) (52 41) (41) (40) (40) (41) (41 41 40) (40 40) (47 43 41) (41) (43 40) (41) (40) (42 41) (41 40) (41) (43) (42) (41) (45 41 41) (42 40) (43 40) (40) (49) (51) (41) (44) (41 40) (41) (42) (42 40) (41) (41) (41) (41 41 40) (44 41) (41) (42 41) (43) (46 42) (41) (42 41) (46 40) (41) (43 41) (41 40) (42 41) (42 42) (42) (40) (42 40) (49) (41) (60 42 40) (45 41 40) (42 40) (40) (40) (50 42 41 41 40) (41) (44) (47) (40) (44 41) (43) (40) (42 42) (41) (42 41) (41 41) (41 40) (75) (45 40) (42) (42 42) (41) (40) (42 42 41) (42) (45) (41) (40) (41) (41) (41) (42) (42 41) (43) (43) (43 41) (47 41) (41) (44) (41 41 40) (41) (42) (41 41) (41) (52 43) (42) (41) (44 41 40) (41 41) (42 41) (41 40) (41 40) (46 42) (41 40) (52 51 41) (41) (41) (42) (46 42) (41) (47) (43) (40) (43 42) (42 41) (46 40) (42) (45 41) (42 40) (41) (41) (41 41) (41) (45) (41) (42 41) (41) (41) (41) (41) (44) (41) (42 41) (41) (45) (46 41) (42 42) (42) (43 41) (42 41 41 41) (43) (46 41) (42 41) (41) (42) (51 46 45 41) (40) (45) (42 40) (42 42 42 41) (44) (45 43) (43 41) (41) (46 44 41) (41) (44 41) (48 42 41) (41) (42) (49) (44) (43 41) (42 42) (48) (43) (43) (44 40) (41) (46) (44 42) (49 46) (41) (45) (40) (49 48 43) (43) (41) (44 41) (42) (44) (41) (50) (42) (47) (44) (46 41) (59 53) (55) (43) (45 42) (46) (57 43 42) (43) (57) (42) (43) (52 40) (43) (43) (43 42 42) (42) (47 45 44) (43) (45 43) (47) (45) (43 43) (41) (42) (42) (44 43) (41) (51 43) (53 42) (41 41) (45) (44 42 42) (43) (43 42) (49) (44 42) (43 41) (41) (43) (84 43 43 41) (41) (43 41) (44) (43) (44 41 41 41) (44) (41) (41 41) (41) (41) (41) (46 42 41) (43 43) (42 41 41) (42 40) (42) (42 41 41) (41) (43 42) (43) (41) (42 42 41) (41) (41) (44) (41) (42) (43 43) (41) (41) (43 42) (44 42) (45 43) (42 41 41 41) (42) (40) (42) (44) (42 42) (42 41) (42) (45 43) (44 42) (42 41 41) (41) (44) (43 41 41 40) (41) (41) (42) (41) (43) (41) (42) (45 41) (42) (44 41 41) (41) (43) (41) (41) (41) (43 42) (44 42 41) (48 41) (43 42) (46) (41) (46) (45 41) (41) (41 41) (41) (41) (42) (41 41) (45 42 41) (49 41) (43) (42) (42) (42) (42 41) (46) (45 44) (42) (41) (46) (41) (42) (43) (45 41) (42 42 41) (46) (45) (45 43 41) (47 41) (42) (45 41) (41) (44) (41) (45) (42) (42) (44) (42) (44) (43) (41) (44) (45) (42 42) (42) (41) (43) (44) (41 41) (43) (52) (45) (45 42) (41) (41 41) (46 46) (45 44) (43 43) (48 41) (46) (44 43 43 43 42) (46) (45 45) (55 45) (42) (41) (44) (44) (43 41 41) (44) (44) (47 46 44) (45 43) (42) (44 41) (44) (43) (55) (43) (63 44) (42) (48 47 42) (43) (45) (47) (44) (45 43) (81 44) (48) (50) (48 44) (44) (44) (46 43) (45) (46 43) (43 42) (46 45 45 44) (44) (43) (46) (49) (46 44) (52 50) (43) (46 46 45) (46 42) (44) (45) (45) (49 47) (46) (46) (56) (47) (50 46) (49 47 46) (53 44) (50) (43) (47 44 42) (48) (46) (43 43 42) (43 41) (42 41) (42 42) (43 41 41) (53 43 41) (42) (42 41 41) (41) (44 42 42 41) (47 41 41) (43 42 41) (43 41 41) (42) (42) (41) (42) (48 43) (41 41) (42 41 40) (42 41) (42) (41) (40) (41) (43 41) (43 41) (43 42 42 41) (42 41 41 41 41) (42) (42 41) (42) (46 41) (42) (42 40) (41) (40) (48 43 41) (41) (42 41 41) (42 41) (41) (40) (43) (41) (41) (41) (41) (41) (43) (41) (41 41) (41 41) (41) (44) (42 41 41 40) (44 42) (44 41) (43 42) (41 41 41) (41) (43) (41) (43 41 40) (41 41) (41 41 40) (41) (40) (42 41) (41 40) (44 40) (41) (41 41) (42) (41) (40) (41) (41) (41 41 41 40) (42 41) (41) (41 41 40) (41) (41 41) (41 40) (41 41 41 41) (41) (41) (43 41 40) (41 40) (40) (42 41) (41 40) (41 41 41) (41) (42) (46 41 41) (41 41) (41) (43 41 40 40) (41 41) (41 41) (41) (41 41 41) (40) (41) (43) (41) (41) (41 41 40) (40) (41 40) (43) (40) (41) (41) (41) (42 41 40 40) (41 41) (41) (41) (40) (41 41 41 40) (40) (41) (41) (41) (41) (43 40) (43 41 41 41) (41 41) (41 41) (41) (42) (41 40) (41) (41 41) (41) (41 41) (42) (40) (41 41) (41 40) (41) (40) (41) (41) (40) (41) (40) (42) (41) (41 41) (41) (40 40) (40 40) (44) (40) (41) (42) (41 40) (41) (41 40) (42) (43 42 41) (43 41 41) (41 41 41) (41) (45) (41) (41) (41 41 41 40) (41) (44 40) (41 41) (44) (46) (43 41) (41) (41) (45 41 41) (41) (40) (44) (44 40 40) (41) (42) (41 40) (43) (40) (41) (41) (43) (41) (41) (41) (41 40) (42 42) (44 41) (44) (41) (45 41 40) (41 40) (40 40) (43) (41) (41 41 40) (42 40) (40) (41) (43 41) (41) (41) (40) (41 41 40) (41 41) (41 40) (40) (41 40) (40 40) (41 40) (43) (40) (42) (41) (41) (41 41) (40) (42 41) (40) (41 40) (40) (40) (42) (42 42) (41 40) (41) (40) (41 41) (42) (41) (44 44) (40 40) (41 41 41) (40) (41) (40) (40 40) (41 41) (40) (41 40 40) (41) (40) (40) (43 42 40) (40) (41 41 41) (41 40 40) (41 40) (41 41 41) (41) (40) (41 40) (41) (40) (41 40) (41 40) (40) (41) (40) (41) (42 41) (40) (41) (43) (41 41) (41 41 41) (41) (40) (40) (41 41) (41 41) (40 40) (41 40) (41) (40 40) (40) (40) (41) (42 40) (40) (41 40 40) (41) (40) (42) (40) (41 40) (40) (41) (41) (40 40) (40) (41) (40 40) (40) (40) (41) (41 40) (40) (40 40 40 40 40) (40) (40) (41 40) (40) (40) (40) (40) (40) (40) (40) (40 40 40 40) (40) (40) (40) (40) (40) (40 40 40) (40) (40) (40 40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40 40) (40) (40) (40 40) (40 40) (41) (40 40) (40) (40) (40) (41 40) (40) (40 40 40) (40) (40) (40) (40 40) (40 40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40 40 40) (40 40 40) (40 40) (40 40 40) (40) (40 40) (40) (40 40) (40) (40 40) (40) (40) (40) (40 40) (40 40) (40) (40) (40 40) (40 40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40 40) (40 40) (40 40 40) (40 40) (40) (40 40) (40 40 40) (40) (40) (40 40) (40 40) (40) (40 40) (40 40 40 40 40 40) (40) (40 40) (40 40) (40 40) (40) (40) (40 40) (40) (40) (40) (40 40) (40 40 40) (40 40) (40) (40 40) (40 40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40 40) (40) (40 40) (40) (40 40) (40 40) (40) (40) (40 40 40) (40) (40 40) (40 40) (40 40) (40 40) (40 40) (40) (40) (40) (40) (40 40 40) (40) (40 40) (40) (40 40 40) (40 40 40) (40) (40) (40 40) (40 40) (40) (40) (40) (40) (40 40 40 40) (40 40 40) (40) (40) (40 40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40 40 40) (40) (40) (40 40) (40) (40 40) (40 40) (40) (40) (40) (40) (40 40 40) (40) (40) (40) (40) (40) (40) (40 40 40) (40 40) (40) (40 40) (40) (40) (40 40 40 40) (40 40 40) (40) (40 40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40 40 40) (40 40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40 40 40) (40) (40) (40) (40 40) (40) (40) (40 40) (40 40 40) (40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40 40 40) (40) (40) (40 40) (40) (40) (40 40) (40) (40 40 40) (40 40 40) (40) (40 40 40) (40) (40) (40 40 40) (40 40) (40 40) (40 40) (40) (40 40) (40) (40 40 40 40) (40 40) (40) (40 40 40) (40) (40) (40 40) (40 40 40 40) (40) (40 40) (40 40) (40) (40) (40 40) (40 40) (40) (40) (40) (40) (40 40 40) (40) (40 40) (40) (40 40) (40) (40) (40 40) (40) (40 40) (40) (40 40) (40 40) (40) (40 40) (40) (40) (40 40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40 40 40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (49 40) (40 40) (40) (40 40) (40) (40 40) (41) (40) (40) (48) (40 40 40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40 40) (40 40 40) (40) (40) (40) (41 41) (40 40) (40) (76) (66 55 52 44 41 40) (43 42 41 41 40) (42) (41 41 41 40 40) (40 40) (63) (41) (41) (40) (44) (41) (42) (42 41 41 41) (41 41) (44) (41) (40) (42) (41) (41) (42 40) (41 40) (40) (42) (41) (41 41 40) (41) (42) (41) (79) (41) (40) (42) (40) (50 42 41) (42 40) (43) (40) (43) (41) (41 40) (43) (41 41) (43 42 40) (40) (44) (41) (58) (43) (41) (42) (41) (42) (41) (50) (47) (44) (54) (41) (47) (44 41) (45) (41) (41) (55 51 41) (41) (41) (46) (43 40) (57) (42) (42) (42) (42) (42) (41) (41) (43) (41) (42) (41) (43) (62 50 41) (42) (45) (54 41) (42) (42 41) (59 41 41) (40) (43 42 41) (43) (47) (43) (43) (41) (45) (50 40) (47) (41) (40) (45 43 43 42 41) (41) (41 41) (46 42) (45 43 41) (40) (43) (44 40) (41) (41) (42) (49 42) (45 41) (40) (45 42) (41) (41) (43) (41 41) (43) (42 40) (43 42 41) (42) (45) (42) (42) (42) (44) (44) (43 42) (76) (43 41) (45) (43 41) (42 41) (54) (43) (41) (40) (41) (44) (42) (42 41) (48 42 41) (42) (52 42) (43) (42 41) (43) (61) (48) (45 42) (42 42 42) (61) (42 41) (41) (44) (44) (46 44) (61 41) (66) (45 44) (43) (43) (42 41) (65 41) (42) (47 44) (44) (42 42) (41) (46) (44) (40) (41) (48 41) (52 42) (61) (45) (43 41 41) (43 42) (41) (52 42) (46) (41) (41 41) (41) (42 42) (43) (42 42) (43 43 41) (55) (42) (55) (42) (44) (65) (43) (50) (42 42) (40) (42) (45 42) (74) (43) (42 41) (41 41) (42) (41) (41) (43) (47 40) (72 42) (42) (41 41 41) (42) (40) (50 46) (42 40) (41) (41) (41) (42 41) (41) (41) (51) (41) (45) (77 41) (41) (42 41 40) (41) (42) (41) (41) (41) (40) (41) (41) (43) (44) (47 41) (41) (43) (41) (41) (43 41) (44) (42) (41) (55) (41) (41 41 41) (42) (42) (41) (45 41) (46) (74) (43) (41) (41) (41) (44) (41) (41) (44 41) (42) (61) (40) (42) (56) (43) (42) (41) (42) (42 41) (43) (41) (41) (43) (42) (42) (46 41) (41) (41) (41) (43) (41) (42 42) (46 44) (45) (40) (43) (45 43) (41) (49) (42 41) (41) (41) (41) (44) (47) (43) (45) (46) (42) (44) (41) (42) (45) (41) (41) (42) (41) (41) (41) (44) (40) (41) (42) (41) (48) (47) (41) (47) (42 40) (42) (43) (41) (41) (42 42) (43) (44) (48 43) (44) (55) (41) (41) (42) (51 42) (42) (44) (41) (45) (43) (44) (43 41) (42) (57 43) (59 41) (41) (42) (46) (42) (46) (40) (41) (43) (47 41 41 41) (41) (41) (42) (46) (41) (43) (42) (41) (42) (45 41) (64) (42 41) (45) (42) (41) (41) (41) (41) (42 42) (42) (43) (42) (41) (41) (46) (43 41 41) (42) (43 41) (41) (41 40) (42) (56 41 41) (41 41) (43) (41) (41) (41 41) (41) (42 41) (41) (42 40) (42 41) (42) (41) (41 41) (42) (42 41) (42 41 41) (40) (61 41 40) (47) (41 41) (42 41) (40) (40) (53 45 41 40) (42 41) (40) (41) (42) (41) (42) (40) (42 41) (40 40) (41) (41) (41) (42 41) (42) (41) (42 40) (41) (49 41 41) (41) (43 41) (41 41) (41) (52) (41) (43) (41) (73) (42) (41) (40) (41 41 40) (42 41 40) (41 41) (52 43) (41 40) (41 41) (41 40) (42 41) (53 41 41) (41 41) (41) (40) (42 41 41) (40) (41) (41) (41) (41) (41 41) (40) (41) (59 46) (40) (43) (41) (44) (42 41) (48 41) (40) (41 41) (41) (41) (40) (41) (42) (52) (41 41) (41) (41) (41 41) (40) (42) (45) (40) (41) (41) (41 40) (40) (79 42 41) (41) (40 40) (56) (40) (41 41) (41) (42) (40) (61 47 41 40) (41) (40) (42 41 41 41 40 40) (51 41 41) (41) (41) (65 41 40 40) (41) (41) (41) (41) (41) (45) (41 40) (42 41) (41) (40) (40) (41) (41) (41) (41) (41) (41 41) (43 41) (41) (40) (41) (41) (41) (41) (41) (42 41) (41) (43) (41 40) (42 41) (41) (41) (41 41) (40 40) (40) (40 40) (41) (60 41) (41) (42 41) (41 40) (41) (41) (73 41) (41 40) (41) (41 41) (43 42) (58 42) (41) (52 41 40) (41) (40) (42) (41) (41) (42 41) (41) (42 40) (41) (41) (40 40 40) (41 41) (41) (41) (41) (55 42) (42) (41) (40) (46 40) (41 41 40 40) (41) (45 41) (40) (40) (44) (41) (40) (40) (42 41) (41) (40) (43 41) (42) (41) (41 41) (41) (40) (41) (41) (44) (41 41 41) (41) (42 41) (47) (57 42 41 41) (40) (40) (41 41) (53 41) (40) (41) (63) (41) (41) (40) (42) (41 40) (41 40) (40) (41) (41) (40 40) (40) (41) (41) (40 40) (41) (41) (40) (42 40) (41) (40) (41) (50) (41 41 40) (41) (57 41) (41) (41) (42) (40) (41) (42 40) (40) (40) (42) (41) (41 41 40) (40) (40 40) (49) (41 40) (40) (40) (41 40) (41) (40 40 40) (40) (40) (40) (40) (41 40 40) (40) (40) (50 40) (41 40) (40) (48) (49) (40) (40) (40) (41 40) (40) (40) (40) (41) (41 40) (41) (40) (42 40) (40 40) (50 40) (41 40) (40) (50 40) (40 40) (41 41 40 40 40) (40) (40) (40) (41 40) (44) (41 40) (40 40) (41) (40) (47 40) (42) (40 40) (40 40) (40) (40) (40) (41) (52) (40) (48) (40) (40 40) (45 41 41 41 40) (40) (40 40) (40) (40) (40) (40) (47 41 40) (40 40) (48 40) (40) (40 40) (41) (40 40 40) (40 40) (40 40 40 40 40) (40) (40) (42) (40) (40 40) (40) (40 40) (40) (40) (40 40) (40) (40 40) (43 40 40) (40) (40 40) (40) (40) (40) (40) (40 40) (40 40) (40) (40) (40) (40) (40) (40 40) (40 40) (40 40 40 40) (42 40) (40 40 40) (40) (40) (40 40) (40 40) (40 40) (40 40) (40) (40) (40) (40) (40 40) (42) (40) (40 40) (40 40 40 40) (40) (40 40) (42 40 40) (40) (40) (40) (40) (40 40) (40) (40 40 40) (40 40 40 40) (42) (40) (40 40) (40 40 40) (40) (40 40 40) (40 40) (40) (40 40 40) (40 40) (40) (40 40) (40) (40 40 40) (40) (41) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40 40) (40 40) (40 40) (42) (40) (40 40) (40) (40 40) (40) (40 40) (40) (41 40) (40) (40) (40) (40 40) (41 40 40 40) (40 40) (40 40) (40 40 40 40) (40) (40) (40 40 40) (41) (40) (40) (40 40) (40) (40) (40) (41) (40) (40) (40) (40 40 40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40 40 40) (40) (41) (40 40) (40) (40) (40) (40 40 40) (40) (41 40) (40) (40) (40 40 40) (40 40) (40 40 40) (40) (40) (40 40) (41 40) (40) (40) (40) (40 40 40) (40 40) (40) (40) (40) (40) (40 40 40 40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40 40) (40 40) (40 40) (40) (40) (40) (40) (40) (40 40 40) (40 40 40 40) (40 40 40 40) (40 40) (40) (40) (40) (40 40 40) (40) (40 40 40) (40) (40 40) (40) (40) (40) (40 40) (40 40 40) (40) (40) (40) (40) (40 40) (40) (40 40 40 40) (40) (40) (40 40) (40 40 40) (40 40 40) (40 40 40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40 40) (40 40) (40) (40) (40 40) (40) (40 40 40) (40) (40) (40 40 40) (40 40 40) (40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40 40 40 40 40) (40) (40 40) (40 40 40) (40) (40 40) (40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40 40) (40 40) (40) (40) (40) (40 40 40 40 40) (40) (40) (40) (40) (40) (40 40 40 40) (40 40) (40 40 40) (40 40) (40) (40) (40) (40 40) (40 40 40 40) (40) (40) (40 40) (40) (40) (40) (40 40) (40 40) (40) (40 40) (40) (40) (40) (40) (40 40) (40 40 40) (40) (40 40) (40) (40) (40) (40 40 40) (40) (40) (40 40) (40 40) (40) (40 40) (40 40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40 40) (40) (40 40) (40) (40) (40 40) (40) (40) (40 40 40) (40 40) (40) (40) (40) (40) (40) (40 40 40) (40) (40) (40) (40 40 40 40 40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40 40 40) (40) (40 40 40 40) (40 40 40 40) (40) (40) (40) (40 40) (40 40) (40) (40) (40) (40) (40 40 40 40) (40) (40 40 40) (40) (40) (40) (40) (40) (40 40 40) (40 40 40 40) (40) (40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40 40) (40 40 40) (40) (40) (40) (40 40) (40) (40 40) (40 40 40) (40) (40) (40) (40 40 40 40) (40) (40 40) (40) (40) (40 40) (40 40) (40) (40) (40) (40) (40) (40 40) (40 40) (40 40) (40) (40) (40) (40) (40 40) (40 40 40 40) (40 40) (40) (40) (40) (40 40 40 40) (40) (40 40) (40 40) (40 40) (40) (40) (40 40 40) (40 40 40) (40 40) (40 40) (40) (40 40) (40 40) (40 40 40) (40) (40) (40) (40) (40 40 40) (40) (40 40) (40 40) (40 40 40 40) (40) (40 40) (40) (40 40 40) (40) (40 40) (40 40) (40 40) (40) (40) (40 40 40) (40 40 40) (40 40 40 40) (40 40 40) (40) (40) (40) (40) (40) (40) (40 40 40 40) (40 40) (40) (40 40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40 40) (40 40) (40) (40) (40 40) (40 40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40) (40 40 40) (40) (40) (40) (40) (40) (40) (40) (40 40 40) (40) (40) (40) (40) (40) (40) (40 40) (40) (40 40))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 115 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "electronic doppler mix.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 91 116) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "electronic doppler mix" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (player)) (list (quote :spat-sdif-player))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARTIAL-TRACKING" (quote partial-tracking) (quote ((om-load-inputfun (quote input-funbox) "" "SOUND" nil) (om-load-inputkeyword (quote input-keyword) "" "begin-t" (quote :begin-t) nil nil) (om-load-inputkeyword (quote input-keyword) "" "end-t" (quote :end-t) nil nil) (om-load-inputkeyword (quote input-keyword) "" "max-partials" (quote :max-partials) 12 nil) (om-load-inputkeyword (quote input-keyword) "" "amp-treshold" (quote :amp-treshold) -40 nil) (om-load-inputkeyword (quote input-keyword) "" "analysis-type" (quote :analysis-type) "inharmonic" (list (list "Harmonic" "harmonic") (list "Inharmonic" "inharmonic"))) (om-load-inputkeyword (quote input-keyword) "" "analysis-params" (quote :analysis-params) (list 20 0.0 50 1 3 0.017 50 0.009) nil) (om-load-inputkeyword (quote input-keyword) "" "windowsize" (quote :windowsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "fftsize" (quote :fftsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "step" (quote :step) 256 nil) (om-load-inputkeyword (quote input-keyword) "" "windowtype" (quote :windowtype) "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputkeyword (quote input-keyword) "" "smoothing-enveloppe" (quote :smoothing-enveloppe) (list 0.0 0.0) nil) (om-load-inputkeyword (quote input-keyword) "" "out" (quote :out) "partials.sdif" nil))) (om-make-point 63 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "electronic doppler mix.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 54 0) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "electronic doppler mix" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "electronic doppler mix.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (3 0 0 1 nil 0) (5 0 1 0 nil 0) (48 0 2 0 nil 0) (48 0 3 0 nil 0) (48 0 4 0 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0) (49 0 5 2 nil 0) (102 0 6 0 nil 0) (10 0 6 1 nil 0) (101 0 6 2 nil 0) (9 0 6 3 nil 0) (17 0 6 4 nil 0) (8 0 6 5 nil 0) (6 0 7 1 nil 0) (14 0 8 1 nil 0) (13 0 8 2 nil 0) (15 0 9 1 nil 0) (11 0 9 2 nil 0) (16 0 10 1 nil 0) (12 0 10 2 nil 0) (100 0 11 0 nil 0) (103 0 12 0 nil 0) (18 0 13 0 nil 0) (45 0 14 0 nil 0) (95 0 15 0 nil 0) (108 0 16 0 nil 0) (45 0 17 1 nil 0) (18 0 17 2 nil 0) (20 0 18 0 nil 0) (173 1 20 0 nil 0) (19 0 20 1 nil 0) (24 0 26 0 nil 0) (25 0 26 1 nil 0) (32 0 27 0 nil 0) (22 0 27 1 nil 0) (32 0 29 0 nil 0) (23 0 29 1 nil 0) (32 0 30 0 nil 0) (23 0 30 1 nil 0) (32 0 31 0 nil 0) (22 0 31 1 nil 0) (26 0 32 0 nil 0) (28 0 32 1 nil 0) (55 0 33 0 nil 0) (21 0 33 1 nil 0) (31 0 34 0 nil 0) (38 0 34 1 nil 0) (30 0 35 0 nil 0) (38 0 35 1 nil 0) (29 0 36 0 nil 0) (38 0 36 1 nil 0) (27 0 37 0 nil 0) (38 0 37 1 nil 0) (36 0 39 0 nil 0) (34 0 40 0 nil 0) (37 0 41 0 nil 0) (35 0 42 0 nil 0) (41 0 43 0 nil 0) (40 0 43 1 nil 0) (39 0 43 2 nil 0) (42 0 43 3 nil 0) (43 0 44 0 nil 0) (44 0 45 0 nil 0) (33 0 45 1 nil 0) (54 0 48 0 nil 0) (50 0 52 0 nil 0) (51 0 52 1 nil 0) (70 0 53 0 nil 0) (67 0 53 1 nil 0) (0 0 55 0 nil 0) (1 0 55 1 nil 0) (150 0 57 0 nil 0) (149 0 58 0 nil 0) (148 0 59 0 nil 0) (147 0 60 0 nil 0) (57 0 61 1 nil 0) (58 0 62 1 nil 0) (59 0 63 1 nil 0) (60 0 64 1 nil 0) (70 0 65 0 nil 0) (68 0 65 1 nil 0) (70 0 66 0 nil 0) (68 0 66 1 nil 0) (70 0 69 0 nil 0) (67 0 69 1 nil 0) (52 0 70 0 nil 0) (56 0 70 1 nil 0) (55 0 71 0 nil 0) (46 0 71 1 nil 0) (69 0 72 0 nil 0) (76 0 72 1 nil 0) (66 0 73 0 nil 0) (76 0 73 1 nil 0) (65 0 74 0 nil 0) (76 0 74 1 nil 0) (53 0 75 0 nil 0) (76 0 75 1 nil 0) (61 1 77 0 nil 0) (78 0 77 1 nil 0) (77 0 79 0 nil 0) (74 0 80 0 nil 0) (72 0 81 0 nil 0) (75 0 82 0 nil 0) (62 1 83 0 nil 0) (85 0 83 1 nil 0) (83 0 84 0 nil 0) (63 1 86 0 nil 0) (88 0 86 1 nil 0) (86 0 87 0 nil 0) (64 1 89 0 nil 0) (91 0 89 1 nil 0) (89 0 90 0 nil 0) (73 0 92 0 nil 0) (82 0 93 0 nil 0) (81 0 93 1 nil 0) (80 0 93 2 nil 0) (92 0 93 3 nil 0) (93 0 94 0 nil 0) (94 0 95 0 nil 0) (71 0 95 1 nil 0) (79 0 96 0 nil 0) (84 0 96 1 nil 0) (87 0 96 2 nil 0) (90 0 96 3 nil 0) (96 0 97 0 nil 0) (97 0 98 0 nil 0) (99 0 98 1 nil 0) (98 0 100 0 nil 0) (95 0 101 1 nil 0) (100 0 101 2 nil 0) (108 0 102 1 nil 0) (103 0 102 2 nil 0) (105 0 103 0 nil 0) (106 0 105 0 nil 0) (104 0 105 1 nil 0) (107 0 106 0 nil 0) (124 0 107 0 nil 0) (119 0 107 1 nil 0) (116 0 107 2 nil 0) (113 0 107 3 nil 0) (109 0 108 0 nil 0) (132 0 108 1 nil 0) (110 0 109 0 nil 0) (121 0 110 0 nil 0) (122 0 110 1 nil 0) (123 0 110 2 nil 0) (111 0 110 3 nil 0) (130 0 111 0 nil 0) (114 0 113 0 nil 0) (139 1 114 0 nil 0) (112 0 114 1 nil 0) (117 0 116 0 nil 0) (140 1 117 0 nil 0) (115 0 117 1 nil 0) (120 0 119 0 nil 0) (141 1 120 0 nil 0) (118 0 120 1 nil 0) (128 0 121 0 nil 0) (131 0 122 0 nil 0) (129 0 123 0 nil 0) (126 0 124 0 nil 0) (142 1 126 0 nil 0) (125 0 126 1 nil 0) (169 0 128 0 nil 0) (127 0 128 1 nil 0) (138 0 129 0 nil 0) (127 0 129 1 nil 0) (137 0 130 0 nil 0) (127 0 130 1 nil 0) (134 0 131 0 nil 0) (127 0 131 1 nil 0) (55 0 132 0 nil 0) (47 0 132 1 nil 0) (170 0 133 0 nil 0) (167 0 133 1 nil 0) (133 0 134 0 nil 0) (136 0 134 1 nil 0) (133 0 137 0 nil 0) (135 0 137 1 nil 0) (133 0 138 0 nil 0) (135 0 138 1 nil 0) (143 0 139 1 nil 0) (144 0 140 1 nil 0) (145 0 141 1 nil 0) (146 0 142 1 nil 0) (151 0 143 0 nil 0) (152 0 144 0 nil 0) (153 0 145 0 nil 0) (154 0 146 0 nil 0) (163 1 147 0 nil 0) (155 1 147 1 nil 0) (163 1 148 0 nil 0) (157 1 148 1 nil 0) (163 1 149 0 nil 0) (156 1 149 1 nil 0) (163 1 150 0 nil 0) (158 1 150 1 nil 0) (168 1 151 0 nil 0) (160 1 151 1 nil 0) (168 1 152 0 nil 0) (161 1 152 1 nil 0) (168 1 153 0 nil 0) (159 1 153 1 nil 0) (168 1 154 0 nil 0) (162 1 154 1 nil 0) (163 1 155 1 nil 0) (163 1 156 1 nil 0) (163 1 157 1 nil 0) (163 1 158 1 nil 0) (168 1 159 1 nil 0) (168 1 160 1 nil 0) (168 1 161 1 nil 0) (168 1 162 1 nil 0) (212 0 163 1 nil 0) (166 0 164 0 nil 0) (165 0 164 1 nil 0) (216 0 168 1 nil 0) (133 0 169 0 nil 0) (136 0 169 1 nil 0) (172 0 170 0 nil 0) (171 0 170 1 nil 0) (174 0 173 1 nil 0) (175 2 174 0 nil 0) (177 0 174 1 nil 0) (197 0 175 2 nil 0) (179 0 177 0 nil 0) (176 0 177 1 nil 0) (180 2 179 0 nil 0) (178 0 179 1 nil 0) (195 1 180 1 nil 0) (195 2 180 2 nil 0) (195 3 180 3 nil 0) (182 0 183 0 nil 0) (181 0 183 1 nil 0) (186 0 187 0 nil 0) (185 0 187 1 nil 0) (187 0 188 0 nil 0) (184 0 188 1 nil 0) (191 0 193 0 nil 0) (192 0 193 1 nil 0) (190 0 194 0 nil 0) (189 0 194 1 nil 0) (193 0 195 3 nil 0) (194 0 195 4 nil 0) (188 0 195 5 nil 0) (183 0 195 7 nil 0) (201 0 197 0 nil 0) (196 0 197 1 nil 0) (198 0 200 0 nil 0) (199 0 200 1 nil 0) (211 0 201 0 nil 0) (207 0 201 1 nil 0) (200 0 201 2 nil 0) (204 0 206 0 nil 0) (205 0 206 1 nil 0) (206 0 207 0 nil 0) (202 0 207 1 nil 0) (208 0 210 0 nil 0) (209 0 210 1 nil 0) (210 0 211 0 nil 0) (203 0 211 1 nil 0) (213 0 212 0 nil 0) (215 0 213 0 nil 0) (281 1 214 0 nil 0) (280 0 214 1 nil 0) (281 1 215 0 nil 0) (214 0 215 1 nil 0) (249 0 215 2 nil 0) (248 0 215 3 nil 0) (247 0 215 4 nil 0) (245 0 215 5 nil 0) (244 0 215 6 nil 0) (243 0 215 7 nil 0) (242 0 215 8 nil 0) (241 0 215 9 nil 0) (240 0 215 10 nil 0) (239 0 215 11 nil 0) (282 1 215 12 nil 0) (229 0 215 13 nil 0) (228 0 215 14 nil 0) (227 0 215 15 nil 0) (226 0 215 16 nil 0) (225 0 215 17 nil 0) (224 0 215 18 nil 0) (223 0 215 19 nil 0) (222 0 215 20 nil 0) (221 0 215 21 nil 0) (219 0 215 22 nil 0) (218 0 215 23 nil 0) (217 0 216 0 nil 0) (408 0 217 0 nil 0) (282 1 218 0 nil 0) (230 0 218 1 nil 0) (282 1 219 0 nil 0) (231 0 219 1 nil 0) (269 0 220 0 nil 0) (261 0 220 1 nil 0) (282 1 221 0 nil 0) (220 0 221 1 nil 0) (282 1 222 0 nil 0) (232 0 222 1 nil 0) (282 1 223 0 nil 0) (233 0 223 1 nil 0) (282 1 224 0 nil 0) (234 0 224 1 nil 0) (282 1 225 0 nil 0) (235 0 225 1 nil 0) (282 1 226 0 nil 0) (236 0 226 1 nil 0) (282 1 227 0 nil 0) (237 0 227 1 nil 0) (282 1 228 0 nil 0) (238 0 228 1 nil 0) (282 1 229 0 nil 0) (269 0 229 1 nil 0) (269 0 230 0 nil 0) (259 0 230 1 nil 0) (269 0 231 0 nil 0) (260 0 231 1 nil 0) (269 0 232 0 nil 0) (262 0 232 1 nil 0) (269 0 233 0 nil 0) (263 0 233 1 nil 0) (269 0 234 0 nil 0) (264 0 234 1 nil 0) (269 0 235 0 nil 0) (265 0 235 1 nil 0) (269 0 236 0 nil 0) (266 0 236 1 nil 0) (269 0 237 0 nil 0) (267 0 237 1 nil 0) (269 0 238 0 nil 0) (268 0 238 1 nil 0) (281 1 239 0 nil 0) (251 0 239 1 nil 0) (281 1 240 0 nil 0) (252 0 240 1 nil 0) (281 1 241 0 nil 0) (253 0 241 1 nil 0) (281 1 242 0 nil 0) (254 0 242 1 nil 0) (281 1 243 0 nil 0) (250 0 243 1 nil 0) (281 1 244 0 nil 0) (255 0 244 1 nil 0) (281 1 245 0 nil 0) (256 0 245 1 nil 0) (280 0 246 0 nil 0) (277 0 246 1 nil 0) (281 1 247 0 nil 0) (246 0 247 1 nil 0) (281 1 248 0 nil 0) (257 0 248 1 nil 0) (281 1 249 0 nil 0) (258 0 249 1 nil 0) (280 0 250 0 nil 0) (274 0 250 1 nil 0) (280 0 251 0 nil 0) (270 0 251 1 nil 0) (280 0 252 0 nil 0) (271 0 252 1 nil 0) (280 0 253 0 nil 0) (272 0 253 1 nil 0) (280 0 254 0 nil 0) (273 0 254 1 nil 0) (280 0 255 0 nil 0) (275 0 255 1 nil 0) (280 0 256 0 nil 0) (276 0 256 1 nil 0) (280 0 257 0 nil 0) (278 0 257 1 nil 0) (280 0 258 0 nil 0) (279 0 258 1 nil 0) (302 1 281 1 nil 0) (308 1 282 1 nil 0) (283 0 284 0 nil 0) (285 0 286 0 nil 0) (286 0 287 0 nil 0) (287 1 288 0 nil 0) (288 0 289 0 nil 0) (291 0 290 0 nil 0) (296 0 291 0 nil 0) (292 0 291 1 nil 0) (294 0 291 2 nil 0) (295 0 292 0 nil 0) (293 0 292 1 nil 0) (298 0 294 0 nil 0) (297 0 294 1 nil 0) (300 0 295 0 nil 0) (299 0 295 1 nil 0) (301 0 296 0 nil 0) (303 0 302 1 nil 0) (307 0 303 0 nil 0) (304 0 303 1 nil 0) (306 0 304 0 nil 0) (305 0 304 1 nil 0) (308 1 307 0 nil 0) (290 0 308 1 nil 0) (439 1 309 0 nil 0) (337 0 309 1 nil 0) (439 1 310 0 nil 0) (321 0 310 1 nil 0) (321 0 311 0 nil 0) (330 0 311 1 nil 0) (321 0 312 0 nil 0) (325 0 312 1 nil 0) (440 1 313 0 nil 0) (317 0 313 1 nil 0) (351 0 314 0 nil 0) (354 0 314 1 nil 0) (440 1 315 0 nil 0) (440 1 316 0 nil 0) (371 0 316 1 nil 0) (351 0 317 0 nil 0) (361 0 317 1 nil 0) (351 0 318 0 nil 0) (359 0 318 1 nil 0) (351 0 319 0 nil 0) (357 0 319 1 nil 0) (351 0 320 0 nil 0) (355 0 320 1 nil 0) (439 1 332 0 nil 0) (333 0 332 1 nil 0) (321 0 333 0 nil 0) (331 0 333 1 nil 0) (439 1 334 0 nil 0) (311 0 334 1 nil 0) (439 1 335 0 nil 0) (336 0 335 1 nil 0) (321 0 336 0 nil 0) (329 0 336 1 nil 0) (321 0 337 0 nil 0) (328 0 337 1 nil 0) (321 0 338 0 nil 0) (327 0 338 1 nil 0) (439 1 339 0 nil 0) (338 0 339 1 nil 0) (321 0 340 0 nil 0) (326 0 340 1 nil 0) (439 1 341 0 nil 0) (340 0 341 1 nil 0) (439 1 342 0 nil 0) (312 0 342 1 nil 0) (321 0 343 0 nil 0) (324 0 343 1 nil 0) (439 1 344 0 nil 0) (343 0 344 1 nil 0) (321 0 345 0 nil 0) (323 0 345 1 nil 0) (439 1 346 0 nil 0) (345 0 346 1 nil 0) (321 0 347 0 nil 0) (322 0 347 1 nil 0) (439 1 348 0 nil 0) (347 0 348 1 nil 0) (441 1 349 0 nil 0) (381 0 349 1 nil 0) (404 0 350 0 nil 0) (394 0 350 1 nil 0) (440 1 362 0 nil 0) (363 0 362 1 nil 0) (351 0 363 0 nil 0) (360 0 363 1 nil 0) (440 1 364 0 nil 0) (318 0 364 1 nil 0) (351 0 365 0 nil 0) (358 0 365 1 nil 0) (440 1 366 0 nil 0) (365 0 366 1 nil 0) (440 1 367 0 nil 0) (319 0 367 1 nil 0) (351 0 368 0 nil 0) (356 0 368 1 nil 0) (440 1 369 0 nil 0) (368 0 369 1 nil 0) (440 1 370 0 nil 0) (320 0 370 1 nil 0) (351 0 371 0 nil 0) (353 0 371 1 nil 0) (351 0 372 0 nil 0) (352 0 372 1 nil 0) (440 1 373 0 nil 0) (372 0 373 1 nil 0) (440 1 374 0 nil 0) (351 0 374 1 nil 0) (441 1 375 0 nil 0) (404 0 375 1 nil 0) (441 1 376 0 nil 0) (350 0 376 1 nil 0) (441 1 377 0 nil 0) (378 0 377 1 nil 0) (404 0 378 0 nil 0) (395 0 378 1 nil 0) (441 1 379 0 nil 0) (380 0 379 1 nil 0) (404 0 380 0 nil 0) (396 0 380 1 nil 0) (404 0 381 0 nil 0) (397 0 381 1 nil 0) (441 1 382 0 nil 0) (383 0 382 1 nil 0) (404 0 383 0 nil 0) (398 0 383 1 nil 0) (441 1 384 0 nil 0) (385 0 384 1 nil 0) (404 0 385 0 nil 0) (399 0 385 1 nil 0) (441 1 386 0 nil 0) (387 0 386 1 nil 0) (404 0 387 0 nil 0) (400 0 387 1 nil 0) (404 0 388 0 nil 0) (401 0 388 1 nil 0) (441 1 389 0 nil 0) (388 0 389 1 nil 0) (404 0 390 0 nil 0) (402 0 390 1 nil 0) (441 1 391 0 nil 0) (390 0 391 1 nil 0) (404 0 392 0 nil 0) (403 0 392 1 nil 0) (441 1 393 0 nil 0) (392 0 393 1 nil 0) (438 1 405 0 nil 0) (417 0 405 1 nil 0) (438 1 406 0 nil 0) (424 0 406 1 nil 0) (438 1 407 0 nil 0) (437 0 407 1 nil 0) (438 1 408 0 nil 0) (407 0 408 1 nil 0) (416 0 408 2 nil 0) (406 0 408 3 nil 0) (415 0 408 4 nil 0) (414 0 408 5 nil 0) (413 0 408 6 nil 0) (412 0 408 7 nil 0) (411 0 408 8 nil 0) (410 0 408 9 nil 0) (409 0 408 10 nil 0) (405 0 408 11 nil 0) (441 1 408 12 nil 0) (375 0 408 13 nil 0) (393 0 408 14 nil 0) (391 0 408 15 nil 0) (389 0 408 16 nil 0) (386 0 408 17 nil 0) (384 0 408 18 nil 0) (382 0 408 19 nil 0) (349 0 408 20 nil 0) (379 0 408 21 nil 0) (377 0 408 22 nil 0) (376 0 408 23 nil 0) (440 1 408 24 nil 0) (374 0 408 25 nil 0) (373 0 408 26 nil 0) (316 0 408 27 nil 0) (315 0 408 28 nil 0) (370 0 408 29 nil 0) (369 0 408 30 nil 0) (367 0 408 31 nil 0) (366 0 408 32 nil 0) (364 0 408 33 nil 0) (362 0 408 34 nil 0) (313 0 408 35 nil 0) (439 1 408 36 nil 0) (310 0 408 37 nil 0) (348 0 408 38 nil 0) (346 0 408 39 nil 0) (344 0 408 40 nil 0) (342 0 408 41 nil 0) (341 0 408 42 nil 0) (339 0 408 43 nil 0) (309 0 408 44 nil 0) (335 0 408 45 nil 0) (334 0 408 46 nil 0) (332 0 408 47 nil 0) (438 1 409 0 nil 0) (418 0 409 1 nil 0) (438 1 410 0 nil 0) (419 0 410 1 nil 0) (438 1 411 0 nil 0) (436 0 411 1 nil 0) (438 1 412 0 nil 0) (420 0 412 1 nil 0) (438 1 413 0 nil 0) (421 0 413 1 nil 0) (438 1 414 0 nil 0) (422 0 414 1 nil 0) (438 1 415 0 nil 0) (423 0 415 1 nil 0) (438 1 416 0 nil 0) (425 0 416 1 nil 0) (437 0 417 0 nil 0) (426 0 417 1 nil 0) (437 0 418 0 nil 0) (427 0 418 1 nil 0) (437 0 419 0 nil 0) (428 0 419 1 nil 0) (437 0 420 0 nil 0) (430 0 420 1 nil 0) (437 0 421 0 nil 0) (431 0 421 1 nil 0) (437 0 422 0 nil 0) (432 0 422 1 nil 0) (437 0 423 0 nil 0) (433 0 423 1 nil 0) (437 0 424 0 nil 0) (434 0 424 1 nil 0) (437 0 425 0 nil 0) (435 0 425 1 nil 0) (437 0 436 0 nil 0) (429 0 436 1 nil 0) (447 1 438 1 nil 0) (454 1 439 1 nil 0) (455 1 440 1 nil 0) (444 1 441 1 nil 0) (445 0 444 1 nil 0) (452 0 445 0 nil 0) (446 0 445 1 nil 0) (443 0 446 0 nil 0) (442 0 446 1 nil 0) (448 0 447 1 nil 0) (453 0 448 0 nil 0) (449 0 448 1 nil 0) (451 0 449 0 nil 0) (450 0 449 1 nil 0) (454 1 452 0 nil 0) (455 1 453 0 nil 0) (456 0 454 1 nil 0) (457 0 455 1 nil 0) (458 0 456 0 nil 0) (466 0 457 0 nil 0) (463 0 458 0 nil 0) (459 0 458 1 nil 0) (469 0 458 2 nil 0) (461 0 459 0 nil 0) (460 0 459 1 nil 0) (465 0 461 0 nil 0) (464 0 461 1 nil 0) (462 0 463 0 nil 0) (471 0 466 0 nil 0) (467 0 466 1 nil 0) (469 0 466 2 nil 0) (470 0 467 0 nil 0) (468 0 467 1 nil 0) (473 0 469 0 nil 0) (472 0 469 1 nil 0) (475 0 470 0 nil 0) (474 0 470 1 nil 0) (476 0 471 0 nil 0) (478 0 477 0 nil 0) (479 1 478 0 nil 0) (480 0 479 0 nil 0) (481 0 480 0 nil 0) (483 0 482 0 nil 0))) nil 6.17))
